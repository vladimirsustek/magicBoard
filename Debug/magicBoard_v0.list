
magicBoard_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008680  08008680  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008688  08008688  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000070  08008700  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008700  00020500  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e6c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab1  00000000  00000000  00044f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  000499c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  0004b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e3b0  00000000  00000000  0004d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a5a  00000000  00000000  0007b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113413  00000000  00000000  0009ef02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b2315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c64  00000000  00000000  001b2368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08008588 	.word	0x08008588

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08008588 	.word	0x08008588

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ADC1_Init+0x98>)
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_ADC1_Init+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_ADC1_Init+0x98>)
 800063a:	f001 fb7d 	bl	8001d38 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 fd7a 	bl	800113c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000648:	230c      	movs	r3, #12
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_ADC1_Init+0x98>)
 800065a:	f001 fbb1 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000664:	f000 fd6a 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000a0 	.word	0x200000a0
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2c      	ldr	r2, [pc, #176]	; (800074c <HAL_ADC_MspInit+0xd0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d152      	bne.n	8000744 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <HAL_ADC_MspInit+0xd8>)
 80006e2:	f002 ff25 	bl	8003530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_ADC_MspInit+0xe0>)
 80006ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000704:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800070c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000714:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800072a:	f001 ff1b 	bl	8002564 <HAL_DMA_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000734:	f000 fd02 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012000 	.word	0x40012000
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800
 8000758:	200000e8 	.word	0x200000e8
 800075c:	40026410 	.word	0x40026410

08000760 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_DAC_Init+0x4c>)
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <MX_DAC_Init+0x50>)
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_DAC_Init+0x4c>)
 8000776:	f001 fe84 	bl	8002482 <HAL_DAC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000780:	f000 fcdc 	bl	800113c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_DAC_Init+0x4c>)
 8000794:	f001 fe97 	bl	80024c6 <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800079e:	f000 fccd 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000148 	.word	0x20000148
 80007b0:	40007400 	.word	0x40007400

080007b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <HAL_DAC_MspInit+0x74>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d123      	bne.n	800081e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080a:	2303      	movs	r3, #3
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_DAC_MspInit+0x7c>)
 800081a:	f002 fe89 	bl	8003530 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40007400 	.word	0x40007400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_DMA_Init+0x60>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_DMA_Init+0x60>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_DMA_Init+0x60>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_DMA_Init+0x60>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_DMA_Init+0x60>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_DMA_Init+0x60>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	200e      	movs	r0, #14
 8000870:	f001 fdd1 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000874:	200e      	movs	r0, #14
 8000876:	f001 fdea 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2038      	movs	r0, #56	; 0x38
 8000880:	f001 fdc9 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000884:	2038      	movs	r0, #56	; 0x38
 8000886:	f001 fde2 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ETH_Init+0x78>)
 800089e:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <MX_ETH_Init+0x7c>)
 80008a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_ETH_Init+0x78>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ETH_Init+0x78>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ETH_Init+0x78>)
 80008b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ETH_Init+0x78>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_ETH_Init+0x80>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ETH_Init+0x80>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_ETH_Init+0x80>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_ETH_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_ETH_Init+0x78>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_ETH_Init+0x80>)
 80008e6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_ETH_Init+0x78>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_ETH_Init+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_ETH_Init+0x78>)
 80008f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008fa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_ETH_Init+0x78>)
 80008fe:	f002 f9ad 	bl	8002c5c <HAL_ETH_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000908:	f000 fc18 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000015c 	.word	0x2000015c
 8000914:	40028000 	.word	0x40028000
 8000918:	2000008c 	.word	0x2000008c

0800091c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <HAL_ETH_MspInit+0x158>)
 800093a:	4293      	cmp	r3, r2
 800093c:	f040 8096 	bne.w	8000a6c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a46      	ldr	r2, [pc, #280]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800095e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
 8000994:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a34      	ldr	r2, [pc, #208]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e8:	2332      	movs	r3, #50	; 0x32
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <HAL_ETH_MspInit+0x160>)
 8000a04:	f002 fd94 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a08:	2386      	movs	r3, #134	; 0x86
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a18:	230b      	movs	r3, #11
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4817      	ldr	r0, [pc, #92]	; (8000a80 <HAL_ETH_MspInit+0x164>)
 8000a24:	f002 fd84 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3a:	230b      	movs	r3, #11
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <HAL_ETH_MspInit+0x168>)
 8000a46:	f002 fd73 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <HAL_ETH_MspInit+0x16c>)
 8000a68:	f002 fd62 	bl	8003530 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40028000 	.word	0x40028000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800

08000a8c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b9f      	ldr	r3, [pc, #636]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a9e      	ldr	r2, [pc, #632]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b9c      	ldr	r3, [pc, #624]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b99      	ldr	r3, [pc, #612]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a98      	ldr	r2, [pc, #608]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b96      	ldr	r3, [pc, #600]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b93      	ldr	r3, [pc, #588]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b90      	ldr	r3, [pc, #576]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a8c      	ldr	r2, [pc, #560]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b81      	ldr	r3, [pc, #516]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a80      	ldr	r2, [pc, #512]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b7e      	ldr	r3, [pc, #504]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a7a      	ldr	r2, [pc, #488]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	4b75      	ldr	r3, [pc, #468]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a74      	ldr	r2, [pc, #464]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	486f      	ldr	r0, [pc, #444]	; (8000d24 <MX_GPIO_Init+0x298>)
 8000b68:	f002 fe8e 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_NCS2_Pin|SPI3_NCS1_Pin|NRF2_PWR_Pin|NRF1_PWR_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f240 3106 	movw	r1, #774	; 0x306
 8000b72:	486d      	ldr	r0, [pc, #436]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000b74:	f002 fe88 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7e:	486b      	ldr	r0, [pc, #428]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000b80:	f002 fe82 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP_RST_Pin|RDA_PWR_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f248 0101 	movw	r1, #32769	; 0x8001
 8000b8a:	4868      	ldr	r0, [pc, #416]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000b8c:	f002 fe7c 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b96:	4864      	ldr	r0, [pc, #400]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000b98:	f002 fe76 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_2, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f640 0104 	movw	r1, #2052	; 0x804
 8000ba2:	4863      	ldr	r0, [pc, #396]	; (8000d30 <MX_GPIO_Init+0x2a4>)
 8000ba4:	f002 fe70 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|EEPROM_CS_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	210c      	movs	r1, #12
 8000bac:	4861      	ldr	r0, [pc, #388]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000bae:	f002 fe6b 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	485f      	ldr	r0, [pc, #380]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000bb8:	f002 fe66 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	485d      	ldr	r0, [pc, #372]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000bc2:	f002 fe61 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4856      	ldr	r0, [pc, #344]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000bde:	f002 fca7 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF1_CE_Pin;
 8000be2:	2310      	movs	r3, #16
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF1_CE_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	484a      	ldr	r0, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x298>)
 8000bfa:	f002 fc99 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SPI3_NCS2_Pin|SPI3_NCS1_Pin|LD3_Pin|LD2_Pin
 8000bfe:	f244 3386 	movw	r3, #17286	; 0x4386
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
                          |NRF2_PWR_Pin|NRF1_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4844      	ldr	r0, [pc, #272]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000c18:	f002 fc8a 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_IO0_Pin|ESP_IO2_Pin;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000c32:	f002 fc7d 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin|ESP_RST_Pin|RDA_PWR_Pin;
 8000c36:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4837      	ldr	r0, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000c50:	f002 fc6e 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF2_IRQ_Pin|NRF1_IRQ_Pin;
 8000c54:	f248 0340 	movw	r3, #32832	; 0x8040
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	482f      	ldr	r0, [pc, #188]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000c6a:	f002 fc61 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2;
 8000c6e:	f640 0304 	movw	r3, #2052	; 0x804
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <MX_GPIO_Init+0x2a4>)
 8000c88:	f002 fc52 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|EEPROM_CS_Pin|USB_PowerSwitchOn_Pin;
 8000c8c:	234c      	movs	r3, #76	; 0x4c
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000ca4:	f002 fc44 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000cbc:	f002 fc38 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF2_CE_Pin;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF2_CE_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000cd8:	f002 fc2a 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cdc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cee:	230a      	movs	r3, #10
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <MX_GPIO_Init+0x2b0>)
 8000cfa:	f002 fc19 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <MX_GPIO_Init+0x2b0>)
 8000d14:	f002 fc0c 	bl	8003530 <HAL_GPIO_Init>

}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	; 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021400 	.word	0x40021400
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40021800 	.word	0x40021800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_I2C2_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_I2C2_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d7c:	f002 fd9e 	bl	80038bc <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 f9d9 	bl	800113c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d8e:	f002 fe25 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 f9d0 	bl	800113c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000da0:	f002 fe67 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 f9c7 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001f0 	.word	0x200001f0
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	20303e5d 	.word	0x20303e5d

08000dc0 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C4_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C4_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dfc:	f002 fd5e 	bl	80038bc <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 f999 	bl	800113c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e0e:	f002 fde5 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 f990 	bl	800113c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e20:	f002 fe27 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f987 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001a4 	.word	0x200001a4
 8000e38:	40006000 	.word	0x40006000
 8000e3c:	20303e5d 	.word	0x20303e5d

08000e40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0b0      	sub	sp, #192	; 0xc0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2290      	movs	r2, #144	; 0x90
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fc33 	bl	80076cc <memset>
  if(i2cHandle->Instance==I2C2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13e      	bne.n	8000eee <HAL_I2C_MspInit+0xae>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e74:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fb53 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e8c:	f000 f956 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ea8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482d      	ldr	r0, [pc, #180]	; (8000f84 <HAL_I2C_MspInit+0x144>)
 8000ed0:	f002 fb2e 	bl	8003530 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000eec:	e042      	b.n	8000f74 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <HAL_I2C_MspInit+0x148>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d13d      	bne.n	8000f74 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fb0f 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8000f14:	f000 f912 	bl	800113c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <HAL_I2C_MspInit+0x14c>)
 8000f58:	f002 faea 	bl	8003530 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	bf00      	nop
 8000f76:	37c0      	adds	r7, #192	; 0xc0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40006000 	.word	0x40006000
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fe4e 	bl	8001c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f85d 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f7ff fd75 	bl	8000a8c <MX_GPIO_Init>
  MX_ETH_Init();
 8000fa2:	f7ff fc79 	bl	8000898 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fa6:	f000 fcef 	bl	8001988 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000faa:	f000 fe13 	bl	8001bd4 <MX_USB_OTG_FS_USB_Init>
  MX_DAC_Init();
 8000fae:	f7ff fbd7 	bl	8000760 <MX_DAC_Init>
  MX_SPI3_Init();
 8000fb2:	f000 f8c9 	bl	8001148 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fb6:	f000 fad1 	bl	800155c <MX_TIM3_Init>
  MX_DMA_Init();
 8000fba:	f7ff fc3b 	bl	8000834 <MX_DMA_Init>
  MX_UART7_Init();
 8000fbe:	f000 fcb3 	bl	8001928 <MX_UART7_Init>
  MX_TIM2_Init();
 8000fc2:	f000 fa49 	bl	8001458 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000fc6:	f7ff febb 	bl	8000d40 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000fca:	f7ff fef9 	bl	8000dc0 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000fce:	f7ff fb03 	bl	80005d8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000fd2:	f000 fb45 	bl	8001660 <MX_TIM9_Init>



  while(1)
  {
	  NRF_powerDown();
 8000fd6:	f006 fa81 	bl	80074dc <NRF_powerDown>
	  NRF_powerDown_B();
 8000fda:	f006 fa93 	bl	8007504 <NRF_powerDown_B>

	  HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe2:	f000 fe85 	bl	8001cf0 <HAL_Delay>

	  uint8_t status = NRF_getSTATUS();
 8000fe6:	f006 fa6b 	bl	80074c0 <NRF_getSTATUS>
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	  uint8_t statusB = NRF_getSTATUS_B();
 8000fee:	f006 fa7b 	bl	80074e8 <NRF_getSTATUS_B>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71bb      	strb	r3, [r7, #6]

	  printf("STATUS 1: 0x%02x\n", status);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <main+0xc0>)
 8000ffc:	f006 fb6e 	bl	80076dc <iprintf>
	  printf("STATUS 2: 0x%02x\n", statusB);
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	4619      	mov	r1, r3
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <main+0xc4>)
 8001006:	f006 fb69 	bl	80076dc <iprintf>

	  NRF_powerUp();
 800100a:	f006 fa61 	bl	80074d0 <NRF_powerUp>
	  NRF_powerUp_B();
 800100e:	f006 fa73 	bl	80074f8 <NRF_powerUp_B>

	  HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f000 fe6b 	bl	8001cf0 <HAL_Delay>

	  status = NRF_getSTATUS();
 800101a:	f006 fa51 	bl	80074c0 <NRF_getSTATUS>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	  statusB = NRF_getSTATUS_B();
 8001022:	f006 fa61 	bl	80074e8 <NRF_getSTATUS_B>
 8001026:	4603      	mov	r3, r0
 8001028:	71bb      	strb	r3, [r7, #6]
	  status = NRF_getSTATUS();
 800102a:	f006 fa49 	bl	80074c0 <NRF_getSTATUS>
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	  statusB = NRF_getSTATUS_B();
 8001032:	f006 fa59 	bl	80074e8 <NRF_getSTATUS_B>
 8001036:	4603      	mov	r3, r0
 8001038:	71bb      	strb	r3, [r7, #6]

	  printf("STATUS 1: 0x%02x\n", status);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <main+0xc0>)
 8001040:	f006 fb4c 	bl	80076dc <iprintf>
	  printf("STATUS 2: 0x%02x\n", statusB);
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	4619      	mov	r1, r3
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <main+0xc4>)
 800104a:	f006 fb47 	bl	80076dc <iprintf>
  {
 800104e:	e7c2      	b.n	8000fd6 <main+0x46>
 8001050:	080085a0 	.word	0x080085a0
 8001054:	080085b4 	.word	0x080085b4

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2234      	movs	r2, #52	; 0x34
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f006 fb30 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800107c:	f002 fd46 	bl	8003b0c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <SystemClock_Config+0xdc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <SystemClock_Config+0xdc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemClock_Config+0xdc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <SystemClock_Config+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <SystemClock_Config+0xe0>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemClock_Config+0xe0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010cc:	2360      	movs	r3, #96	; 0x60
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fd73 	bl	8003bcc <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ec:	f000 f826 	bl	800113c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f0:	f002 fd1c 	bl	8003b2c <HAL_PWREx_EnableOverDrive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010fa:	f000 f81f 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2103      	movs	r1, #3
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f804 	bl	8004128 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001126:	f000 f809 	bl	800113c <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_SPI3_Init+0x74>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <MX_SPI3_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_SPI3_Init+0x74>)
 8001154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_SPI3_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_SPI3_Init+0x74>)
 8001162:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001166:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI3_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_SPI3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI3_Init+0x74>)
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI3_Init+0x74>)
 800117e:	2210      	movs	r2, #16
 8001180:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI3_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI3_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_SPI3_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI3_Init+0x74>)
 8001196:	2207      	movs	r2, #7
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_SPI3_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI3_Init+0x74>)
 80011a2:	2208      	movs	r2, #8
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_SPI3_Init+0x74>)
 80011a8:	f003 fde8 	bl	8004d7c <HAL_SPI_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f7ff ffc3 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000023c 	.word	0x2000023c
 80011c0:	40003c00 	.word	0x40003c00

080011c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x7c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d128      	bne.n	8001238 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_SPI_MspInit+0x80>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <HAL_SPI_MspInit+0x80>)
 80011ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_SPI_MspInit+0x80>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_SPI_MspInit+0x80>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_SPI_MspInit+0x80>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_SPI_MspInit+0x80>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001216:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001228:	2306      	movs	r3, #6
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_SPI_MspInit+0x84>)
 8001234:	f002 f97c 	bl	8003530 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003c00 	.word	0x40003c00
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x44>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x44>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x44>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 fce6 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <DMA1_Stream3_IRQHandler+0x10>)
 80012ee:	f001 fa79 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000048c 	.word	0x2000048c

080012fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA2_Stream0_IRQHandler+0x10>)
 8001302:	f001 fa6f 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000e8 	.word	0x200000e8

08001310 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <UART7_IRQHandler+0x10>)
 8001316:	f005 f915 	bl	8006544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000384 	.word	0x20000384

08001324 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
	}

return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_close>:
	}
	return len;
}

int _close(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_isatty>:

int _isatty(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f006 f93e 	bl	8007678 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20080000 	.word	0x20080000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000094 	.word	0x20000094
 8001430:	20000500 	.word	0x20000500

08001434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_TIM2_Init+0x100>)
 800148c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <MX_TIM2_Init+0x100>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_TIM2_Init+0x100>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <MX_TIM2_Init+0x100>)
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_TIM2_Init+0x100>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_TIM2_Init+0x100>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b2:	4829      	ldr	r0, [pc, #164]	; (8001558 <MX_TIM2_Init+0x100>)
 80014b4:	f004 f8a8 	bl	8005608 <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014be:	f7ff fe3d 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4822      	ldr	r0, [pc, #136]	; (8001558 <MX_TIM2_Init+0x100>)
 80014d0:	f004 fa66 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014da:	f7ff fe2f 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <MX_TIM2_Init+0x100>)
 80014e0:	f004 f8e9 	bl	80056b6 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ea:	f7ff fe27 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	; (8001558 <MX_TIM2_Init+0x100>)
 80014fe:	f004 feb1 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001508:	f7ff fe18 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	; 0x60
 800150e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM2_Init+0x100>)
 8001524:	f004 f928 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800152e:	f7ff fe05 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM2_Init+0x100>)
 800153a:	f004 f91d 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001544:	f7ff fdfa 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM2_Init+0x100>)
 800154a:	f000 f931 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000338 	.word	0x20000338

0800155c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001590:	4a32      	ldr	r2, [pc, #200]	; (800165c <MX_TIM3_Init+0x100>)
 8001592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <MX_TIM3_Init+0xfc>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b4:	4828      	ldr	r0, [pc, #160]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015b6:	f004 f827 	bl	8005608 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015c0:	f7ff fdbc 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4821      	ldr	r0, [pc, #132]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015d2:	f004 f9e5 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015dc:	f7ff fdae 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e0:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_TIM3_Init+0xfc>)
 80015e2:	f004 f868 	bl	80056b6 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015ec:	f7ff fda6 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001600:	f004 fe30 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800160a:	f7ff fd97 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM3_Init+0xfc>)
 8001626:	f004 f8a7 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001630:	f7ff fd84 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2204      	movs	r2, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xfc>)
 800163c:	f004 f89c 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001646:	f7ff fd79 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xfc>)
 800164c:	f000 f8b0 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3738      	adds	r7, #56	; 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002a0 	.word	0x200002a0
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_TIM9_Init+0xbc>)
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <MX_TIM9_Init+0xc0>)
 800168a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <MX_TIM9_Init+0xbc>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_TIM9_Init+0xbc>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <MX_TIM9_Init+0xbc>)
 800169a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_TIM9_Init+0xbc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM9_Init+0xbc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <MX_TIM9_Init+0xbc>)
 80016ae:	f003 ffab 	bl	8005608 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80016b8:	f7ff fd40 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	4619      	mov	r1, r3
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_TIM9_Init+0xbc>)
 80016ca:	f004 f969 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80016d4:	f7ff fd32 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_TIM9_Init+0xbc>)
 80016da:	f003 ffec 	bl	80056b6 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80016e4:	f7ff fd2a 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	; 0x60
 80016ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM9_Init+0xbc>)
 8001700:	f004 f83a 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800170a:	f7ff fd17 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM9_Init+0xbc>)
 8001710:	f000 f84e 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001714:	bf00      	nop
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002ec 	.word	0x200002ec
 8001720:	40014000 	.word	0x40014000

08001724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d10c      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800174e:	e022      	b.n	8001796 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_TIM_Base_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10c      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
}
 8001772:	e010      	b.n	8001796 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_TIM_Base_MspInit+0x88>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10b      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40014000 	.word	0x40014000

080017b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d139      	bne.n	8001846 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	483c      	ldr	r0, [pc, #240]	; (8001910 <HAL_TIM_MspPostInit+0x160>)
 8001820:	f001 fe86 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001824:	2308      	movs	r3, #8
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4835      	ldr	r0, [pc, #212]	; (8001914 <HAL_TIM_MspPostInit+0x164>)
 8001840:	f001 fe76 	bl	8003530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001844:	e05e      	b.n	8001904 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_TIM_MspPostInit+0x168>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d138      	bne.n	80018c2 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a2d      	ldr	r2, [pc, #180]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001890:	2302      	movs	r3, #2
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4820      	ldr	r0, [pc, #128]	; (800191c <HAL_TIM_MspPostInit+0x16c>)
 800189c:	f001 fe48 	bl	8003530 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a0:	2310      	movs	r3, #16
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4816      	ldr	r0, [pc, #88]	; (8001914 <HAL_TIM_MspPostInit+0x164>)
 80018bc:	f001 fe38 	bl	8003530 <HAL_GPIO_Init>
}
 80018c0:	e020      	b.n	8001904 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM9)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_TIM_MspPostInit+0x170>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d11b      	bne.n	8001904 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_MspPostInit+0x15c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018e4:	2320      	movs	r3, #32
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80018f4:	2303      	movs	r3, #3
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_TIM_MspPostInit+0x174>)
 8001900:	f001 fe16 	bl	8003530 <HAL_GPIO_Init>
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40000400 	.word	0x40000400
 800191c:	40020800 	.word	0x40020800
 8001920:	40014000 	.word	0x40014000
 8001924:	40021000 	.word	0x40021000

08001928 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_UART7_Init+0x58>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_UART7_Init+0x5c>)
 8001930:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_UART7_Init+0x58>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_UART7_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_UART7_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_UART7_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_UART7_Init+0x58>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_UART7_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_UART7_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_UART7_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_UART7_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_UART7_Init+0x58>)
 800196c:	f004 fd08 	bl	8006380 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001976:	f7ff fbe1 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000384 	.word	0x20000384
 8001984:	40007800 	.word	0x40007800

08001988 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_USART3_UART_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019cc:	f004 fcd8 	bl	8006380 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019d6:	f7ff fbb1 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000408 	.word	0x20000408
 80019e4:	40004800 	.word	0x40004800

080019e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0b0      	sub	sp, #192	; 0xc0
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	2290      	movs	r2, #144	; 0x90
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fe5f 	bl	80076cc <memset>
  if(uartHandle->Instance==UART7)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d173      	bne.n	8001b00 <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fd80 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a32:	f7ff fb83 	bl	800113c <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a66:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001a80:	2308      	movs	r3, #8
 8001a82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4841      	ldr	r0, [pc, #260]	; (8001b94 <HAL_UART_MspInit+0x1ac>)
 8001a8e:	f001 fd4f 	bl	8003530 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_UART_MspInit+0x1b4>)
 8001a96:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a9a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001ad2:	4831      	ldr	r0, [pc, #196]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ad4:	f000 fd46 	bl	8002564 <HAL_DMA_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ade:	f7ff fb2d 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ae6:	671a      	str	r2, [r3, #112]	; 0x70
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2052      	movs	r0, #82	; 0x52
 8001af4:	f000 fc8f 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001af8:	2052      	movs	r0, #82	; 0x52
 8001afa:	f000 fca8 	bl	800244e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001afe:	e041      	b.n	8001b84 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d13c      	bne.n	8001b84 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fd07 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001b24:	f7ff fb0a 	bl	800113c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b72:	2307      	movs	r3, #7
 8001b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HAL_UART_MspInit+0x1bc>)
 8001b80:	f001 fcd6 	bl	8003530 <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	37c0      	adds	r7, #192	; 0xc0
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40007800 	.word	0x40007800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	2000048c 	.word	0x2000048c
 8001b9c:	40026058 	.word	0x40026058
 8001ba0:	40004800 	.word	0x40004800
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <_write+0x28>)
 8001bc0:	f004 fc2c 	bl	800641c <HAL_UART_Transmit>
	return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000408 	.word	0x20000408

08001bd4 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c00:	4c0b      	ldr	r4, [pc, #44]	; (8001c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0e:	f7ff fc11 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f005 fd37 	bl	8007684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff f9bb 	bl	8000f90 <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c28:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 8001c2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c30:	20000500 	.word	0x20000500

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>

08001c36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f000 fbe0 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 f805 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c46:	f7ff fb01 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fbfb 	bl	800246a <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 fbc3 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	200004ec 	.word	0x200004ec

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200004ec 	.word	0x200004ec

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e031      	b.n	8001db2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fc90 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_ADC_Init+0x84>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f970 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
 8001da2:	e001      	b.n	8001da8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	ffffeefd 	.word	0xffffeefd

08001dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e136      	b.n	800204a <HAL_ADC_ConfigChannel+0x28a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d93a      	bls.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df4:	d035      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8d      	ldr	r2, [pc, #564]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	061a      	lsls	r2, r3, #24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	e035      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68d9      	ldr	r1, [r3, #12]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4403      	add	r3, r0
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	409a      	lsls	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e60:	e022      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef8:	e04c      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d824      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	221f      	movs	r2, #31
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	; 0x23
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	e023      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	; 0x41
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	; 0x41
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fb2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10f      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fd0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fdc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d122      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002004:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x2a4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x2a8>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3b01      	subs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	10000012 	.word	0x10000012
 800205c:	40012000 	.word	0x40012000
 8002060:	40012300 	.word	0x40012300
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002074:	4b78      	ldr	r3, [pc, #480]	; (8002258 <ADC_Init+0x1ec>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a77      	ldr	r2, [pc, #476]	; (8002258 <ADC_Init+0x1ec>)
 800207a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800207e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002080:	4b75      	ldr	r3, [pc, #468]	; (8002258 <ADC_Init+0x1ec>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4973      	ldr	r1, [pc, #460]	; (8002258 <ADC_Init+0x1ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	021a      	lsls	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <ADC_Init+0x1f0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	e00f      	b.n	8002166 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002164:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0202 	bic.w	r2, r2, #2
 8002174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	005a      	lsls	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	035a      	lsls	r2, r3, #13
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e007      	b.n	80021dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	051a      	lsls	r2, r3, #20
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221e:	025a      	lsls	r2, r3, #9
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	029a      	lsls	r2, r3, #10
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40012300 	.word	0x40012300
 800225c:	0f000001 	.word	0x0f000001

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e014      	b.n	80024be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	791b      	ldrb	r3, [r3, #4]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe f985 	bl	80007b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b087      	sub	sp, #28
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	795b      	ldrb	r3, [r3, #5]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_DAC_ConfigChannel+0x18>
 80024da:	2302      	movs	r3, #2
 80024dc:	e03c      	b.n	8002558 <HAL_DAC_ConfigChannel+0x92>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2202      	movs	r2, #2
 80024e8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	22c0      	movs	r2, #192	; 0xc0
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff fbb2 	bl	8001cd8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e099      	b.n	80026b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e00f      	b.n	80025c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff fb99 	bl	8001cd8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d908      	bls.n	80025c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e078      	b.n	80026b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e8      	bne.n	80025a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_DMA_Init+0x158>)
 80025dc:	4013      	ands	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0307 	bic.w	r3, r3, #7
 8002642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b04      	cmp	r3, #4
 8002654:	d117      	bne.n	8002686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa7b 	bl	8002b64 <DMA_CheckFifoParam>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2240      	movs	r2, #64	; 0x40
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002682:	2301      	movs	r3, #1
 8002684:	e016      	b.n	80026b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa32 	bl	8002af8 <DMA_CalcBaseAndBitshift>
 8002694:	4603      	mov	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	223f      	movs	r2, #63	; 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	e010803f 	.word	0xe010803f

080026c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ce:	f7ff fb03 	bl	8001cd8 <HAL_GetTick>
 80026d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d008      	beq.n	80026f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e052      	b.n	8002798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0216 	bic.w	r2, r2, #22
 8002700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_DMA_Abort+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	e013      	b.n	800276c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002744:	f7ff fac8 	bl	8001cd8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b05      	cmp	r3, #5
 8002750:	d90c      	bls.n	800276c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e015      	b.n	8002798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e4      	bne.n	8002744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00c      	b.n	80027d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2205      	movs	r2, #5
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027f0:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <HAL_DMA_IRQHandler+0x258>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_DMA_IRQHandler+0x25c>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2208      	movs	r2, #8
 8002810:	409a      	lsls	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01a      	beq.n	8002850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2208      	movs	r2, #8
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2204      	movs	r2, #4
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	2204      	movs	r2, #4
 80028aa:	409a      	lsls	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2210      	movs	r2, #16
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d043      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03c      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	2210      	movs	r2, #16
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d024      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e01f      	b.n	8002954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
 8002924:	e016      	b.n	8002954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0208 	bic.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2220      	movs	r2, #32
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 808e 	beq.w	8002a82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8086 	beq.w	8002a82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2220      	movs	r2, #32
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d136      	bne.n	80029fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0216 	bic.w	r2, r2, #22
 800299c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <HAL_DMA_IRQHandler+0x1da>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0208 	bic.w	r2, r2, #8
 80029cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	223f      	movs	r2, #63	; 0x3f
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d07d      	beq.n	8002aee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
        }
        return;
 80029fa:	e078      	b.n	8002aee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01c      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d030      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e02b      	b.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d027      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	e022      	b.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d032      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d022      	beq.n	8002adc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d307      	bcc.n	8002aca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f2      	bne.n	8002aae <HAL_DMA_IRQHandler+0x2ca>
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002aee:	bf00      	nop
    }
  }
}
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop

08002af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3b10      	subs	r3, #16
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <DMA_CalcBaseAndBitshift+0x60>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <DMA_CalcBaseAndBitshift+0x64>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d908      	bls.n	8002b38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <DMA_CalcBaseAndBitshift+0x68>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	1d1a      	adds	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
 8002b36:	e006      	b.n	8002b46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <DMA_CalcBaseAndBitshift+0x68>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	aaaaaaab 	.word	0xaaaaaaab
 8002b5c:	080085e0 	.word	0x080085e0
 8002b60:	fffffc00 	.word	0xfffffc00

08002b64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11f      	bne.n	8002bbe <DMA_CheckFifoParam+0x5a>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d856      	bhi.n	8002c32 <DMA_CheckFifoParam+0xce>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <DMA_CheckFifoParam+0x28>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002baf 	.word	0x08002baf
 8002b94:	08002b9d 	.word	0x08002b9d
 8002b98:	08002c33 	.word	0x08002c33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d046      	beq.n	8002c36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e043      	b.n	8002c36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bb6:	d140      	bne.n	8002c3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e03d      	b.n	8002c3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d121      	bne.n	8002c0c <DMA_CheckFifoParam+0xa8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d837      	bhi.n	8002c3e <DMA_CheckFifoParam+0xda>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <DMA_CheckFifoParam+0x70>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002beb 	.word	0x08002beb
 8002bdc:	08002be5 	.word	0x08002be5
 8002be0:	08002bfd 	.word	0x08002bfd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e030      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d025      	beq.n	8002c42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfa:	e022      	b.n	8002c42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0a:	e01c      	b.n	8002c46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d903      	bls.n	8002c1a <DMA_CheckFifoParam+0xb6>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d003      	beq.n	8002c20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c18:	e018      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1e:	e015      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e00b      	b.n	8002c4a <DMA_CheckFifoParam+0xe6>
      break;
 8002c32:	bf00      	nop
 8002c34:	e00a      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e008      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e006      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e004      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002c6c:	4ba9      	ldr	r3, [pc, #676]	; (8002f14 <HAL_ETH_Init+0x2b8>)
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e181      	b.n	8002f86 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fe40 	bl	800091c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	4b9e      	ldr	r3, [pc, #632]	; (8002f18 <HAL_ETH_Init+0x2bc>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4a9d      	ldr	r2, [pc, #628]	; (8002f18 <HAL_ETH_Init+0x2bc>)
 8002ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <HAL_ETH_Init+0x2bc>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cb4:	4b99      	ldr	r3, [pc, #612]	; (8002f1c <HAL_ETH_Init+0x2c0>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a98      	ldr	r2, [pc, #608]	; (8002f1c <HAL_ETH_Init+0x2c0>)
 8002cba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cbe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cc0:	4b96      	ldr	r3, [pc, #600]	; (8002f1c <HAL_ETH_Init+0x2c0>)
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4994      	ldr	r1, [pc, #592]	; (8002f1c <HAL_ETH_Init+0x2c0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce6:	f7fe fff7 	bl	8001cd8 <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002cec:	e011      	b.n	8002d12 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002cee:	f7fe fff3 	bl	8001cd8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cfc:	d909      	bls.n	8002d12 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e139      	b.n	8002f86 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e4      	bne.n	8002cee <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f023 031c 	bic.w	r3, r3, #28
 8002d32:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d34:	f001 fbc6 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8002d38:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	; (8002f20 <HAL_ETH_Init+0x2c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d908      	bls.n	8002d54 <HAL_ETH_Init+0xf8>
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4a77      	ldr	r2, [pc, #476]	; (8002f24 <HAL_ETH_Init+0x2c8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d804      	bhi.n	8002d54 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e027      	b.n	8002da4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4a73      	ldr	r2, [pc, #460]	; (8002f24 <HAL_ETH_Init+0x2c8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d908      	bls.n	8002d6e <HAL_ETH_Init+0x112>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <HAL_ETH_Init+0x2b8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d204      	bcs.n	8002d6e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f043 030c 	orr.w	r3, r3, #12
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	e01a      	b.n	8002da4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4a68      	ldr	r2, [pc, #416]	; (8002f14 <HAL_ETH_Init+0x2b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d303      	bcc.n	8002d7e <HAL_ETH_Init+0x122>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4a6b      	ldr	r2, [pc, #428]	; (8002f28 <HAL_ETH_Init+0x2cc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d911      	bls.n	8002da2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_ETH_Init+0x2cc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d908      	bls.n	8002d98 <HAL_ETH_Init+0x13c>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4a68      	ldr	r2, [pc, #416]	; (8002f2c <HAL_ETH_Init+0x2d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d804      	bhi.n	8002d98 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e000      	b.n	8002da4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002da2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002dac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002db0:	2100      	movs	r1, #0
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f954 	bl	8003060 <HAL_ETH_WritePHYRegister>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002dc2:	6939      	ldr	r1, [r7, #16]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f9b1 	bl	800312c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0d7      	b.n	8002f86 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002dd6:	20ff      	movs	r0, #255	; 0xff
 8002dd8:	f7fe ff8a 	bl	8001cf0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a5 	beq.w	8002f30 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de6:	f7fe ff77 	bl	8001cd8 <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	461a      	mov	r2, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8cb 	bl	8002f90 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002dfa:	f7fe ff6d 	bl	8001cd8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d90f      	bls.n	8002e2c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f98a 	bl	800312c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0ac      	b.n	8002f86 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0da      	beq.n	8002dec <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f90f 	bl	8003060 <HAL_ETH_WritePHYRegister>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002e4c:	6939      	ldr	r1, [r7, #16]
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f96c 	bl	800312c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e092      	b.n	8002f86 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e60:	f7fe ff3a 	bl	8001cd8 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f88e 	bl	8002f90 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002e74:	f7fe ff30 	bl	8001cd8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d90f      	bls.n	8002ea6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e8a:	6939      	ldr	r1, [r7, #16]
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f94d 	bl	800312c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e06f      	b.n	8002f86 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0da      	beq.n	8002e66 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f869 	bl	8002f90 <HAL_ETH_ReadPHYRegister>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f92e 	bl	800312c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e054      	b.n	8002f86 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	e002      	b.n	8002ef6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	e035      	b.n	8002f74 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e030      	b.n	8002f74 <HAL_ETH_Init+0x318>
 8002f12:	bf00      	nop
 8002f14:	03938700 	.word	0x03938700
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	01312cff 	.word	0x01312cff
 8002f24:	02160ebf 	.word	0x02160ebf
 8002f28:	05f5e0ff 	.word	0x05f5e0ff
 8002f2c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f889 	bl	8003060 <HAL_ETH_WritePHYRegister>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f58:	6939      	ldr	r1, [r7, #16]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8e6 	bl	800312c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e00c      	b.n	8002f86 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002f6c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002f70:	f7fe febe 	bl	8001cf0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002f74:	6939      	ldr	r1, [r7, #16]
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8d8 	bl	800312c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop

08002f90 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b82      	cmp	r3, #130	; 0x82
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e050      	b.n	8003058 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2282      	movs	r2, #130	; 0x82
 8002fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 031c 	and.w	r3, r3, #28
 8002fcc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8a1b      	ldrh	r3, [r3, #16]
 8002fd2:	02db      	lsls	r3, r3, #11
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0302 	bic.w	r3, r3, #2
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003002:	f7fe fe69 	bl	8001cd8 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003008:	e015      	b.n	8003036 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800300a:	f7fe fe65 	bl	8001cd8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d309      	bcc.n	800302e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e014      	b.n	8003058 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e4      	bne.n	800300a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	460b      	mov	r3, r1
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b42      	cmp	r3, #66	; 0x42
 8003080:	d101      	bne.n	8003086 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	e04e      	b.n	8003124 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2242      	movs	r2, #66	; 0x42
 800308a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 031c 	and.w	r3, r3, #28
 800309c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8a1b      	ldrh	r3, [r3, #16]
 80030a2:	02db      	lsls	r3, r3, #11
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80030ac:	897b      	ldrh	r3, [r7, #10]
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7fe fdfc 	bl	8001cd8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030e2:	e015      	b.n	8003110 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80030e4:	f7fe fdf8 	bl	8001cd8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f2:	d309      	bcc.n	8003108 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e00d      	b.n	8003124 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e4      	bne.n	80030e4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b0b0      	sub	sp, #192	; 0xc0
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003148:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003150:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800315a:	2300      	movs	r3, #0
 800315c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003176:	663b      	str	r3, [r7, #96]	; 0x60
 8003178:	e001      	b.n	800317e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800317e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003182:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003188:	2300      	movs	r3, #0
 800318a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003200:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003204:	4bab      	ldr	r3, [pc, #684]	; (80034b4 <ETH_MACDMAConfig+0x388>)
 8003206:	4013      	ands	r3, r2
 8003208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800320c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003210:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003214:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003218:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800321e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003222:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003226:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800322c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800322e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003230:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003234:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003238:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800323c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800323e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003240:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003242:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003254:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003260:	2001      	movs	r0, #1
 8003262:	f7fe fd45 	bl	8001cf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800326e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003270:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003274:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003278:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800327a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800327e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003284:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800328a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800328c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003290:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003294:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800329c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800329e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7fe fd20 	bl	8001cf0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80032cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80032d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032e0:	4013      	ands	r3, r2
 80032e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80032e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80032ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80032f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80032f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80032f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80032f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80032fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80032fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003302:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003308:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800330a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800331c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003328:	2001      	movs	r0, #1
 800332a:	f7fe fce1 	bl	8001cf0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003336:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003338:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800333c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003352:	2001      	movs	r0, #1
 8003354:	f7fe fccc 	bl	8001cf0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003360:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003374:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003386:	2304      	movs	r3, #4
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800338a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800339c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033aa:	2300      	movs	r3, #0
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80033b6:	4413      	add	r3, r2
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80033be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <ETH_MACDMAConfig+0x38c>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80033cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80033d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80033d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80033d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80033d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80033d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80033da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80033dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80033de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80033e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80033e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80033e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80033ea:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80033fe:	4413      	add	r3, r2
 8003400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003404:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f241 0318 	movw	r3, #4120	; 0x1018
 800340e:	4413      	add	r3, r2
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003416:	2001      	movs	r0, #1
 8003418:	f7fe fc6a 	bl	8001cf0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f241 0318 	movw	r3, #4120	; 0x1018
 8003424:	4413      	add	r3, r2
 8003426:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800342a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800342c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003430:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003434:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003438:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800343a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800343c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800343e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003440:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003442:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003446:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003454:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003464:	2001      	movs	r0, #1
 8003466:	f7fe fc43 	bl	8001cf0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003472:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003476:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10d      	bne.n	800349c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	f241 031c 	movw	r3, #4124	; 0x101c
 8003488:	4413      	add	r3, r2
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6811      	ldr	r1, [r2, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <ETH_MACDMAConfig+0x390>)
 8003492:	431a      	orrs	r2, r3
 8003494:	f241 031c 	movw	r3, #4124	; 0x101c
 8003498:	440b      	add	r3, r1
 800349a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	461a      	mov	r2, r3
 80034a2:	2100      	movs	r1, #0
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f80b 	bl	80034c0 <ETH_MACAddressConfig>
}
 80034aa:	bf00      	nop
 80034ac:	37c0      	adds	r7, #192	; 0xc0
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	ff20810f 	.word	0xff20810f
 80034b8:	f8de3f23 	.word	0xf8de3f23
 80034bc:	00010040 	.word	0x00010040

080034c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3305      	adds	r3, #5
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	3204      	adds	r2, #4
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <ETH_MACAddressConfig+0x68>)
 80034e2:	4413      	add	r3, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3303      	adds	r3, #3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	061a      	lsls	r2, r3, #24
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3302      	adds	r3, #2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3301      	adds	r3, #1
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	4313      	orrs	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <ETH_MACAddressConfig+0x6c>)
 8003512:	4413      	add	r3, r2
 8003514:	461a      	mov	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	6013      	str	r3, [r2, #0]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40028040 	.word	0x40028040
 800352c:	40028044 	.word	0x40028044

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	e175      	b.n	800383c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	f040 8164 	bne.w	8003836 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d005      	beq.n	8003586 <HAL_GPIO_Init+0x56>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d130      	bne.n	80035e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0201 	and.w	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d017      	beq.n	8003624 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d123      	bne.n	8003678 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80be 	beq.w	8003836 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_GPIO_Init+0x324>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_GPIO_Init+0x324>)
 80036c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_GPIO_Init+0x324>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036d2:	4a61      	ldr	r2, [pc, #388]	; (8003858 <HAL_GPIO_Init+0x328>)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_GPIO_Init+0x32c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d037      	beq.n	800376e <HAL_GPIO_Init+0x23e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_GPIO_Init+0x330>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d031      	beq.n	800376a <HAL_GPIO_Init+0x23a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a56      	ldr	r2, [pc, #344]	; (8003864 <HAL_GPIO_Init+0x334>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02b      	beq.n	8003766 <HAL_GPIO_Init+0x236>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a55      	ldr	r2, [pc, #340]	; (8003868 <HAL_GPIO_Init+0x338>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d025      	beq.n	8003762 <HAL_GPIO_Init+0x232>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a54      	ldr	r2, [pc, #336]	; (800386c <HAL_GPIO_Init+0x33c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01f      	beq.n	800375e <HAL_GPIO_Init+0x22e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a53      	ldr	r2, [pc, #332]	; (8003870 <HAL_GPIO_Init+0x340>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d019      	beq.n	800375a <HAL_GPIO_Init+0x22a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_GPIO_Init+0x344>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_GPIO_Init+0x226>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_GPIO_Init+0x348>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00d      	beq.n	8003752 <HAL_GPIO_Init+0x222>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_GPIO_Init+0x34c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <HAL_GPIO_Init+0x21e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	; (8003880 <HAL_GPIO_Init+0x350>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_GPIO_Init+0x21a>
 8003746:	2309      	movs	r3, #9
 8003748:	e012      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800374a:	230a      	movs	r3, #10
 800374c:	e010      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800374e:	2308      	movs	r3, #8
 8003750:	e00e      	b.n	8003770 <HAL_GPIO_Init+0x240>
 8003752:	2307      	movs	r3, #7
 8003754:	e00c      	b.n	8003770 <HAL_GPIO_Init+0x240>
 8003756:	2306      	movs	r3, #6
 8003758:	e00a      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800375a:	2305      	movs	r3, #5
 800375c:	e008      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800375e:	2304      	movs	r3, #4
 8003760:	e006      	b.n	8003770 <HAL_GPIO_Init+0x240>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_Init+0x240>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_Init+0x240>
 800376e:	2300      	movs	r3, #0
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003780:	4935      	ldr	r1, [pc, #212]	; (8003858 <HAL_GPIO_Init+0x328>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_GPIO_Init+0x354>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_GPIO_Init+0x354>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_GPIO_Init+0x354>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a29      	ldr	r2, [pc, #164]	; (8003884 <HAL_GPIO_Init+0x354>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037e2:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_GPIO_Init+0x354>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_GPIO_Init+0x354>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_GPIO_Init+0x354>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_GPIO_Init+0x354>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	f67f ae86 	bls.w	8003550 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3724      	adds	r7, #36	; 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40013800 	.word	0x40013800
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021000 	.word	0x40021000
 8003870:	40021400 	.word	0x40021400
 8003874:	40021800 	.word	0x40021800
 8003878:	40021c00 	.word	0x40021c00
 800387c:	40022000 	.word	0x40022000
 8003880:	40022400 	.word	0x40022400
 8003884:	40013c00 	.word	0x40013c00

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07f      	b.n	80039ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd faac 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800390c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e006      	b.n	8003944 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d104      	bne.n	8003956 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003954:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_I2C_Init+0x11c>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69d9      	ldr	r1, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	02008000 	.word	0x02008000

080039dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d138      	bne.n	8003a64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e032      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d139      	bne.n	8003afc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e033      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	; 0x24
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000

08003b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5a:	f7fe f8bd 	bl	8001cd8 <HAL_GetTick>
 8003b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b60:	e009      	b.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b62:	f7fe f8b9 	bl	8001cd8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b70:	d901      	bls.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e022      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d1ee      	bne.n	8003b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe f8a2 	bl	8001cd8 <HAL_GetTick>
 8003b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b98:	f7fe f89e 	bl	8001cd8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e29b      	b.n	800411a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e275      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe f814 	bl	8001cd8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f810 	bl	8001cd8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e229      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f800 	bl	8001cd8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fd fffc 	bl	8001cd8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e215      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1e9      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd ffb2 	bl	8001cd8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fd ffae 	bl	8001cd8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1c7      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd ff8e 	bl	8001cd8 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fd ff8a 	bl	8001cd8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1a3      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd ff6b 	bl	8001cd8 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd ff67 	bl	8001cd8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e180      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fd ff51 	bl	8001cd8 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fd ff4d 	bl	8001cd8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e166      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
 8003e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a88      	ldr	r2, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b86      	ldr	r3, [pc, #536]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b83      	ldr	r3, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd ff15 	bl	8001cd8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd ff11 	bl	8001cd8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e12a      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b70      	ldr	r3, [pc, #448]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a6f      	ldr	r2, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6b      	ldr	r3, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a61      	ldr	r2, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a58      	ldr	r2, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fec5 	bl	8001cd8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd fec1 	bl	8001cd8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0d8      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd feaf 	bl	8001cd8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd feab 	bl	8001cd8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0c2      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a3c      	ldr	r2, [pc, #240]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ae 	beq.w	8004118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d06d      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d14b      	bne.n	8004068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fe7c 	bl	8001cd8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd fe78 	bl	8001cd8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e091      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fe4a 	bl	8001cd8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd fe46 	bl	8001cd8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e05f      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x47c>
 8004066:	e057      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd fe30 	bl	8001cd8 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd fe2c 	bl	8001cd8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e045      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x4b0>
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x558>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d129      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d122      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d119      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10f      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d0      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	4965      	ldr	r1, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e073      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4936      	ldr	r1, [pc, #216]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd fd5c 	bl	8001cd8 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd fd58 	bl	8001cd8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	4922      	ldr	r1, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1d4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd fcb8 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	080085c8 	.word	0x080085c8
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004318:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d00d      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x40>
 8004324:	2b08      	cmp	r3, #8
 8004326:	f200 80bd 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x34>
 800432e:	2b04      	cmp	r3, #4
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x3a>
 8004332:	e0b7      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004336:	60bb      	str	r3, [r7, #8]
      break;
 8004338:	e0b7      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433a:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800433c:	60bb      	str	r3, [r7, #8]
      break;
 800433e:	e0b4      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800434a:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04d      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b58      	ldr	r3, [pc, #352]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	ea02 0800 	and.w	r8, r2, r0
 800436e:	ea03 0901 	and.w	r9, r3, r1
 8004372:	4640      	mov	r0, r8
 8004374:	4649      	mov	r1, r9
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	014b      	lsls	r3, r1, #5
 8004380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004384:	0142      	lsls	r2, r0, #5
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	ebb0 0008 	subs.w	r0, r0, r8
 800438e:	eb61 0109 	sbc.w	r1, r1, r9
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	018b      	lsls	r3, r1, #6
 800439c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043a0:	0182      	lsls	r2, r0, #6
 80043a2:	1a12      	subs	r2, r2, r0
 80043a4:	eb63 0301 	sbc.w	r3, r3, r1
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	00d9      	lsls	r1, r3, #3
 80043b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b6:	00d0      	lsls	r0, r2, #3
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	eb12 0208 	adds.w	r2, r2, r8
 80043c0:	eb43 0309 	adc.w	r3, r3, r9
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	0259      	lsls	r1, r3, #9
 80043ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043d2:	0250      	lsls	r0, r2, #9
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f7fb ff7c 	bl	80002e0 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e04a      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	ea02 0400 	and.w	r4, r2, r0
 800440a:	ea03 0501 	and.w	r5, r3, r1
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	014b      	lsls	r3, r1, #5
 800441c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004420:	0142      	lsls	r2, r0, #5
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	1b00      	subs	r0, r0, r4
 8004428:	eb61 0105 	sbc.w	r1, r1, r5
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	018b      	lsls	r3, r1, #6
 8004436:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800443a:	0182      	lsls	r2, r0, #6
 800443c:	1a12      	subs	r2, r2, r0
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	00d9      	lsls	r1, r3, #3
 800444c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004450:	00d0      	lsls	r0, r2, #3
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	1912      	adds	r2, r2, r4
 8004458:	eb45 0303 	adc.w	r3, r5, r3
 800445c:	f04f 0000 	mov.w	r0, #0
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	0299      	lsls	r1, r3, #10
 8004466:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800446a:	0290      	lsls	r0, r2, #10
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f7fb ff30 	bl	80002e0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044a6:	60bb      	str	r3, [r7, #8]
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	68bb      	ldr	r3, [r7, #8]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	007a1200 	.word	0x007a1200

080044c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000000 	.word	0x20000000

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff0 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	080085d8 	.word	0x080085d8

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffdc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	080085d8 	.word	0x080085d8

0800452c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d012      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004554:	4b69      	ldr	r3, [pc, #420]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a68      	ldr	r2, [pc, #416]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800455e:	6093      	str	r3, [r2, #8]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	4964      	ldr	r1, [pc, #400]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004586:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	4959      	ldr	r1, [pc, #356]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d017      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	494a      	ldr	r1, [pc, #296]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e0:	d101      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045fe:	2301      	movs	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 808b 	beq.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	4a39      	ldr	r2, [pc, #228]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	; 0x40
 800461c:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a34      	ldr	r2, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd fb50 	bl	8001cd8 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463c:	f7fd fb4c 	bl	8001cd8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e38f      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800465a:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d035      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d02e      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004680:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d114      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd fb14 	bl	8001cd8 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd fb10 	bl	8001cd8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e351      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ee      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e2:	d111      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046f2:	400b      	ands	r3, r1
 80046f4:	4901      	ldr	r1, [pc, #4]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
 80046fa:	e00b      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046fc:	40023800 	.word	0x40023800
 8004700:	40007000 	.word	0x40007000
 8004704:	0ffffcff 	.word	0x0ffffcff
 8004708:	4bb3      	ldr	r3, [pc, #716]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4ab2      	ldr	r2, [pc, #712]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	4bb0      	ldr	r3, [pc, #704]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	49ad      	ldr	r1, [pc, #692]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004732:	4ba9      	ldr	r3, [pc, #676]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004738:	4aa7      	ldr	r2, [pc, #668]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004742:	4ba5      	ldr	r3, [pc, #660]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004744:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	49a2      	ldr	r1, [pc, #648]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004760:	4b9d      	ldr	r3, [pc, #628]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476e:	499a      	ldr	r1, [pc, #616]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004782:	4b95      	ldr	r3, [pc, #596]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004790:	4991      	ldr	r1, [pc, #580]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047a4:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b2:	4989      	ldr	r1, [pc, #548]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047c6:	4b84      	ldr	r3, [pc, #528]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d4:	4980      	ldr	r1, [pc, #512]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e8:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4978      	ldr	r1, [pc, #480]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800480a:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f023 020c 	bic.w	r2, r3, #12
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004818:	496f      	ldr	r1, [pc, #444]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482c:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	4967      	ldr	r1, [pc, #412]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800484e:	4b62      	ldr	r3, [pc, #392]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	495e      	ldr	r1, [pc, #376]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004870:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	4956      	ldr	r1, [pc, #344]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004892:	4b51      	ldr	r3, [pc, #324]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	494d      	ldr	r1, [pc, #308]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048b4:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	4945      	ldr	r1, [pc, #276]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	493c      	ldr	r1, [pc, #240]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048f8:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	4934      	ldr	r1, [pc, #208]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	492b      	ldr	r1, [pc, #172]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004938:	d101      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800494a:	2301      	movs	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	491b      	ldr	r1, [pc, #108]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498c:	4912      	ldr	r1, [pc, #72]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	4909      	ldr	r1, [pc, #36]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	4986      	ldr	r1, [pc, #536]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049f0:	4b81      	ldr	r3, [pc, #516]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	497d      	ldr	r1, [pc, #500]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d006      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80d6 	beq.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a1c:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a28:	f7fd f956 	bl	8001cd8 <HAL_GetTick>
 8004a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a30:	f7fd f952 	bl	8001cd8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e195      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a42:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d021      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a62:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a70:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	0e1b      	lsrs	r3, r3, #24
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	4958      	ldr	r1, [pc, #352]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac8:	d129      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aca:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ad8:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ade:	0f1b      	lsrs	r3, r3, #28
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	019a      	lsls	r2, r3, #6
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	493e      	ldr	r1, [pc, #248]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b06:	4b3c      	ldr	r3, [pc, #240]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0c:	f023 021f 	bic.w	r2, r3, #31
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	3b01      	subs	r3, #1
 8004b16:	4938      	ldr	r1, [pc, #224]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b2a:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3e:	0f1b      	lsrs	r3, r3, #28
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4926      	ldr	r1, [pc, #152]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	019a      	lsls	r2, r3, #6
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	071b      	lsls	r3, r3, #28
 8004b8e:	491a      	ldr	r1, [pc, #104]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fd f899 	bl	8001cd8 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004baa:	f7fd f895 	bl	8001cd8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b64      	cmp	r3, #100	; 0x64
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e0d8      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	f040 80ce 	bne.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fd f87c 	bl	8001cd8 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004be2:	e00b      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be4:	f7fd f878 	bl	8001cd8 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d904      	bls.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0bb      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bfc:	4b5e      	ldr	r3, [pc, #376]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c08:	d0ec      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02e      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d12a      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c32:	4b51      	ldr	r3, [pc, #324]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c40:	4b4d      	ldr	r3, [pc, #308]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	0f1b      	lsrs	r3, r3, #28
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	019a      	lsls	r2, r3, #6
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	061b      	lsls	r3, r3, #24
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	4944      	ldr	r1, [pc, #272]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c6e:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	493d      	ldr	r1, [pc, #244]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d022      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d11d      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c9e:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	0e1b      	lsrs	r3, r3, #24
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cac:	4b32      	ldr	r3, [pc, #200]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	0f1b      	lsrs	r3, r3, #28
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	071b      	lsls	r3, r3, #28
 8004cd2:	4929      	ldr	r1, [pc, #164]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d028      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	0e1b      	lsrs	r3, r3, #24
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cf4:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	061b      	lsls	r3, r3, #24
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	071b      	lsls	r3, r3, #28
 8004d1a:	4917      	ldr	r1, [pc, #92]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4911      	ldr	r1, [pc, #68]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fc ffc8 	bl	8001cd8 <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d4c:	f7fc ffc4 	bl	8001cd8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e007      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6a:	d1ef      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e09d      	b.n	8004eca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9e:	d009      	beq.n	8004db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
 8004da6:	e005      	b.n	8004db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc f9f8 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df4:	d902      	bls.n	8004dfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e002      	b.n	8004e02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e0a:	d007      	beq.n	8004e1c <HAL_SPI_Init+0xa0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 0204 	and.w	r2, r3, #4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b08a      	sub	sp, #40	; 0x28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x26>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e1fb      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x41e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f00:	f7fc feea 	bl	8001cd8 <HAL_GetTick>
 8004f04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f1c:	7efb      	ldrb	r3, [r7, #27]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d00e      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x6e>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d102      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x66>
 8004f32:	7efb      	ldrb	r3, [r7, #27]
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d003      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f3e:	e1cd      	b.n	80052dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x80>
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f58:	e1c0      	b.n	80052dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d003      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2205      	movs	r2, #5
 8004f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	887a      	ldrh	r2, [r7, #2]
 8004f7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb0:	d802      	bhi.n	8004fb8 <HAL_SPI_TransmitReceive+0xe6>
 8004fb2:	8a3b      	ldrh	r3, [r7, #16]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d908      	bls.n	8004fca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	e007      	b.n	8004fda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d007      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005000:	d97c      	bls.n	80050fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x13e>
 800500a:	8a7b      	ldrh	r3, [r7, #18]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d169      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	881a      	ldrh	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005034:	e056      	b.n	80050e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d11b      	bne.n	800507c <HAL_SPI_TransmitReceive+0x1aa>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <HAL_SPI_TransmitReceive+0x1aa>
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	2b01      	cmp	r3, #1
 8005052:	d113      	bne.n	800507c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	881a      	ldrh	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b01      	cmp	r3, #1
 8005088:	d11c      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0x1f2>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	b292      	uxth	r2, r2
 80050a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	1c9a      	adds	r2, r3, #2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c0:	2301      	movs	r3, #1
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050c4:	f7fc fe08 	bl	8001cd8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d807      	bhi.n	80050e4 <HAL_SPI_TransmitReceive+0x212>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d003      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050e2:	e0fb      	b.n	80052dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1a3      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x164>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d19d      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x164>
 80050fa:	e0df      	b.n	80052bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_SPI_TransmitReceive+0x23a>
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 80cb 	bne.w	80052a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d912      	bls.n	800513c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	881a      	ldrh	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b02      	subs	r3, #2
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800513a:	e0b2      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	7812      	ldrb	r2, [r2, #0]
 8005148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005162:	e09e      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d134      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x30a>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02f      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x30a>
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	2b01      	cmp	r3, #1
 8005180:	d12c      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	d912      	bls.n	80051b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	881a      	ldrh	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	1c9a      	adds	r2, r3, #2
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b02      	subs	r3, #2
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b0:	e012      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d148      	bne.n	800527c <HAL_SPI_TransmitReceive+0x3aa>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d042      	beq.n	800527c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d923      	bls.n	800524a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	b292      	uxth	r2, r2
 800520e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b02      	subs	r3, #2
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d81f      	bhi.n	8005278 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	e016      	b.n	8005278 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f103 020c 	add.w	r2, r3, #12
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800527c:	f7fc fd2c 	bl	8001cd8 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	429a      	cmp	r2, r3
 800528a:	d803      	bhi.n	8005294 <HAL_SPI_TransmitReceive+0x3c2>
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d102      	bne.n	800529a <HAL_SPI_TransmitReceive+0x3c8>
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052a0:	e01c      	b.n	80052dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f af5b 	bne.w	8005164 <HAL_SPI_TransmitReceive+0x292>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f47f af54 	bne.w	8005164 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f937 	bl	8005534 <SPI_EndRxTxTransaction>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
 80052d8:	e000      	b.n	80052dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80052da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3728      	adds	r7, #40	; 0x28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005308:	f7fc fce6 	bl	8001cd8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005318:	f7fc fcde 	bl	8001cd8 <HAL_GetTick>
 800531c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800531e:	4b39      	ldr	r3, [pc, #228]	; (8005404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	015b      	lsls	r3, r3, #5
 8005324:	0d1b      	lsrs	r3, r3, #20
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532e:	e054      	b.n	80053da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d050      	beq.n	80053da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005338:	f7fc fcce 	bl	8001cd8 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	429a      	cmp	r2, r3
 8005346:	d902      	bls.n	800534e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13d      	bne.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800535c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005366:	d111      	bne.n	800538c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005370:	d004      	beq.n	800537c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d107      	bne.n	800538c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d10f      	bne.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e017      	b.n	80053fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d19b      	bne.n	8005330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000000 	.word	0x20000000

08005408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800541a:	f7fc fc5d 	bl	8001cd8 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	4413      	add	r3, r2
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800542a:	f7fc fc55 	bl	8001cd8 <HAL_GetTick>
 800542e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005438:	4b3d      	ldr	r3, [pc, #244]	; (8005530 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	00da      	lsls	r2, r3, #3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	0d1b      	lsrs	r3, r3, #20
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005450:	e060      	b.n	8005514 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005458:	d107      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0x62>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005468:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d050      	beq.n	8005514 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005472:	f7fc fc31 	bl	8001cd8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	429a      	cmp	r2, r3
 8005480:	d902      	bls.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d13d      	bne.n	8005504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a0:	d111      	bne.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054aa:	d004      	beq.n	80054b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d107      	bne.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ce:	d10f      	bne.n	80054f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e010      	b.n	8005526 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	3b01      	subs	r3, #1
 8005512:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d196      	bne.n	8005452 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000000 	.word	0x20000000

08005534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff5b 	bl	8005408 <SPI_WaitFifoStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e046      	b.n	80055f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <SPI_EndRxTxTransaction+0xcc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a25      	ldr	r2, [pc, #148]	; (8005604 <SPI_EndRxTxTransaction+0xd0>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0d5b      	lsrs	r3, r3, #21
 8005574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005586:	d112      	bne.n	80055ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff feb0 	bl	80052f8 <SPI_WaitFlagStateUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e023      	b.n	80055f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d0f2      	beq.n	80055ae <SPI_EndRxTxTransaction+0x7a>
 80055c8:	e000      	b.n	80055cc <SPI_EndRxTxTransaction+0x98>
        break;
 80055ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ff15 	bl	8005408 <SPI_WaitFifoStateUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e000      	b.n	80055f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000000 	.word	0x20000000
 8005604:	165e9f81 	.word	0x165e9f81

08005608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e049      	b.n	80056ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc f878 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fa74 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e049      	b.n	800575c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f841 	bl	8005764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f000 fa1d 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005792:	2302      	movs	r3, #2
 8005794:	e0ff      	b.n	8005996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b14      	cmp	r3, #20
 80057a2:	f200 80f0 	bhi.w	8005986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	08005801 	.word	0x08005801
 80057b0:	08005987 	.word	0x08005987
 80057b4:	08005987 	.word	0x08005987
 80057b8:	08005987 	.word	0x08005987
 80057bc:	08005841 	.word	0x08005841
 80057c0:	08005987 	.word	0x08005987
 80057c4:	08005987 	.word	0x08005987
 80057c8:	08005987 	.word	0x08005987
 80057cc:	08005883 	.word	0x08005883
 80057d0:	08005987 	.word	0x08005987
 80057d4:	08005987 	.word	0x08005987
 80057d8:	08005987 	.word	0x08005987
 80057dc:	080058c3 	.word	0x080058c3
 80057e0:	08005987 	.word	0x08005987
 80057e4:	08005987 	.word	0x08005987
 80057e8:	08005987 	.word	0x08005987
 80057ec:	08005905 	.word	0x08005905
 80057f0:	08005987 	.word	0x08005987
 80057f4:	08005987 	.word	0x08005987
 80057f8:	08005987 	.word	0x08005987
 80057fc:	08005945 	.word	0x08005945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fa34 	bl	8005c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e0a5      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa86 	bl	8005d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e084      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fadd 	bl	8005e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e064      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fb33 	bl	8005f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e043      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fb6a 	bl	8005fe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005942:	e023      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fb9c 	bl	8006088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005984:	e002      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop

080059a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e0b4      	b.n	8005b26 <HAL_TIM_ConfigClockSource+0x186>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_TIM_ConfigClockSource+0x190>)
 80059d8:	4013      	ands	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f4:	d03e      	beq.n	8005a74 <HAL_TIM_ConfigClockSource+0xd4>
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	f200 8087 	bhi.w	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	f000 8086 	beq.w	8005b12 <HAL_TIM_ConfigClockSource+0x172>
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d87f      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b70      	cmp	r3, #112	; 0x70
 8005a0e:	d01a      	beq.n	8005a46 <HAL_TIM_ConfigClockSource+0xa6>
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d87b      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d050      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x11a>
 8005a18:	2b60      	cmp	r3, #96	; 0x60
 8005a1a:	d877      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d03c      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0xfa>
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d873      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d058      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x13a>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d86f      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b30      	cmp	r3, #48	; 0x30
 8005a2e:	d064      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d86b      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d060      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d867      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d05c      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d05a      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a44:	e062      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f000 fbe5 	bl	8006224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	609a      	str	r2, [r3, #8]
      break;
 8005a72:	e04f      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f000 fbce 	bl	8006224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a96:	609a      	str	r2, [r3, #8]
      break;
 8005a98:	e03c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f000 fb42 	bl	8006130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2150      	movs	r1, #80	; 0x50
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fb9b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005ab8:	e02c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6859      	ldr	r1, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f000 fb61 	bl	800618e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2160      	movs	r1, #96	; 0x60
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb8b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005ad8:	e01c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 fb22 	bl	8006130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb7b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005af8:	e00c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fb72 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005b0a:	e003      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e000      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	fffeff88 	.word	0xfffeff88

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d00f      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3c      	ldr	r2, [pc, #240]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3a      	ldr	r2, [pc, #232]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d027      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d023      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <TIM_Base_SetConfig+0x128>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <TIM_Base_SetConfig+0x12c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <TIM_Base_SetConfig+0x130>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <TIM_Base_SetConfig+0x134>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <TIM_Base_SetConfig+0x138>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_Base_SetConfig+0x13c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d103      	bne.n	8005c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	615a      	str	r2, [r3, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800
 8005c68:	40001800 	.word	0x40001800
 8005c6c:	40001c00 	.word	0x40001c00
 8005c70:	40002000 	.word	0x40002000

08005c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4b2b      	ldr	r3, [pc, #172]	; (8005d4c <TIM_OC1_SetConfig+0xd8>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 0302 	bic.w	r3, r3, #2
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <TIM_OC1_SetConfig+0xdc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC1_SetConfig+0x64>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a20      	ldr	r2, [pc, #128]	; (8005d54 <TIM_OC1_SetConfig+0xe0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10c      	bne.n	8005cf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0308 	bic.w	r3, r3, #8
 8005cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <TIM_OC1_SetConfig+0xdc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC1_SetConfig+0x8e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <TIM_OC1_SetConfig+0xe0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d111      	bne.n	8005d26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	fffeff8f 	.word	0xfffeff8f
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0210 	bic.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <TIM_OC2_SetConfig+0xe4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC2_SetConfig+0x68>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <TIM_OC2_SetConfig+0xec>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10d      	bne.n	8005ddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC2_SetConfig+0x94>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <TIM_OC2_SetConfig+0xec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	feff8fff 	.word	0xfeff8fff
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40010400 	.word	0x40010400

08005e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4b2d      	ldr	r3, [pc, #180]	; (8005f28 <TIM_OC3_SetConfig+0xe0>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x66>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <TIM_OC3_SetConfig+0xe8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10d      	bne.n	8005eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC3_SetConfig+0x92>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <TIM_OC3_SetConfig+0xe8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d113      	bne.n	8005f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	621a      	str	r2, [r3, #32]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	fffeff8f 	.word	0xfffeff8f
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400

08005f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <TIM_OC4_SetConfig+0xa4>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <TIM_OC4_SetConfig+0xa8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC4_SetConfig+0x68>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <TIM_OC4_SetConfig+0xac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d109      	bne.n	8005fb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	feff8fff 	.word	0xfeff8fff
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40010400 	.word	0x40010400

08005fe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <TIM_OC5_SetConfig+0x98>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a12      	ldr	r2, [pc, #72]	; (8006080 <TIM_OC5_SetConfig+0x9c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <TIM_OC5_SetConfig+0x5e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a11      	ldr	r2, [pc, #68]	; (8006084 <TIM_OC5_SetConfig+0xa0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d109      	bne.n	8006056 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	621a      	str	r2, [r3, #32]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	fffeff8f 	.word	0xfffeff8f
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <TIM_OC6_SetConfig+0x9c>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	051b      	lsls	r3, r3, #20
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <TIM_OC6_SetConfig+0xa0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC6_SetConfig+0x60>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <TIM_OC6_SetConfig+0xa4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d109      	bne.n	80060fc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	029b      	lsls	r3, r3, #10
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	feff8fff 	.word	0xfeff8fff
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 030a 	bic.w	r3, r3, #10
 800616c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0210 	bic.w	r2, r3, #16
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	431a      	orrs	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e06d      	b.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a30      	ldr	r2, [pc, #192]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a20      	ldr	r2, [pc, #128]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d022      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ee:	d01d      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1d      	ldr	r2, [pc, #116]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a16      	ldr	r2, [pc, #88]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10c      	bne.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40014000 	.word	0x40014000
 800637c:	40001800 	.word	0x40001800

08006380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e040      	b.n	8006414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fb fb20 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fbca 	bl	8006b58 <UART_SetConfig>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e022      	b.n	8006414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fe20 	bl	800701c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fea7 	bl	8007160 <UART_CheckIdleState>
 8006412:	4603      	mov	r3, r0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006430:	2b20      	cmp	r3, #32
 8006432:	f040 8081 	bne.w	8006538 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_UART_Transmit+0x26>
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e079      	b.n	800653a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UART_Transmit+0x38>
 8006450:	2302      	movs	r3, #2
 8006452:	e072      	b.n	800653a <HAL_UART_Transmit+0x11e>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646a:	f7fb fc35 	bl	8001cd8 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d108      	bne.n	800649c <HAL_UART_Transmit+0x80>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	e003      	b.n	80064a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064ac:	e02c      	b.n	8006508 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fe9a 	bl	80071f2 <UART_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e038      	b.n	800653a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3302      	adds	r3, #2
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e007      	b.n	80064f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1cc      	bne.n	80064ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fe67 	bl	80071f2 <UART_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e005      	b.n	800653a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e000      	b.n	800653a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b0ba      	sub	sp, #232	; 0xe8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800656a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800656e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006572:	4013      	ands	r3, r2
 8006574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d115      	bne.n	80065ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00f      	beq.n	80065ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 82a4 	beq.w	8006aea <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	4798      	blx	r3
      }
      return;
 80065aa:	e29e      	b.n	8006aea <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8117 	beq.w	80067e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065c6:	4b85      	ldr	r3, [pc, #532]	; (80067dc <HAL_UART_IRQHandler+0x298>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 810a 	beq.w	80067e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d011      	beq.n	8006600 <HAL_UART_IRQHandler+0xbc>
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d011      	beq.n	8006630 <HAL_UART_IRQHandler+0xec>
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2202      	movs	r2, #2
 800661e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006626:	f043 0204 	orr.w	r2, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_UART_IRQHandler+0x11c>
 800663c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2204      	movs	r2, #4
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d017      	beq.n	800669c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006692:	f043 0208 	orr.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <HAL_UART_IRQHandler+0x18a>
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00c      	beq.n	80066ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 820a 	beq.w	8006aee <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d005      	beq.n	8006726 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800671a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04f      	beq.n	80067c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fe27 	bl	800737a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d141      	bne.n	80067be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800676a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800677e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1d9      	bne.n	800673a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	2b00      	cmp	r3, #0
 800678c:	d013      	beq.n	80067b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	4a13      	ldr	r2, [pc, #76]	; (80067e0 <HAL_UART_IRQHandler+0x29c>)
 8006794:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4618      	mov	r0, r3
 800679c:	f7fc f800 	bl	80027a0 <HAL_DMA_Abort_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e00f      	b.n	80067d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9ae 	bl	8006b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	e00b      	b.n	80067d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9aa 	bl	8006b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	e007      	b.n	80067d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9a6 	bl	8006b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067d4:	e18b      	b.n	8006aee <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d6:	bf00      	nop
    return;
 80067d8:	e189      	b.n	8006aee <HAL_UART_IRQHandler+0x5aa>
 80067da:	bf00      	nop
 80067dc:	04000120 	.word	0x04000120
 80067e0:	08007441 	.word	0x08007441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 8144 	bne.w	8006a76 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 813d 	beq.w	8006a76 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8136 	beq.w	8006a76 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2210      	movs	r2, #16
 8006810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	f040 80b2 	bne.w	8006986 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800682e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 815d 	beq.w	8006af2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800683e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006842:	429a      	cmp	r2, r3
 8006844:	f080 8155 	bcs.w	8006af2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800684e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685c:	f000 8085 	beq.w	800696a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800688a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800688e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1da      	bne.n	8006860 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e1      	bne.n	80068aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800690a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800690c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e3      	bne.n	80068e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800694c:	65bb      	str	r3, [r7, #88]	; 0x58
 800694e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e4      	bne.n	800692a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4618      	mov	r0, r3
 8006966:	f7fb feab 	bl	80026c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006976:	b29b      	uxth	r3, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	b29b      	uxth	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8d4 	bl	8006b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006984:	e0b5      	b.n	8006af2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006992:	b29b      	uxth	r3, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a7 	beq.w	8006af6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80069a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80a2 	beq.w	8006af6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069d4:	647b      	str	r3, [r7, #68]	; 0x44
 80069d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e4      	bne.n	80069b2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	623b      	str	r3, [r7, #32]
   return(result);
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a0c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e3      	bne.n	80069e8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	69b9      	ldr	r1, [r7, #24]
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	617b      	str	r3, [r7, #20]
   return(result);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f85c 	bl	8006b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a74:	e03f      	b.n	8006af6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x55c>
 8006a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f853 	bl	8006b44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a9e:	e02d      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00e      	beq.n	8006aca <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01c      	beq.n	8006afa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
    }
    return;
 8006ac8:	e017      	b.n	8006afa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d012      	beq.n	8006afc <HAL_UART_IRQHandler+0x5b8>
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00c      	beq.n	8006afc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fcc2 	bl	800746c <UART_EndTransmit_IT>
    return;
 8006ae8:	e008      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
      return;
 8006aea:	bf00      	nop
 8006aec:	e006      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
    return;
 8006aee:	bf00      	nop
 8006af0:	e004      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
      return;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
      return;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_UART_IRQHandler+0x5b8>
    return;
 8006afa:	bf00      	nop
  }

}
 8006afc:	37e8      	adds	r7, #232	; 0xe8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop

08006b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4ba7      	ldr	r3, [pc, #668]	; (8006e20 <UART_SetConfig+0x2c8>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a95      	ldr	r2, [pc, #596]	; (8006e24 <UART_SetConfig+0x2cc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d120      	bne.n	8006c16 <UART_SetConfig+0xbe>
 8006bd4:	4b94      	ldr	r3, [pc, #592]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d816      	bhi.n	8006c10 <UART_SetConfig+0xb8>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x90>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c05 	.word	0x08006c05
 8006bf0:	08006bff 	.word	0x08006bff
 8006bf4:	08006c0b 	.word	0x08006c0b
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e14f      	b.n	8006e9e <UART_SetConfig+0x346>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e14c      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c04:	2304      	movs	r3, #4
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e149      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e146      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c10:	2310      	movs	r3, #16
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	e143      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a84      	ldr	r2, [pc, #528]	; (8006e2c <UART_SetConfig+0x2d4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d132      	bne.n	8006c86 <UART_SetConfig+0x12e>
 8006c20:	4b81      	ldr	r3, [pc, #516]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d828      	bhi.n	8006c80 <UART_SetConfig+0x128>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0xdc>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c6f 	.word	0x08006c6f
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c7b 	.word	0x08006c7b
 8006c68:	2300      	movs	r3, #0
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e117      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e114      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c74:	2304      	movs	r3, #4
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e111      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e10e      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c80:	2310      	movs	r3, #16
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e10b      	b.n	8006e9e <UART_SetConfig+0x346>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a69      	ldr	r2, [pc, #420]	; (8006e30 <UART_SetConfig+0x2d8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d120      	bne.n	8006cd2 <UART_SetConfig+0x17a>
 8006c90:	4b65      	ldr	r3, [pc, #404]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c9a:	2b30      	cmp	r3, #48	; 0x30
 8006c9c:	d013      	beq.n	8006cc6 <UART_SetConfig+0x16e>
 8006c9e:	2b30      	cmp	r3, #48	; 0x30
 8006ca0:	d814      	bhi.n	8006ccc <UART_SetConfig+0x174>
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d009      	beq.n	8006cba <UART_SetConfig+0x162>
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d810      	bhi.n	8006ccc <UART_SetConfig+0x174>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <UART_SetConfig+0x15c>
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d006      	beq.n	8006cc0 <UART_SetConfig+0x168>
 8006cb2:	e00b      	b.n	8006ccc <UART_SetConfig+0x174>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e0f1      	b.n	8006e9e <UART_SetConfig+0x346>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e0ee      	b.n	8006e9e <UART_SetConfig+0x346>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e0eb      	b.n	8006e9e <UART_SetConfig+0x346>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e0e8      	b.n	8006e9e <UART_SetConfig+0x346>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e0e5      	b.n	8006e9e <UART_SetConfig+0x346>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a57      	ldr	r2, [pc, #348]	; (8006e34 <UART_SetConfig+0x2dc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d120      	bne.n	8006d1e <UART_SetConfig+0x1c6>
 8006cdc:	4b52      	ldr	r3, [pc, #328]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ce8:	d013      	beq.n	8006d12 <UART_SetConfig+0x1ba>
 8006cea:	2bc0      	cmp	r3, #192	; 0xc0
 8006cec:	d814      	bhi.n	8006d18 <UART_SetConfig+0x1c0>
 8006cee:	2b80      	cmp	r3, #128	; 0x80
 8006cf0:	d009      	beq.n	8006d06 <UART_SetConfig+0x1ae>
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d810      	bhi.n	8006d18 <UART_SetConfig+0x1c0>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <UART_SetConfig+0x1a8>
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d006      	beq.n	8006d0c <UART_SetConfig+0x1b4>
 8006cfe:	e00b      	b.n	8006d18 <UART_SetConfig+0x1c0>
 8006d00:	2300      	movs	r3, #0
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e0cb      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d06:	2302      	movs	r3, #2
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e0c8      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e0c5      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d12:	2308      	movs	r3, #8
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e0c2      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e0bf      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a45      	ldr	r2, [pc, #276]	; (8006e38 <UART_SetConfig+0x2e0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d125      	bne.n	8006d74 <UART_SetConfig+0x21c>
 8006d28:	4b3f      	ldr	r3, [pc, #252]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d36:	d017      	beq.n	8006d68 <UART_SetConfig+0x210>
 8006d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d3c:	d817      	bhi.n	8006d6e <UART_SetConfig+0x216>
 8006d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d42:	d00b      	beq.n	8006d5c <UART_SetConfig+0x204>
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d48:	d811      	bhi.n	8006d6e <UART_SetConfig+0x216>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <UART_SetConfig+0x1fe>
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d006      	beq.n	8006d62 <UART_SetConfig+0x20a>
 8006d54:	e00b      	b.n	8006d6e <UART_SetConfig+0x216>
 8006d56:	2300      	movs	r3, #0
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e0a0      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e09d      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d62:	2304      	movs	r3, #4
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e09a      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e097      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d6e:	2310      	movs	r3, #16
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e094      	b.n	8006e9e <UART_SetConfig+0x346>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <UART_SetConfig+0x2e4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d125      	bne.n	8006dca <UART_SetConfig+0x272>
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d8c:	d017      	beq.n	8006dbe <UART_SetConfig+0x266>
 8006d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d92:	d817      	bhi.n	8006dc4 <UART_SetConfig+0x26c>
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d98:	d00b      	beq.n	8006db2 <UART_SetConfig+0x25a>
 8006d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9e:	d811      	bhi.n	8006dc4 <UART_SetConfig+0x26c>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <UART_SetConfig+0x254>
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da8:	d006      	beq.n	8006db8 <UART_SetConfig+0x260>
 8006daa:	e00b      	b.n	8006dc4 <UART_SetConfig+0x26c>
 8006dac:	2301      	movs	r3, #1
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e075      	b.n	8006e9e <UART_SetConfig+0x346>
 8006db2:	2302      	movs	r3, #2
 8006db4:	77fb      	strb	r3, [r7, #31]
 8006db6:	e072      	b.n	8006e9e <UART_SetConfig+0x346>
 8006db8:	2304      	movs	r3, #4
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e06f      	b.n	8006e9e <UART_SetConfig+0x346>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e06c      	b.n	8006e9e <UART_SetConfig+0x346>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e069      	b.n	8006e9e <UART_SetConfig+0x346>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <UART_SetConfig+0x2e8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d137      	bne.n	8006e44 <UART_SetConfig+0x2ec>
 8006dd4:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <UART_SetConfig+0x2d0>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006de2:	d017      	beq.n	8006e14 <UART_SetConfig+0x2bc>
 8006de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006de8:	d817      	bhi.n	8006e1a <UART_SetConfig+0x2c2>
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dee:	d00b      	beq.n	8006e08 <UART_SetConfig+0x2b0>
 8006df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df4:	d811      	bhi.n	8006e1a <UART_SetConfig+0x2c2>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <UART_SetConfig+0x2aa>
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d006      	beq.n	8006e0e <UART_SetConfig+0x2b6>
 8006e00:	e00b      	b.n	8006e1a <UART_SetConfig+0x2c2>
 8006e02:	2300      	movs	r3, #0
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e04a      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e047      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e044      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e14:	2308      	movs	r3, #8
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e041      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e03e      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e20:	efff69f3 	.word	0xefff69f3
 8006e24:	40011000 	.word	0x40011000
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40004400 	.word	0x40004400
 8006e30:	40004800 	.word	0x40004800
 8006e34:	40004c00 	.word	0x40004c00
 8006e38:	40005000 	.word	0x40005000
 8006e3c:	40011400 	.word	0x40011400
 8006e40:	40007800 	.word	0x40007800
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a71      	ldr	r2, [pc, #452]	; (8007010 <UART_SetConfig+0x4b8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d125      	bne.n	8006e9a <UART_SetConfig+0x342>
 8006e4e:	4b71      	ldr	r3, [pc, #452]	; (8007014 <UART_SetConfig+0x4bc>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e5c:	d017      	beq.n	8006e8e <UART_SetConfig+0x336>
 8006e5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e62:	d817      	bhi.n	8006e94 <UART_SetConfig+0x33c>
 8006e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e68:	d00b      	beq.n	8006e82 <UART_SetConfig+0x32a>
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d811      	bhi.n	8006e94 <UART_SetConfig+0x33c>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <UART_SetConfig+0x324>
 8006e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e78:	d006      	beq.n	8006e88 <UART_SetConfig+0x330>
 8006e7a:	e00b      	b.n	8006e94 <UART_SetConfig+0x33c>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e00d      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e82:	2302      	movs	r3, #2
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e00a      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e007      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e004      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e94:	2310      	movs	r3, #16
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e001      	b.n	8006e9e <UART_SetConfig+0x346>
 8006e9a:	2310      	movs	r3, #16
 8006e9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea6:	d15a      	bne.n	8006f5e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006ea8:	7ffb      	ldrb	r3, [r7, #31]
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d827      	bhi.n	8006efe <UART_SetConfig+0x3a6>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <UART_SetConfig+0x35c>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006eff 	.word	0x08006eff
 8006ec4:	08006eef 	.word	0x08006eef
 8006ec8:	08006eff 	.word	0x08006eff
 8006ecc:	08006eff 	.word	0x08006eff
 8006ed0:	08006eff 	.word	0x08006eff
 8006ed4:	08006ef7 	.word	0x08006ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed8:	f7fd fb00 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8006edc:	61b8      	str	r0, [r7, #24]
        break;
 8006ede:	e013      	b.n	8006f08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee0:	f7fd fb10 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8006ee4:	61b8      	str	r0, [r7, #24]
        break;
 8006ee6:	e00f      	b.n	8006f08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee8:	4b4b      	ldr	r3, [pc, #300]	; (8007018 <UART_SetConfig+0x4c0>)
 8006eea:	61bb      	str	r3, [r7, #24]
        break;
 8006eec:	e00c      	b.n	8006f08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eee:	f7fd fa07 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006ef2:	61b8      	str	r0, [r7, #24]
        break;
 8006ef4:	e008      	b.n	8006f08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efa:	61bb      	str	r3, [r7, #24]
        break;
 8006efc:	e004      	b.n	8006f08 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	77bb      	strb	r3, [r7, #30]
        break;
 8006f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d074      	beq.n	8006ff8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	005a      	lsls	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	441a      	add	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b0f      	cmp	r3, #15
 8006f28:	d916      	bls.n	8006f58 <UART_SetConfig+0x400>
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f30:	d212      	bcs.n	8006f58 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f023 030f 	bic.w	r3, r3, #15
 8006f3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	89fb      	ldrh	r3, [r7, #14]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	89fa      	ldrh	r2, [r7, #14]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	e04f      	b.n	8006ff8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	77bb      	strb	r3, [r7, #30]
 8006f5c:	e04c      	b.n	8006ff8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d828      	bhi.n	8006fb6 <UART_SetConfig+0x45e>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x414>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	08006fb7 	.word	0x08006fb7
 8006f7c:	08006fa7 	.word	0x08006fa7
 8006f80:	08006fb7 	.word	0x08006fb7
 8006f84:	08006fb7 	.word	0x08006fb7
 8006f88:	08006fb7 	.word	0x08006fb7
 8006f8c:	08006faf 	.word	0x08006faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f90:	f7fd faa4 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8006f94:	61b8      	str	r0, [r7, #24]
        break;
 8006f96:	e013      	b.n	8006fc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fd fab4 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8006f9c:	61b8      	str	r0, [r7, #24]
        break;
 8006f9e:	e00f      	b.n	8006fc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <UART_SetConfig+0x4c0>)
 8006fa2:	61bb      	str	r3, [r7, #24]
        break;
 8006fa4:	e00c      	b.n	8006fc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa6:	f7fd f9ab 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006faa:	61b8      	str	r0, [r7, #24]
        break;
 8006fac:	e008      	b.n	8006fc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb2:	61bb      	str	r3, [r7, #24]
        break;
 8006fb4:	e004      	b.n	8006fc0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	77bb      	strb	r3, [r7, #30]
        break;
 8006fbe:	bf00      	nop
    }

    if (pclk != 0U)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d018      	beq.n	8006ff8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	085a      	lsrs	r2, r3, #1
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b0f      	cmp	r3, #15
 8006fde:	d909      	bls.n	8006ff4 <UART_SetConfig+0x49c>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe6:	d205      	bcs.n	8006ff4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60da      	str	r2, [r3, #12]
 8006ff2:	e001      	b.n	8006ff8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007004:	7fbb      	ldrb	r3, [r7, #30]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40007c00 	.word	0x40007c00
 8007014:	40023800 	.word	0x40023800
 8007018:	00f42400 	.word	0x00f42400

0800701c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01a      	beq.n	8007132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711a:	d10a      	bne.n	8007132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af02      	add	r7, sp, #8
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007170:	f7fa fdb2 	bl	8001cd8 <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b08      	cmp	r3, #8
 8007182:	d10e      	bne.n	80071a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f82d 	bl	80071f2 <UART_WaitOnFlagUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e023      	b.n	80071ea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d10e      	bne.n	80071ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f817 	bl	80071f2 <UART_WaitOnFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e00d      	b.n	80071ea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b09c      	sub	sp, #112	; 0x70
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007202:	e0a5      	b.n	8007350 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	f000 80a1 	beq.w	8007350 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fa fd63 	bl	8001cd8 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <UART_WaitOnFlagUntilTimeout+0x32>
 800721e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007220:	2b00      	cmp	r3, #0
 8007222:	d13e      	bne.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007238:	667b      	str	r3, [r7, #100]	; 0x64
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007244:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e6      	bne.n	8007224 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	663b      	str	r3, [r7, #96]	; 0x60
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007276:	64ba      	str	r2, [r7, #72]	; 0x48
 8007278:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800727c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e067      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d04f      	beq.n	8007350 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072be:	d147      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	613b      	str	r3, [r7, #16]
   return(result);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	66bb      	str	r3, [r7, #104]	; 0x68
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800731c:	623a      	str	r2, [r7, #32]
 800731e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69f9      	ldr	r1, [r7, #28]
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	61bb      	str	r3, [r7, #24]
   return(result);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e010      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69da      	ldr	r2, [r3, #28]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4013      	ands	r3, r2
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	429a      	cmp	r2, r3
 800736c:	f43f af4a 	beq.w	8007204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3770      	adds	r7, #112	; 0x70
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800737a:	b480      	push	{r7}
 800737c:	b095      	sub	sp, #84	; 0x54
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	643b      	str	r3, [r7, #64]	; 0x40
 80073a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e6      	bne.n	8007382 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e5      	bne.n	80073b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d118      	bne.n	8007422 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f023 0310 	bic.w	r3, r3, #16
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6979      	ldr	r1, [r7, #20]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e6      	bne.n	80073f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007434:	bf00      	nop
 8007436:	3754      	adds	r7, #84	; 0x54
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7ff fb5a 	bl	8006b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	60bb      	str	r3, [r7, #8]
   return(result);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6979      	ldr	r1, [r7, #20]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fb26 	bl	8006b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b8:	bf00      	nop
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <NRF_getSTATUS>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
	return nrfport_readByte(STATUS_ADR);
 80074c4:	2007      	movs	r0, #7
 80074c6:	f000 f84d 	bl	8007564 <nrfport_readByte>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <NRF_powerUp>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	nrfport_powerUp();
 80074d4:	f000 f85e 	bl	8007594 <nrfport_powerUp>
}
 80074d8:	bf00      	nop
 80074da:	bd80      	pop	{r7, pc}

080074dc <NRF_powerDown>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
	nrfport_powerDown();
 80074e0:	f000 f864 	bl	80075ac <nrfport_powerDown>
}
 80074e4:	bf00      	nop
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <NRF_getSTATUS_B>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS_B(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(STATUS_ADR);
 80074ec:	2007      	movs	r0, #7
 80074ee:	f000 f893 	bl	8007618 <nrfport_readByte_B>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <NRF_powerUp_B>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp_B(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
	nrfport_powerUp_B();
 80074fc:	f000 f8a4 	bl	8007648 <nrfport_powerUp_B>
}
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}

08007504 <NRF_powerDown_B>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown_B(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
	nrfport_powerDown_B();
 8007508:	f000 f8aa 	bl	8007660 <nrfport_powerDown_B>
}
 800750c:	bf00      	nop
 800750e:	bd80      	pop	{r7, pc}

08007510 <nrfport_spiTransaction>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d017      	beq.n	8007552 <nrfport_spiTransaction+0x42>
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d014      	beq.n	8007552 <nrfport_spiTransaction+0x42>

	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_RESET);
 8007528:	2200      	movs	r2, #0
 800752a:	2104      	movs	r1, #4
 800752c:	480b      	ldr	r0, [pc, #44]	; (800755c <nrfport_spiTransaction+0x4c>)
 800752e:	f7fc f9ab 	bl	8003888 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	b29b      	uxth	r3, r3
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	9200      	str	r2, [sp, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4807      	ldr	r0, [pc, #28]	; (8007560 <nrfport_spiTransaction+0x50>)
 8007542:	f7fd fcc6 	bl	8004ed2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_SET);
 8007546:	2201      	movs	r2, #1
 8007548:	2104      	movs	r1, #4
 800754a:	4804      	ldr	r0, [pc, #16]	; (800755c <nrfport_spiTransaction+0x4c>)
 800754c:	f7fc f99c 	bl	8003888 <HAL_GPIO_WritePin>
 8007550:	e000      	b.n	8007554 <nrfport_spiTransaction+0x44>
	if(NULL == tx || NULL == rx) return;
 8007552:	bf00      	nop
}
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40020400 	.word	0x40020400
 8007560:	2000023c 	.word	0x2000023c

08007564 <nrfport_readByte>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte(uint8_t adr)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 800756e:	2300      	movs	r3, #0
 8007570:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 8007572:	2300      	movs	r3, #0
 8007574:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction(tx, rx, RD_BYTE_LNG);
 800757a:	f107 010c 	add.w	r1, r7, #12
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	2202      	movs	r2, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff ffc3 	bl	8007510 <nrfport_spiTransaction>

	return rx[RD_BYTE_PLD];
 800758a:	7b7b      	ldrb	r3, [r7, #13]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <nrfport_powerUp>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_RESET);
 8007598:	2200      	movs	r2, #0
 800759a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800759e:	4802      	ldr	r0, [pc, #8]	; (80075a8 <nrfport_powerUp+0x14>)
 80075a0:	f7fc f972 	bl	8003888 <HAL_GPIO_WritePin>
}
 80075a4:	bf00      	nop
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40020400 	.word	0x40020400

080075ac <nrfport_powerDown>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_SET);
 80075b0:	2201      	movs	r2, #1
 80075b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075b6:	4802      	ldr	r0, [pc, #8]	; (80075c0 <nrfport_powerDown+0x14>)
 80075b8:	f7fc f966 	bl	8003888 <HAL_GPIO_WritePin>
}
 80075bc:	bf00      	nop
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40020400 	.word	0x40020400

080075c4 <nrfport_spiTransaction_B>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction_B(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d017      	beq.n	8007606 <nrfport_spiTransaction_B+0x42>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d014      	beq.n	8007606 <nrfport_spiTransaction_B+0x42>

	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_RESET);
 80075dc:	2200      	movs	r2, #0
 80075de:	2102      	movs	r1, #2
 80075e0:	480b      	ldr	r0, [pc, #44]	; (8007610 <nrfport_spiTransaction_B+0x4c>)
 80075e2:	f7fc f951 	bl	8003888 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295
 80075ee:	9200      	str	r2, [sp, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	4807      	ldr	r0, [pc, #28]	; (8007614 <nrfport_spiTransaction_B+0x50>)
 80075f6:	f7fd fc6c 	bl	8004ed2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_SET);
 80075fa:	2201      	movs	r2, #1
 80075fc:	2102      	movs	r1, #2
 80075fe:	4804      	ldr	r0, [pc, #16]	; (8007610 <nrfport_spiTransaction_B+0x4c>)
 8007600:	f7fc f942 	bl	8003888 <HAL_GPIO_WritePin>
 8007604:	e000      	b.n	8007608 <nrfport_spiTransaction_B+0x44>
	if(NULL == tx || NULL == rx) return;
 8007606:	bf00      	nop
}
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40020400 	.word	0x40020400
 8007614:	2000023c 	.word	0x2000023c

08007618 <nrfport_readByte_B>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte_B(uint8_t adr)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8007622:	2300      	movs	r3, #0
 8007624:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 8007626:	2300      	movs	r3, #0
 8007628:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 800762e:	f107 010c 	add.w	r1, r7, #12
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	2202      	movs	r2, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff ffc3 	bl	80075c4 <nrfport_spiTransaction_B>

	return rx[RD_BYTE_PLD];
 800763e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <nrfport_powerUp_B>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp_B(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_RESET);
 800764c:	2200      	movs	r2, #0
 800764e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007652:	4802      	ldr	r0, [pc, #8]	; (800765c <nrfport_powerUp_B+0x14>)
 8007654:	f7fc f918 	bl	8003888 <HAL_GPIO_WritePin>
}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40020400 	.word	0x40020400

08007660 <nrfport_powerDown_B>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown_B(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_SET);
 8007664:	2201      	movs	r2, #1
 8007666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800766a:	4802      	ldr	r0, [pc, #8]	; (8007674 <nrfport_powerDown_B+0x14>)
 800766c:	f7fc f90c 	bl	8003888 <HAL_GPIO_WritePin>
}
 8007670:	bf00      	nop
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40020400 	.word	0x40020400

08007678 <__errno>:
 8007678:	4b01      	ldr	r3, [pc, #4]	; (8007680 <__errno+0x8>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	2000000c 	.word	0x2000000c

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4d0d      	ldr	r5, [pc, #52]	; (80076bc <__libc_init_array+0x38>)
 8007688:	4c0d      	ldr	r4, [pc, #52]	; (80076c0 <__libc_init_array+0x3c>)
 800768a:	1b64      	subs	r4, r4, r5
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	2600      	movs	r6, #0
 8007690:	42a6      	cmp	r6, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	4d0b      	ldr	r5, [pc, #44]	; (80076c4 <__libc_init_array+0x40>)
 8007696:	4c0c      	ldr	r4, [pc, #48]	; (80076c8 <__libc_init_array+0x44>)
 8007698:	f000 ff76 	bl	8008588 <_init>
 800769c:	1b64      	subs	r4, r4, r5
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	2600      	movs	r6, #0
 80076a2:	42a6      	cmp	r6, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ac:	4798      	blx	r3
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b6:	4798      	blx	r3
 80076b8:	3601      	adds	r6, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	08008688 	.word	0x08008688
 80076c0:	08008688 	.word	0x08008688
 80076c4:	08008688 	.word	0x08008688
 80076c8:	0800868c 	.word	0x0800868c

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <iprintf>:
 80076dc:	b40f      	push	{r0, r1, r2, r3}
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <iprintf+0x2c>)
 80076e0:	b513      	push	{r0, r1, r4, lr}
 80076e2:	681c      	ldr	r4, [r3, #0]
 80076e4:	b124      	cbz	r4, 80076f0 <iprintf+0x14>
 80076e6:	69a3      	ldr	r3, [r4, #24]
 80076e8:	b913      	cbnz	r3, 80076f0 <iprintf+0x14>
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 f866 	bl	80077bc <__sinit>
 80076f0:	ab05      	add	r3, sp, #20
 80076f2:	9a04      	ldr	r2, [sp, #16]
 80076f4:	68a1      	ldr	r1, [r4, #8]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 f983 	bl	8007a04 <_vfiprintf_r>
 80076fe:	b002      	add	sp, #8
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	b004      	add	sp, #16
 8007706:	4770      	bx	lr
 8007708:	2000000c 	.word	0x2000000c

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	; 0x5c
 800772a:	f7ff ffcf 	bl	80076cc <memset>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x38>)
 8007730:	6263      	str	r3, [r4, #36]	; 0x24
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x3c>)
 8007734:	62a3      	str	r3, [r4, #40]	; 0x28
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x40>)
 8007738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x44>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	08007fad 	.word	0x08007fad
 8007748:	08007fcf 	.word	0x08007fcf
 800774c:	08008007 	.word	0x08008007
 8007750:	0800802b 	.word	0x0800802b

08007754 <_cleanup_r>:
 8007754:	4901      	ldr	r1, [pc, #4]	; (800775c <_cleanup_r+0x8>)
 8007756:	f000 b8af 	b.w	80078b8 <_fwalk_reent>
 800775a:	bf00      	nop
 800775c:	08008305 	.word	0x08008305

08007760 <__sfmoreglue>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	1e4a      	subs	r2, r1, #1
 8007764:	2568      	movs	r5, #104	; 0x68
 8007766:	4355      	muls	r5, r2
 8007768:	460e      	mov	r6, r1
 800776a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776e:	f000 f8c5 	bl	80078fc <_malloc_r>
 8007772:	4604      	mov	r4, r0
 8007774:	b140      	cbz	r0, 8007788 <__sfmoreglue+0x28>
 8007776:	2100      	movs	r1, #0
 8007778:	e9c0 1600 	strd	r1, r6, [r0]
 800777c:	300c      	adds	r0, #12
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007784:	f7ff ffa2 	bl	80076cc <memset>
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b8b3 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	200004f8 	.word	0x200004f8

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8ae 	b.w	80078fa <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	200004f8 	.word	0x200004f8

080077a4 <__sinit_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sinit_lock_acquire+0x8>)
 80077a6:	f000 b8a7 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	200004f3 	.word	0x200004f3

080077b0 <__sinit_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_release+0x8>)
 80077b2:	f000 b8a2 	b.w	80078fa <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	200004f3 	.word	0x200004f3

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sinit_lock_acquire>
 80077c4:	69a3      	ldr	r3, [r4, #24]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sinit_lock_release>
 80077d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077d4:	6523      	str	r3, [r4, #80]	; 0x50
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <__sinit+0x68>)
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <__sinit+0x6c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077de:	42a3      	cmp	r3, r4
 80077e0:	bf04      	itt	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	61a3      	streq	r3, [r4, #24]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f820 	bl	800782c <__sfp>
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f81c 	bl	800782c <__sfp>
 80077f4:	60a0      	str	r0, [r4, #8]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f818 	bl	800782c <__sfp>
 80077fc:	2200      	movs	r2, #0
 80077fe:	60e0      	str	r0, [r4, #12]
 8007800:	2104      	movs	r1, #4
 8007802:	6860      	ldr	r0, [r4, #4]
 8007804:	f7ff ff82 	bl	800770c <std>
 8007808:	68a0      	ldr	r0, [r4, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	2109      	movs	r1, #9
 800780e:	f7ff ff7d 	bl	800770c <std>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff ff78 	bl	800770c <std>
 800781c:	2301      	movs	r3, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	e7d2      	b.n	80077c8 <__sinit+0xc>
 8007822:	bf00      	nop
 8007824:	080085e8 	.word	0x080085e8
 8007828:	08007755 	.word	0x08007755

0800782c <__sfp>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	4607      	mov	r7, r0
 8007830:	f7ff ffac 	bl	800778c <__sfp_lock_acquire>
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <__sfp+0x84>)
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	69b3      	ldr	r3, [r6, #24]
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x16>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffbd 	bl	80077bc <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d503      	bpl.n	8007854 <__sfp+0x28>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	b30b      	cbz	r3, 8007894 <__sfp+0x68>
 8007850:	6836      	ldr	r6, [r6, #0]
 8007852:	e7f7      	b.n	8007844 <__sfp+0x18>
 8007854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007858:	b9d5      	cbnz	r5, 8007890 <__sfp+0x64>
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <__sfp+0x88>)
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007862:	6665      	str	r5, [r4, #100]	; 0x64
 8007864:	f000 f847 	bl	80078f6 <__retarget_lock_init_recursive>
 8007868:	f7ff ff96 	bl	8007798 <__sfp_lock_release>
 800786c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	61a5      	str	r5, [r4, #24]
 8007878:	2208      	movs	r2, #8
 800787a:	4629      	mov	r1, r5
 800787c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007880:	f7ff ff24 	bl	80076cc <memset>
 8007884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800788c:	4620      	mov	r0, r4
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	3468      	adds	r4, #104	; 0x68
 8007892:	e7d9      	b.n	8007848 <__sfp+0x1c>
 8007894:	2104      	movs	r1, #4
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ff62 	bl	8007760 <__sfmoreglue>
 800789c:	4604      	mov	r4, r0
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1d5      	bne.n	8007850 <__sfp+0x24>
 80078a4:	f7ff ff78 	bl	8007798 <__sfp_lock_release>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	e7ee      	b.n	800788c <__sfp+0x60>
 80078ae:	bf00      	nop
 80078b0:	080085e8 	.word	0x080085e8
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	4688      	mov	r8, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2700      	movs	r7, #0
 80078c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ca:	f1b9 0901 	subs.w	r9, r9, #1
 80078ce:	d505      	bpl.n	80078dc <_fwalk_reent+0x24>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	d1f7      	bne.n	80078c6 <_fwalk_reent+0xe>
 80078d6:	4638      	mov	r0, r7
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d907      	bls.n	80078f2 <_fwalk_reent+0x3a>
 80078e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	d003      	beq.n	80078f2 <_fwalk_reent+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	47c0      	blx	r8
 80078f0:	4307      	orrs	r7, r0
 80078f2:	3568      	adds	r5, #104	; 0x68
 80078f4:	e7e9      	b.n	80078ca <_fwalk_reent+0x12>

080078f6 <__retarget_lock_init_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <__retarget_lock_acquire_recursive>:
 80078f8:	4770      	bx	lr

080078fa <__retarget_lock_release_recursive>:
 80078fa:	4770      	bx	lr

080078fc <_malloc_r>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	1ccd      	adds	r5, r1, #3
 8007900:	f025 0503 	bic.w	r5, r5, #3
 8007904:	3508      	adds	r5, #8
 8007906:	2d0c      	cmp	r5, #12
 8007908:	bf38      	it	cc
 800790a:	250c      	movcc	r5, #12
 800790c:	2d00      	cmp	r5, #0
 800790e:	4606      	mov	r6, r0
 8007910:	db01      	blt.n	8007916 <_malloc_r+0x1a>
 8007912:	42a9      	cmp	r1, r5
 8007914:	d903      	bls.n	800791e <_malloc_r+0x22>
 8007916:	230c      	movs	r3, #12
 8007918:	6033      	str	r3, [r6, #0]
 800791a:	2000      	movs	r0, #0
 800791c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800791e:	f000 fda3 	bl	8008468 <__malloc_lock>
 8007922:	4921      	ldr	r1, [pc, #132]	; (80079a8 <_malloc_r+0xac>)
 8007924:	680a      	ldr	r2, [r1, #0]
 8007926:	4614      	mov	r4, r2
 8007928:	b99c      	cbnz	r4, 8007952 <_malloc_r+0x56>
 800792a:	4f20      	ldr	r7, [pc, #128]	; (80079ac <_malloc_r+0xb0>)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	b923      	cbnz	r3, 800793a <_malloc_r+0x3e>
 8007930:	4621      	mov	r1, r4
 8007932:	4630      	mov	r0, r6
 8007934:	f000 fb2a 	bl	8007f8c <_sbrk_r>
 8007938:	6038      	str	r0, [r7, #0]
 800793a:	4629      	mov	r1, r5
 800793c:	4630      	mov	r0, r6
 800793e:	f000 fb25 	bl	8007f8c <_sbrk_r>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d123      	bne.n	800798e <_malloc_r+0x92>
 8007946:	230c      	movs	r3, #12
 8007948:	6033      	str	r3, [r6, #0]
 800794a:	4630      	mov	r0, r6
 800794c:	f000 fd92 	bl	8008474 <__malloc_unlock>
 8007950:	e7e3      	b.n	800791a <_malloc_r+0x1e>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	1b5b      	subs	r3, r3, r5
 8007956:	d417      	bmi.n	8007988 <_malloc_r+0x8c>
 8007958:	2b0b      	cmp	r3, #11
 800795a:	d903      	bls.n	8007964 <_malloc_r+0x68>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	441c      	add	r4, r3
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	e004      	b.n	800796e <_malloc_r+0x72>
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	42a2      	cmp	r2, r4
 8007968:	bf0c      	ite	eq
 800796a:	600b      	streq	r3, [r1, #0]
 800796c:	6053      	strne	r3, [r2, #4]
 800796e:	4630      	mov	r0, r6
 8007970:	f000 fd80 	bl	8008474 <__malloc_unlock>
 8007974:	f104 000b 	add.w	r0, r4, #11
 8007978:	1d23      	adds	r3, r4, #4
 800797a:	f020 0007 	bic.w	r0, r0, #7
 800797e:	1ac2      	subs	r2, r0, r3
 8007980:	d0cc      	beq.n	800791c <_malloc_r+0x20>
 8007982:	1a1b      	subs	r3, r3, r0
 8007984:	50a3      	str	r3, [r4, r2]
 8007986:	e7c9      	b.n	800791c <_malloc_r+0x20>
 8007988:	4622      	mov	r2, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7cc      	b.n	8007928 <_malloc_r+0x2c>
 800798e:	1cc4      	adds	r4, r0, #3
 8007990:	f024 0403 	bic.w	r4, r4, #3
 8007994:	42a0      	cmp	r0, r4
 8007996:	d0e3      	beq.n	8007960 <_malloc_r+0x64>
 8007998:	1a21      	subs	r1, r4, r0
 800799a:	4630      	mov	r0, r6
 800799c:	f000 faf6 	bl	8007f8c <_sbrk_r>
 80079a0:	3001      	adds	r0, #1
 80079a2:	d1dd      	bne.n	8007960 <_malloc_r+0x64>
 80079a4:	e7cf      	b.n	8007946 <_malloc_r+0x4a>
 80079a6:	bf00      	nop
 80079a8:	20000098 	.word	0x20000098
 80079ac:	2000009c 	.word	0x2000009c

080079b0 <__sfputc_r>:
 80079b0:	6893      	ldr	r3, [r2, #8]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	b410      	push	{r4}
 80079b8:	6093      	str	r3, [r2, #8]
 80079ba:	da08      	bge.n	80079ce <__sfputc_r+0x1e>
 80079bc:	6994      	ldr	r4, [r2, #24]
 80079be:	42a3      	cmp	r3, r4
 80079c0:	db01      	blt.n	80079c6 <__sfputc_r+0x16>
 80079c2:	290a      	cmp	r1, #10
 80079c4:	d103      	bne.n	80079ce <__sfputc_r+0x1e>
 80079c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ca:	f000 bb33 	b.w	8008034 <__swbuf_r>
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	1c58      	adds	r0, r3, #1
 80079d2:	6010      	str	r0, [r2, #0]
 80079d4:	7019      	strb	r1, [r3, #0]
 80079d6:	4608      	mov	r0, r1
 80079d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079dc:	4770      	bx	lr

080079de <__sfputs_r>:
 80079de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	18d5      	adds	r5, r2, r3
 80079e8:	42ac      	cmp	r4, r5
 80079ea:	d101      	bne.n	80079f0 <__sfputs_r+0x12>
 80079ec:	2000      	movs	r0, #0
 80079ee:	e007      	b.n	8007a00 <__sfputs_r+0x22>
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	463a      	mov	r2, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ffda 	bl	80079b0 <__sfputc_r>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d1f3      	bne.n	80079e8 <__sfputs_r+0xa>
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a04 <_vfiprintf_r>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	460d      	mov	r5, r1
 8007a0a:	b09d      	sub	sp, #116	; 0x74
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	4698      	mov	r8, r3
 8007a10:	4606      	mov	r6, r0
 8007a12:	b118      	cbz	r0, 8007a1c <_vfiprintf_r+0x18>
 8007a14:	6983      	ldr	r3, [r0, #24]
 8007a16:	b90b      	cbnz	r3, 8007a1c <_vfiprintf_r+0x18>
 8007a18:	f7ff fed0 	bl	80077bc <__sinit>
 8007a1c:	4b89      	ldr	r3, [pc, #548]	; (8007c44 <_vfiprintf_r+0x240>)
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	d11b      	bne.n	8007a5a <_vfiprintf_r+0x56>
 8007a22:	6875      	ldr	r5, [r6, #4]
 8007a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a26:	07d9      	lsls	r1, r3, #31
 8007a28:	d405      	bmi.n	8007a36 <_vfiprintf_r+0x32>
 8007a2a:	89ab      	ldrh	r3, [r5, #12]
 8007a2c:	059a      	lsls	r2, r3, #22
 8007a2e:	d402      	bmi.n	8007a36 <_vfiprintf_r+0x32>
 8007a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a32:	f7ff ff61 	bl	80078f8 <__retarget_lock_acquire_recursive>
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	071b      	lsls	r3, r3, #28
 8007a3a:	d501      	bpl.n	8007a40 <_vfiprintf_r+0x3c>
 8007a3c:	692b      	ldr	r3, [r5, #16]
 8007a3e:	b9eb      	cbnz	r3, 8007a7c <_vfiprintf_r+0x78>
 8007a40:	4629      	mov	r1, r5
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 fb5a 	bl	80080fc <__swsetup_r>
 8007a48:	b1c0      	cbz	r0, 8007a7c <_vfiprintf_r+0x78>
 8007a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a4c:	07dc      	lsls	r4, r3, #31
 8007a4e:	d50e      	bpl.n	8007a6e <_vfiprintf_r+0x6a>
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
 8007a54:	b01d      	add	sp, #116	; 0x74
 8007a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5a:	4b7b      	ldr	r3, [pc, #492]	; (8007c48 <_vfiprintf_r+0x244>)
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	d101      	bne.n	8007a64 <_vfiprintf_r+0x60>
 8007a60:	68b5      	ldr	r5, [r6, #8]
 8007a62:	e7df      	b.n	8007a24 <_vfiprintf_r+0x20>
 8007a64:	4b79      	ldr	r3, [pc, #484]	; (8007c4c <_vfiprintf_r+0x248>)
 8007a66:	429d      	cmp	r5, r3
 8007a68:	bf08      	it	eq
 8007a6a:	68f5      	ldreq	r5, [r6, #12]
 8007a6c:	e7da      	b.n	8007a24 <_vfiprintf_r+0x20>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	0598      	lsls	r0, r3, #22
 8007a72:	d4ed      	bmi.n	8007a50 <_vfiprintf_r+0x4c>
 8007a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a76:	f7ff ff40 	bl	80078fa <__retarget_lock_release_recursive>
 8007a7a:	e7e9      	b.n	8007a50 <_vfiprintf_r+0x4c>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a80:	2320      	movs	r3, #32
 8007a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a8a:	2330      	movs	r3, #48	; 0x30
 8007a8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c50 <_vfiprintf_r+0x24c>
 8007a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a94:	f04f 0901 	mov.w	r9, #1
 8007a98:	4623      	mov	r3, r4
 8007a9a:	469a      	mov	sl, r3
 8007a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa0:	b10a      	cbz	r2, 8007aa6 <_vfiprintf_r+0xa2>
 8007aa2:	2a25      	cmp	r2, #37	; 0x25
 8007aa4:	d1f9      	bne.n	8007a9a <_vfiprintf_r+0x96>
 8007aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aaa:	d00b      	beq.n	8007ac4 <_vfiprintf_r+0xc0>
 8007aac:	465b      	mov	r3, fp
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7ff ff93 	bl	80079de <__sfputs_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	f000 80aa 	beq.w	8007c12 <_vfiprintf_r+0x20e>
 8007abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac0:	445a      	add	r2, fp
 8007ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80a2 	beq.w	8007c12 <_vfiprintf_r+0x20e>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ad8:	f10a 0a01 	add.w	sl, sl, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ae6:	4654      	mov	r4, sl
 8007ae8:	2205      	movs	r2, #5
 8007aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aee:	4858      	ldr	r0, [pc, #352]	; (8007c50 <_vfiprintf_r+0x24c>)
 8007af0:	f7f8 fba6 	bl	8000240 <memchr>
 8007af4:	9a04      	ldr	r2, [sp, #16]
 8007af6:	b9d8      	cbnz	r0, 8007b30 <_vfiprintf_r+0x12c>
 8007af8:	06d1      	lsls	r1, r2, #27
 8007afa:	bf44      	itt	mi
 8007afc:	2320      	movmi	r3, #32
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b02:	0713      	lsls	r3, r2, #28
 8007b04:	bf44      	itt	mi
 8007b06:	232b      	movmi	r3, #43	; 0x2b
 8007b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b10:	2b2a      	cmp	r3, #42	; 0x2a
 8007b12:	d015      	beq.n	8007b40 <_vfiprintf_r+0x13c>
 8007b14:	9a07      	ldr	r2, [sp, #28]
 8007b16:	4654      	mov	r4, sl
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f04f 0c0a 	mov.w	ip, #10
 8007b1e:	4621      	mov	r1, r4
 8007b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b24:	3b30      	subs	r3, #48	; 0x30
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	d94e      	bls.n	8007bc8 <_vfiprintf_r+0x1c4>
 8007b2a:	b1b0      	cbz	r0, 8007b5a <_vfiprintf_r+0x156>
 8007b2c:	9207      	str	r2, [sp, #28]
 8007b2e:	e014      	b.n	8007b5a <_vfiprintf_r+0x156>
 8007b30:	eba0 0308 	sub.w	r3, r0, r8
 8007b34:	fa09 f303 	lsl.w	r3, r9, r3
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	46a2      	mov	sl, r4
 8007b3e:	e7d2      	b.n	8007ae6 <_vfiprintf_r+0xe2>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	1d19      	adds	r1, r3, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	9103      	str	r1, [sp, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfbb      	ittet	lt
 8007b4c:	425b      	neglt	r3, r3
 8007b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b52:	9307      	strge	r3, [sp, #28]
 8007b54:	9307      	strlt	r3, [sp, #28]
 8007b56:	bfb8      	it	lt
 8007b58:	9204      	strlt	r2, [sp, #16]
 8007b5a:	7823      	ldrb	r3, [r4, #0]
 8007b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b5e:	d10c      	bne.n	8007b7a <_vfiprintf_r+0x176>
 8007b60:	7863      	ldrb	r3, [r4, #1]
 8007b62:	2b2a      	cmp	r3, #42	; 0x2a
 8007b64:	d135      	bne.n	8007bd2 <_vfiprintf_r+0x1ce>
 8007b66:	9b03      	ldr	r3, [sp, #12]
 8007b68:	1d1a      	adds	r2, r3, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	9203      	str	r2, [sp, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bfb8      	it	lt
 8007b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b76:	3402      	adds	r4, #2
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c60 <_vfiprintf_r+0x25c>
 8007b7e:	7821      	ldrb	r1, [r4, #0]
 8007b80:	2203      	movs	r2, #3
 8007b82:	4650      	mov	r0, sl
 8007b84:	f7f8 fb5c 	bl	8000240 <memchr>
 8007b88:	b140      	cbz	r0, 8007b9c <_vfiprintf_r+0x198>
 8007b8a:	2340      	movs	r3, #64	; 0x40
 8007b8c:	eba0 000a 	sub.w	r0, r0, sl
 8007b90:	fa03 f000 	lsl.w	r0, r3, r0
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	4303      	orrs	r3, r0
 8007b98:	3401      	adds	r4, #1
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba0:	482c      	ldr	r0, [pc, #176]	; (8007c54 <_vfiprintf_r+0x250>)
 8007ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ba6:	2206      	movs	r2, #6
 8007ba8:	f7f8 fb4a 	bl	8000240 <memchr>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d03f      	beq.n	8007c30 <_vfiprintf_r+0x22c>
 8007bb0:	4b29      	ldr	r3, [pc, #164]	; (8007c58 <_vfiprintf_r+0x254>)
 8007bb2:	bb1b      	cbnz	r3, 8007bfc <_vfiprintf_r+0x1f8>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	f023 0307 	bic.w	r3, r3, #7
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	443b      	add	r3, r7
 8007bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc6:	e767      	b.n	8007a98 <_vfiprintf_r+0x94>
 8007bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bcc:	460c      	mov	r4, r1
 8007bce:	2001      	movs	r0, #1
 8007bd0:	e7a5      	b.n	8007b1e <_vfiprintf_r+0x11a>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f04f 0c0a 	mov.w	ip, #10
 8007bde:	4620      	mov	r0, r4
 8007be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be4:	3a30      	subs	r2, #48	; 0x30
 8007be6:	2a09      	cmp	r2, #9
 8007be8:	d903      	bls.n	8007bf2 <_vfiprintf_r+0x1ee>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0c5      	beq.n	8007b7a <_vfiprintf_r+0x176>
 8007bee:	9105      	str	r1, [sp, #20]
 8007bf0:	e7c3      	b.n	8007b7a <_vfiprintf_r+0x176>
 8007bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7f0      	b.n	8007bde <_vfiprintf_r+0x1da>
 8007bfc:	ab03      	add	r3, sp, #12
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	462a      	mov	r2, r5
 8007c02:	4b16      	ldr	r3, [pc, #88]	; (8007c5c <_vfiprintf_r+0x258>)
 8007c04:	a904      	add	r1, sp, #16
 8007c06:	4630      	mov	r0, r6
 8007c08:	f3af 8000 	nop.w
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	1c78      	adds	r0, r7, #1
 8007c10:	d1d6      	bne.n	8007bc0 <_vfiprintf_r+0x1bc>
 8007c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c14:	07d9      	lsls	r1, r3, #31
 8007c16:	d405      	bmi.n	8007c24 <_vfiprintf_r+0x220>
 8007c18:	89ab      	ldrh	r3, [r5, #12]
 8007c1a:	059a      	lsls	r2, r3, #22
 8007c1c:	d402      	bmi.n	8007c24 <_vfiprintf_r+0x220>
 8007c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c20:	f7ff fe6b 	bl	80078fa <__retarget_lock_release_recursive>
 8007c24:	89ab      	ldrh	r3, [r5, #12]
 8007c26:	065b      	lsls	r3, r3, #25
 8007c28:	f53f af12 	bmi.w	8007a50 <_vfiprintf_r+0x4c>
 8007c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c2e:	e711      	b.n	8007a54 <_vfiprintf_r+0x50>
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	462a      	mov	r2, r5
 8007c36:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <_vfiprintf_r+0x258>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f000 f880 	bl	8007d40 <_printf_i>
 8007c40:	e7e4      	b.n	8007c0c <_vfiprintf_r+0x208>
 8007c42:	bf00      	nop
 8007c44:	0800860c 	.word	0x0800860c
 8007c48:	0800862c 	.word	0x0800862c
 8007c4c:	080085ec 	.word	0x080085ec
 8007c50:	0800864c 	.word	0x0800864c
 8007c54:	08008656 	.word	0x08008656
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	080079df 	.word	0x080079df
 8007c60:	08008652 	.word	0x08008652

08007c64 <_printf_common>:
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c68:	4616      	mov	r6, r2
 8007c6a:	4699      	mov	r9, r3
 8007c6c:	688a      	ldr	r2, [r1, #8]
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bfb8      	it	lt
 8007c78:	4613      	movlt	r3, r2
 8007c7a:	6033      	str	r3, [r6, #0]
 8007c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c80:	4607      	mov	r7, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b10a      	cbz	r2, 8007c8a <_printf_common+0x26>
 8007c86:	3301      	adds	r3, #1
 8007c88:	6033      	str	r3, [r6, #0]
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	0699      	lsls	r1, r3, #26
 8007c8e:	bf42      	ittt	mi
 8007c90:	6833      	ldrmi	r3, [r6, #0]
 8007c92:	3302      	addmi	r3, #2
 8007c94:	6033      	strmi	r3, [r6, #0]
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	f015 0506 	ands.w	r5, r5, #6
 8007c9c:	d106      	bne.n	8007cac <_printf_common+0x48>
 8007c9e:	f104 0a19 	add.w	sl, r4, #25
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	6832      	ldr	r2, [r6, #0]
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dc26      	bgt.n	8007cfa <_printf_common+0x96>
 8007cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cb0:	1e13      	subs	r3, r2, #0
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	0692      	lsls	r2, r2, #26
 8007cba:	d42b      	bmi.n	8007d14 <_printf_common+0xb0>
 8007cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c0      	blx	r8
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d01e      	beq.n	8007d08 <_printf_common+0xa4>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	68e5      	ldr	r5, [r4, #12]
 8007cce:	6832      	ldr	r2, [r6, #0]
 8007cd0:	f003 0306 	and.w	r3, r3, #6
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	bf08      	it	eq
 8007cd8:	1aad      	subeq	r5, r5, r2
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	bf0c      	ite	eq
 8007ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce4:	2500      	movne	r5, #0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	bfc4      	itt	gt
 8007cea:	1a9b      	subgt	r3, r3, r2
 8007cec:	18ed      	addgt	r5, r5, r3
 8007cee:	2600      	movs	r6, #0
 8007cf0:	341a      	adds	r4, #26
 8007cf2:	42b5      	cmp	r5, r6
 8007cf4:	d11a      	bne.n	8007d2c <_printf_common+0xc8>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e008      	b.n	8007d0c <_printf_common+0xa8>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4638      	mov	r0, r7
 8007d02:	47c0      	blx	r8
 8007d04:	3001      	adds	r0, #1
 8007d06:	d103      	bne.n	8007d10 <_printf_common+0xac>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d10:	3501      	adds	r5, #1
 8007d12:	e7c6      	b.n	8007ca2 <_printf_common+0x3e>
 8007d14:	18e1      	adds	r1, r4, r3
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	2030      	movs	r0, #48	; 0x30
 8007d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1e:	4422      	add	r2, r4
 8007d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d28:	3302      	adds	r3, #2
 8007d2a:	e7c7      	b.n	8007cbc <_printf_common+0x58>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d0e6      	beq.n	8007d08 <_printf_common+0xa4>
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	e7d9      	b.n	8007cf2 <_printf_common+0x8e>
	...

08007d40 <_printf_i>:
 8007d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	460c      	mov	r4, r1
 8007d46:	4691      	mov	r9, r2
 8007d48:	7e27      	ldrb	r7, [r4, #24]
 8007d4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d4c:	2f78      	cmp	r7, #120	; 0x78
 8007d4e:	4680      	mov	r8, r0
 8007d50:	469a      	mov	sl, r3
 8007d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d56:	d807      	bhi.n	8007d68 <_printf_i+0x28>
 8007d58:	2f62      	cmp	r7, #98	; 0x62
 8007d5a:	d80a      	bhi.n	8007d72 <_printf_i+0x32>
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f000 80d8 	beq.w	8007f12 <_printf_i+0x1d2>
 8007d62:	2f58      	cmp	r7, #88	; 0x58
 8007d64:	f000 80a3 	beq.w	8007eae <_printf_i+0x16e>
 8007d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d70:	e03a      	b.n	8007de8 <_printf_i+0xa8>
 8007d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d76:	2b15      	cmp	r3, #21
 8007d78:	d8f6      	bhi.n	8007d68 <_printf_i+0x28>
 8007d7a:	a001      	add	r0, pc, #4	; (adr r0, 8007d80 <_printf_i+0x40>)
 8007d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007d69 	.word	0x08007d69
 8007d8c:	08007d69 	.word	0x08007d69
 8007d90:	08007d69 	.word	0x08007d69
 8007d94:	08007d69 	.word	0x08007d69
 8007d98:	08007ded 	.word	0x08007ded
 8007d9c:	08007d69 	.word	0x08007d69
 8007da0:	08007d69 	.word	0x08007d69
 8007da4:	08007d69 	.word	0x08007d69
 8007da8:	08007d69 	.word	0x08007d69
 8007dac:	08007ef9 	.word	0x08007ef9
 8007db0:	08007e1d 	.word	0x08007e1d
 8007db4:	08007edb 	.word	0x08007edb
 8007db8:	08007d69 	.word	0x08007d69
 8007dbc:	08007d69 	.word	0x08007d69
 8007dc0:	08007f1b 	.word	0x08007f1b
 8007dc4:	08007d69 	.word	0x08007d69
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d69 	.word	0x08007d69
 8007dd0:	08007d69 	.word	0x08007d69
 8007dd4:	08007ee3 	.word	0x08007ee3
 8007dd8:	680b      	ldr	r3, [r1, #0]
 8007dda:	1d1a      	adds	r2, r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	600a      	str	r2, [r1, #0]
 8007de0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0a3      	b.n	8007f34 <_printf_i+0x1f4>
 8007dec:	6825      	ldr	r5, [r4, #0]
 8007dee:	6808      	ldr	r0, [r1, #0]
 8007df0:	062e      	lsls	r6, r5, #24
 8007df2:	f100 0304 	add.w	r3, r0, #4
 8007df6:	d50a      	bpl.n	8007e0e <_printf_i+0xce>
 8007df8:	6805      	ldr	r5, [r0, #0]
 8007dfa:	600b      	str	r3, [r1, #0]
 8007dfc:	2d00      	cmp	r5, #0
 8007dfe:	da03      	bge.n	8007e08 <_printf_i+0xc8>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	426d      	negs	r5, r5
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	485e      	ldr	r0, [pc, #376]	; (8007f84 <_printf_i+0x244>)
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	e019      	b.n	8007e42 <_printf_i+0x102>
 8007e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e12:	6805      	ldr	r5, [r0, #0]
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	bf18      	it	ne
 8007e18:	b22d      	sxthne	r5, r5
 8007e1a:	e7ef      	b.n	8007dfc <_printf_i+0xbc>
 8007e1c:	680b      	ldr	r3, [r1, #0]
 8007e1e:	6825      	ldr	r5, [r4, #0]
 8007e20:	1d18      	adds	r0, r3, #4
 8007e22:	6008      	str	r0, [r1, #0]
 8007e24:	0628      	lsls	r0, r5, #24
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0xec>
 8007e28:	681d      	ldr	r5, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0xf2>
 8007e2c:	0669      	lsls	r1, r5, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0xe8>
 8007e30:	881d      	ldrh	r5, [r3, #0]
 8007e32:	4854      	ldr	r0, [pc, #336]	; (8007f84 <_printf_i+0x244>)
 8007e34:	2f6f      	cmp	r7, #111	; 0x6f
 8007e36:	bf0c      	ite	eq
 8007e38:	2308      	moveq	r3, #8
 8007e3a:	230a      	movne	r3, #10
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e42:	6866      	ldr	r6, [r4, #4]
 8007e44:	60a6      	str	r6, [r4, #8]
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	bfa2      	ittt	ge
 8007e4a:	6821      	ldrge	r1, [r4, #0]
 8007e4c:	f021 0104 	bicge.w	r1, r1, #4
 8007e50:	6021      	strge	r1, [r4, #0]
 8007e52:	b90d      	cbnz	r5, 8007e58 <_printf_i+0x118>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	d04d      	beq.n	8007ef4 <_printf_i+0x1b4>
 8007e58:	4616      	mov	r6, r2
 8007e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e62:	5dc7      	ldrb	r7, [r0, r7]
 8007e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e68:	462f      	mov	r7, r5
 8007e6a:	42bb      	cmp	r3, r7
 8007e6c:	460d      	mov	r5, r1
 8007e6e:	d9f4      	bls.n	8007e5a <_printf_i+0x11a>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10b      	bne.n	8007e8c <_printf_i+0x14c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	07df      	lsls	r7, r3, #31
 8007e78:	d508      	bpl.n	8007e8c <_printf_i+0x14c>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	6861      	ldr	r1, [r4, #4]
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	bfde      	ittt	le
 8007e82:	2330      	movle	r3, #48	; 0x30
 8007e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e8c:	1b92      	subs	r2, r2, r6
 8007e8e:	6122      	str	r2, [r4, #16]
 8007e90:	f8cd a000 	str.w	sl, [sp]
 8007e94:	464b      	mov	r3, r9
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7ff fee2 	bl	8007c64 <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14c      	bne.n	8007f3e <_printf_i+0x1fe>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b004      	add	sp, #16
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	4835      	ldr	r0, [pc, #212]	; (8007f84 <_printf_i+0x244>)
 8007eb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	680e      	ldr	r6, [r1, #0]
 8007eb8:	061f      	lsls	r7, r3, #24
 8007eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ebe:	600e      	str	r6, [r1, #0]
 8007ec0:	d514      	bpl.n	8007eec <_printf_i+0x1ac>
 8007ec2:	07d9      	lsls	r1, r3, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eca:	6023      	strmi	r3, [r4, #0]
 8007ecc:	b91d      	cbnz	r5, 8007ed6 <_printf_i+0x196>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f023 0320 	bic.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	2310      	movs	r3, #16
 8007ed8:	e7b0      	b.n	8007e3c <_printf_i+0xfc>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f043 0320 	orr.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2378      	movs	r3, #120	; 0x78
 8007ee4:	4828      	ldr	r0, [pc, #160]	; (8007f88 <_printf_i+0x248>)
 8007ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eea:	e7e3      	b.n	8007eb4 <_printf_i+0x174>
 8007eec:	065e      	lsls	r6, r3, #25
 8007eee:	bf48      	it	mi
 8007ef0:	b2ad      	uxthmi	r5, r5
 8007ef2:	e7e6      	b.n	8007ec2 <_printf_i+0x182>
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	e7bb      	b.n	8007e70 <_printf_i+0x130>
 8007ef8:	680b      	ldr	r3, [r1, #0]
 8007efa:	6826      	ldr	r6, [r4, #0]
 8007efc:	6960      	ldr	r0, [r4, #20]
 8007efe:	1d1d      	adds	r5, r3, #4
 8007f00:	600d      	str	r5, [r1, #0]
 8007f02:	0635      	lsls	r5, r6, #24
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	d501      	bpl.n	8007f0c <_printf_i+0x1cc>
 8007f08:	6018      	str	r0, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <_printf_i+0x1d2>
 8007f0c:	0671      	lsls	r1, r6, #25
 8007f0e:	d5fb      	bpl.n	8007f08 <_printf_i+0x1c8>
 8007f10:	8018      	strh	r0, [r3, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	4616      	mov	r6, r2
 8007f18:	e7ba      	b.n	8007e90 <_printf_i+0x150>
 8007f1a:	680b      	ldr	r3, [r1, #0]
 8007f1c:	1d1a      	adds	r2, r3, #4
 8007f1e:	600a      	str	r2, [r1, #0]
 8007f20:	681e      	ldr	r6, [r3, #0]
 8007f22:	6862      	ldr	r2, [r4, #4]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4630      	mov	r0, r6
 8007f28:	f7f8 f98a 	bl	8000240 <memchr>
 8007f2c:	b108      	cbz	r0, 8007f32 <_printf_i+0x1f2>
 8007f2e:	1b80      	subs	r0, r0, r6
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	2300      	movs	r3, #0
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	e7a8      	b.n	8007e90 <_printf_i+0x150>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	4632      	mov	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d0ab      	beq.n	8007ea4 <_printf_i+0x164>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	079b      	lsls	r3, r3, #30
 8007f50:	d413      	bmi.n	8007f7a <_printf_i+0x23a>
 8007f52:	68e0      	ldr	r0, [r4, #12]
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	4298      	cmp	r0, r3
 8007f58:	bfb8      	it	lt
 8007f5a:	4618      	movlt	r0, r3
 8007f5c:	e7a4      	b.n	8007ea8 <_printf_i+0x168>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4632      	mov	r2, r6
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d09b      	beq.n	8007ea4 <_printf_i+0x164>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	9903      	ldr	r1, [sp, #12]
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dcf2      	bgt.n	8007f5e <_printf_i+0x21e>
 8007f78:	e7eb      	b.n	8007f52 <_printf_i+0x212>
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	f104 0619 	add.w	r6, r4, #25
 8007f80:	e7f5      	b.n	8007f6e <_printf_i+0x22e>
 8007f82:	bf00      	nop
 8007f84:	0800865d 	.word	0x0800865d
 8007f88:	0800866e 	.word	0x0800866e

08007f8c <_sbrk_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d06      	ldr	r5, [pc, #24]	; (8007fa8 <_sbrk_r+0x1c>)
 8007f90:	2300      	movs	r3, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	f7f9 fa16 	bl	80013c8 <_sbrk>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_sbrk_r+0x1a>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_sbrk_r+0x1a>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	200004fc 	.word	0x200004fc

08007fac <__sread>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 fab4 	bl	8008520 <_read_r>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	bfab      	itete	ge
 8007fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc0:	181b      	addge	r3, r3, r0
 8007fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fc6:	bfac      	ite	ge
 8007fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fca:	81a3      	strhlt	r3, [r4, #12]
 8007fcc:	bd10      	pop	{r4, pc}

08007fce <__swrite>:
 8007fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	898b      	ldrh	r3, [r1, #12]
 8007fd6:	05db      	lsls	r3, r3, #23
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4616      	mov	r6, r2
 8007fde:	d505      	bpl.n	8007fec <__swrite+0x1e>
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f000 f9c8 	bl	800837c <_lseek_r>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	f000 b869 	b.w	80080d8 <_write_r>

08008006 <__sseek>:
 8008006:	b510      	push	{r4, lr}
 8008008:	460c      	mov	r4, r1
 800800a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800e:	f000 f9b5 	bl	800837c <_lseek_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	bf15      	itete	ne
 8008018:	6560      	strne	r0, [r4, #84]	; 0x54
 800801a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800801e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008022:	81a3      	strheq	r3, [r4, #12]
 8008024:	bf18      	it	ne
 8008026:	81a3      	strhne	r3, [r4, #12]
 8008028:	bd10      	pop	{r4, pc}

0800802a <__sclose>:
 800802a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802e:	f000 b8d3 	b.w	80081d8 <_close_r>
	...

08008034 <__swbuf_r>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	460e      	mov	r6, r1
 8008038:	4614      	mov	r4, r2
 800803a:	4605      	mov	r5, r0
 800803c:	b118      	cbz	r0, 8008046 <__swbuf_r+0x12>
 800803e:	6983      	ldr	r3, [r0, #24]
 8008040:	b90b      	cbnz	r3, 8008046 <__swbuf_r+0x12>
 8008042:	f7ff fbbb 	bl	80077bc <__sinit>
 8008046:	4b21      	ldr	r3, [pc, #132]	; (80080cc <__swbuf_r+0x98>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d12b      	bne.n	80080a4 <__swbuf_r+0x70>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	69a3      	ldr	r3, [r4, #24]
 8008050:	60a3      	str	r3, [r4, #8]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	071a      	lsls	r2, r3, #28
 8008056:	d52f      	bpl.n	80080b8 <__swbuf_r+0x84>
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	b36b      	cbz	r3, 80080b8 <__swbuf_r+0x84>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	1ac0      	subs	r0, r0, r3
 8008062:	6963      	ldr	r3, [r4, #20]
 8008064:	b2f6      	uxtb	r6, r6
 8008066:	4283      	cmp	r3, r0
 8008068:	4637      	mov	r7, r6
 800806a:	dc04      	bgt.n	8008076 <__swbuf_r+0x42>
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f948 	bl	8008304 <_fflush_r>
 8008074:	bb30      	cbnz	r0, 80080c4 <__swbuf_r+0x90>
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	701e      	strb	r6, [r3, #0]
 8008084:	6963      	ldr	r3, [r4, #20]
 8008086:	3001      	adds	r0, #1
 8008088:	4283      	cmp	r3, r0
 800808a:	d004      	beq.n	8008096 <__swbuf_r+0x62>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	07db      	lsls	r3, r3, #31
 8008090:	d506      	bpl.n	80080a0 <__swbuf_r+0x6c>
 8008092:	2e0a      	cmp	r6, #10
 8008094:	d104      	bne.n	80080a0 <__swbuf_r+0x6c>
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f933 	bl	8008304 <_fflush_r>
 800809e:	b988      	cbnz	r0, 80080c4 <__swbuf_r+0x90>
 80080a0:	4638      	mov	r0, r7
 80080a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <__swbuf_r+0x9c>)
 80080a6:	429c      	cmp	r4, r3
 80080a8:	d101      	bne.n	80080ae <__swbuf_r+0x7a>
 80080aa:	68ac      	ldr	r4, [r5, #8]
 80080ac:	e7cf      	b.n	800804e <__swbuf_r+0x1a>
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <__swbuf_r+0xa0>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	bf08      	it	eq
 80080b4:	68ec      	ldreq	r4, [r5, #12]
 80080b6:	e7ca      	b.n	800804e <__swbuf_r+0x1a>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f81e 	bl	80080fc <__swsetup_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d0cb      	beq.n	800805c <__swbuf_r+0x28>
 80080c4:	f04f 37ff 	mov.w	r7, #4294967295
 80080c8:	e7ea      	b.n	80080a0 <__swbuf_r+0x6c>
 80080ca:	bf00      	nop
 80080cc:	0800860c 	.word	0x0800860c
 80080d0:	0800862c 	.word	0x0800862c
 80080d4:	080085ec 	.word	0x080085ec

080080d8 <_write_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_write_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7f9 fd5e 	bl	8001ba8 <_write>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_write_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_write_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	200004fc 	.word	0x200004fc

080080fc <__swsetup_r>:
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <__swsetup_r+0xcc>)
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	4606      	mov	r6, r0
 8008104:	460c      	mov	r4, r1
 8008106:	b125      	cbz	r5, 8008112 <__swsetup_r+0x16>
 8008108:	69ab      	ldr	r3, [r5, #24]
 800810a:	b913      	cbnz	r3, 8008112 <__swsetup_r+0x16>
 800810c:	4628      	mov	r0, r5
 800810e:	f7ff fb55 	bl	80077bc <__sinit>
 8008112:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <__swsetup_r+0xd0>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d10f      	bne.n	8008138 <__swsetup_r+0x3c>
 8008118:	686c      	ldr	r4, [r5, #4]
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008120:	0719      	lsls	r1, r3, #28
 8008122:	d42c      	bmi.n	800817e <__swsetup_r+0x82>
 8008124:	06dd      	lsls	r5, r3, #27
 8008126:	d411      	bmi.n	800814c <__swsetup_r+0x50>
 8008128:	2309      	movs	r3, #9
 800812a:	6033      	str	r3, [r6, #0]
 800812c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	e03e      	b.n	80081b6 <__swsetup_r+0xba>
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <__swsetup_r+0xd4>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d101      	bne.n	8008142 <__swsetup_r+0x46>
 800813e:	68ac      	ldr	r4, [r5, #8]
 8008140:	e7eb      	b.n	800811a <__swsetup_r+0x1e>
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <__swsetup_r+0xd8>)
 8008144:	429c      	cmp	r4, r3
 8008146:	bf08      	it	eq
 8008148:	68ec      	ldreq	r4, [r5, #12]
 800814a:	e7e6      	b.n	800811a <__swsetup_r+0x1e>
 800814c:	0758      	lsls	r0, r3, #29
 800814e:	d512      	bpl.n	8008176 <__swsetup_r+0x7a>
 8008150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008152:	b141      	cbz	r1, 8008166 <__swsetup_r+0x6a>
 8008154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <__swsetup_r+0x66>
 800815c:	4630      	mov	r0, r6
 800815e:	f000 f98f 	bl	8008480 <_free_r>
 8008162:	2300      	movs	r3, #0
 8008164:	6363      	str	r3, [r4, #52]	; 0x34
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b94b      	cbnz	r3, 8008196 <__swsetup_r+0x9a>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818c:	d003      	beq.n	8008196 <__swsetup_r+0x9a>
 800818e:	4621      	mov	r1, r4
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f929 	bl	80083e8 <__smakebuf_r>
 8008196:	89a0      	ldrh	r0, [r4, #12]
 8008198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800819c:	f010 0301 	ands.w	r3, r0, #1
 80081a0:	d00a      	beq.n	80081b8 <__swsetup_r+0xbc>
 80081a2:	2300      	movs	r3, #0
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	6963      	ldr	r3, [r4, #20]
 80081a8:	425b      	negs	r3, r3
 80081aa:	61a3      	str	r3, [r4, #24]
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	b943      	cbnz	r3, 80081c2 <__swsetup_r+0xc6>
 80081b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081b4:	d1ba      	bne.n	800812c <__swsetup_r+0x30>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	0781      	lsls	r1, r0, #30
 80081ba:	bf58      	it	pl
 80081bc:	6963      	ldrpl	r3, [r4, #20]
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	e7f4      	b.n	80081ac <__swsetup_r+0xb0>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7f7      	b.n	80081b6 <__swsetup_r+0xba>
 80081c6:	bf00      	nop
 80081c8:	2000000c 	.word	0x2000000c
 80081cc:	0800860c 	.word	0x0800860c
 80081d0:	0800862c 	.word	0x0800862c
 80081d4:	080085ec 	.word	0x080085ec

080081d8 <_close_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_close_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 f8bb 	bl	800135e <_close>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_close_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_close_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200004fc 	.word	0x200004fc

080081f8 <__sflush_r>:
 80081f8:	898a      	ldrh	r2, [r1, #12]
 80081fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	4605      	mov	r5, r0
 8008200:	0710      	lsls	r0, r2, #28
 8008202:	460c      	mov	r4, r1
 8008204:	d458      	bmi.n	80082b8 <__sflush_r+0xc0>
 8008206:	684b      	ldr	r3, [r1, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc05      	bgt.n	8008218 <__sflush_r+0x20>
 800820c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	dc02      	bgt.n	8008218 <__sflush_r+0x20>
 8008212:	2000      	movs	r0, #0
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800821a:	2e00      	cmp	r6, #0
 800821c:	d0f9      	beq.n	8008212 <__sflush_r+0x1a>
 800821e:	2300      	movs	r3, #0
 8008220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008224:	682f      	ldr	r7, [r5, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	d032      	beq.n	8008290 <__sflush_r+0x98>
 800822a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	075a      	lsls	r2, r3, #29
 8008230:	d505      	bpl.n	800823e <__sflush_r+0x46>
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008238:	b10b      	cbz	r3, 800823e <__sflush_r+0x46>
 800823a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800823c:	1ac0      	subs	r0, r0, r3
 800823e:	2300      	movs	r3, #0
 8008240:	4602      	mov	r2, r0
 8008242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008244:	6a21      	ldr	r1, [r4, #32]
 8008246:	4628      	mov	r0, r5
 8008248:	47b0      	blx	r6
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	d106      	bne.n	800825e <__sflush_r+0x66>
 8008250:	6829      	ldr	r1, [r5, #0]
 8008252:	291d      	cmp	r1, #29
 8008254:	d82c      	bhi.n	80082b0 <__sflush_r+0xb8>
 8008256:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <__sflush_r+0x108>)
 8008258:	40ca      	lsrs	r2, r1
 800825a:	07d6      	lsls	r6, r2, #31
 800825c:	d528      	bpl.n	80082b0 <__sflush_r+0xb8>
 800825e:	2200      	movs	r2, #0
 8008260:	6062      	str	r2, [r4, #4]
 8008262:	04d9      	lsls	r1, r3, #19
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	d504      	bpl.n	8008274 <__sflush_r+0x7c>
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	d101      	bne.n	8008272 <__sflush_r+0x7a>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b903      	cbnz	r3, 8008274 <__sflush_r+0x7c>
 8008272:	6560      	str	r0, [r4, #84]	; 0x54
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	602f      	str	r7, [r5, #0]
 8008278:	2900      	cmp	r1, #0
 800827a:	d0ca      	beq.n	8008212 <__sflush_r+0x1a>
 800827c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__sflush_r+0x92>
 8008284:	4628      	mov	r0, r5
 8008286:	f000 f8fb 	bl	8008480 <_free_r>
 800828a:	2000      	movs	r0, #0
 800828c:	6360      	str	r0, [r4, #52]	; 0x34
 800828e:	e7c1      	b.n	8008214 <__sflush_r+0x1c>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	2301      	movs	r3, #1
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	1c41      	adds	r1, r0, #1
 800829a:	d1c7      	bne.n	800822c <__sflush_r+0x34>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c4      	beq.n	800822c <__sflush_r+0x34>
 80082a2:	2b1d      	cmp	r3, #29
 80082a4:	d001      	beq.n	80082aa <__sflush_r+0xb2>
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d101      	bne.n	80082ae <__sflush_r+0xb6>
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	e7b1      	b.n	8008212 <__sflush_r+0x1a>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7ad      	b.n	8008214 <__sflush_r+0x1c>
 80082b8:	690f      	ldr	r7, [r1, #16]
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d0a9      	beq.n	8008212 <__sflush_r+0x1a>
 80082be:	0793      	lsls	r3, r2, #30
 80082c0:	680e      	ldr	r6, [r1, #0]
 80082c2:	bf08      	it	eq
 80082c4:	694b      	ldreq	r3, [r1, #20]
 80082c6:	600f      	str	r7, [r1, #0]
 80082c8:	bf18      	it	ne
 80082ca:	2300      	movne	r3, #0
 80082cc:	eba6 0807 	sub.w	r8, r6, r7
 80082d0:	608b      	str	r3, [r1, #8]
 80082d2:	f1b8 0f00 	cmp.w	r8, #0
 80082d6:	dd9c      	ble.n	8008212 <__sflush_r+0x1a>
 80082d8:	6a21      	ldr	r1, [r4, #32]
 80082da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082dc:	4643      	mov	r3, r8
 80082de:	463a      	mov	r2, r7
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b0      	blx	r6
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dc06      	bgt.n	80082f6 <__sflush_r+0xfe>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	e78e      	b.n	8008214 <__sflush_r+0x1c>
 80082f6:	4407      	add	r7, r0
 80082f8:	eba8 0800 	sub.w	r8, r8, r0
 80082fc:	e7e9      	b.n	80082d2 <__sflush_r+0xda>
 80082fe:	bf00      	nop
 8008300:	20400001 	.word	0x20400001

08008304 <_fflush_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	4605      	mov	r5, r0
 800830a:	460c      	mov	r4, r1
 800830c:	b913      	cbnz	r3, 8008314 <_fflush_r+0x10>
 800830e:	2500      	movs	r5, #0
 8008310:	4628      	mov	r0, r5
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	b118      	cbz	r0, 800831e <_fflush_r+0x1a>
 8008316:	6983      	ldr	r3, [r0, #24]
 8008318:	b90b      	cbnz	r3, 800831e <_fflush_r+0x1a>
 800831a:	f7ff fa4f 	bl	80077bc <__sinit>
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <_fflush_r+0x6c>)
 8008320:	429c      	cmp	r4, r3
 8008322:	d11b      	bne.n	800835c <_fflush_r+0x58>
 8008324:	686c      	ldr	r4, [r5, #4]
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0ef      	beq.n	800830e <_fflush_r+0xa>
 800832e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008330:	07d0      	lsls	r0, r2, #31
 8008332:	d404      	bmi.n	800833e <_fflush_r+0x3a>
 8008334:	0599      	lsls	r1, r3, #22
 8008336:	d402      	bmi.n	800833e <_fflush_r+0x3a>
 8008338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800833a:	f7ff fadd 	bl	80078f8 <__retarget_lock_acquire_recursive>
 800833e:	4628      	mov	r0, r5
 8008340:	4621      	mov	r1, r4
 8008342:	f7ff ff59 	bl	80081f8 <__sflush_r>
 8008346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008348:	07da      	lsls	r2, r3, #31
 800834a:	4605      	mov	r5, r0
 800834c:	d4e0      	bmi.n	8008310 <_fflush_r+0xc>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	059b      	lsls	r3, r3, #22
 8008352:	d4dd      	bmi.n	8008310 <_fflush_r+0xc>
 8008354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008356:	f7ff fad0 	bl	80078fa <__retarget_lock_release_recursive>
 800835a:	e7d9      	b.n	8008310 <_fflush_r+0xc>
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <_fflush_r+0x70>)
 800835e:	429c      	cmp	r4, r3
 8008360:	d101      	bne.n	8008366 <_fflush_r+0x62>
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	e7df      	b.n	8008326 <_fflush_r+0x22>
 8008366:	4b04      	ldr	r3, [pc, #16]	; (8008378 <_fflush_r+0x74>)
 8008368:	429c      	cmp	r4, r3
 800836a:	bf08      	it	eq
 800836c:	68ec      	ldreq	r4, [r5, #12]
 800836e:	e7da      	b.n	8008326 <_fflush_r+0x22>
 8008370:	0800860c 	.word	0x0800860c
 8008374:	0800862c 	.word	0x0800862c
 8008378:	080085ec 	.word	0x080085ec

0800837c <_lseek_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	; (800839c <_lseek_r+0x20>)
 8008380:	4604      	mov	r4, r0
 8008382:	4608      	mov	r0, r1
 8008384:	4611      	mov	r1, r2
 8008386:	2200      	movs	r2, #0
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f7f9 f80e 	bl	80013ac <_lseek>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_lseek_r+0x1e>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_lseek_r+0x1e>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200004fc 	.word	0x200004fc

080083a0 <__swhatbuf_r>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460e      	mov	r6, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	2900      	cmp	r1, #0
 80083aa:	b096      	sub	sp, #88	; 0x58
 80083ac:	4614      	mov	r4, r2
 80083ae:	461d      	mov	r5, r3
 80083b0:	da07      	bge.n	80083c2 <__swhatbuf_r+0x22>
 80083b2:	2300      	movs	r3, #0
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	89b3      	ldrh	r3, [r6, #12]
 80083b8:	061a      	lsls	r2, r3, #24
 80083ba:	d410      	bmi.n	80083de <__swhatbuf_r+0x3e>
 80083bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c0:	e00e      	b.n	80083e0 <__swhatbuf_r+0x40>
 80083c2:	466a      	mov	r2, sp
 80083c4:	f000 f8be 	bl	8008544 <_fstat_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	dbf2      	blt.n	80083b2 <__swhatbuf_r+0x12>
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083d6:	425a      	negs	r2, r3
 80083d8:	415a      	adcs	r2, r3
 80083da:	602a      	str	r2, [r5, #0]
 80083dc:	e7ee      	b.n	80083bc <__swhatbuf_r+0x1c>
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	2000      	movs	r0, #0
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	b016      	add	sp, #88	; 0x58
 80083e6:	bd70      	pop	{r4, r5, r6, pc}

080083e8 <__smakebuf_r>:
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ec:	079d      	lsls	r5, r3, #30
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	d507      	bpl.n	8008404 <__smakebuf_r+0x1c>
 80083f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	2301      	movs	r3, #1
 80083fe:	6163      	str	r3, [r4, #20]
 8008400:	b002      	add	sp, #8
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	ab01      	add	r3, sp, #4
 8008406:	466a      	mov	r2, sp
 8008408:	f7ff ffca 	bl	80083a0 <__swhatbuf_r>
 800840c:	9900      	ldr	r1, [sp, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fa73 	bl	80078fc <_malloc_r>
 8008416:	b948      	cbnz	r0, 800842c <__smakebuf_r+0x44>
 8008418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d4ef      	bmi.n	8008400 <__smakebuf_r+0x18>
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	e7e3      	b.n	80083f4 <__smakebuf_r+0xc>
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <__smakebuf_r+0x7c>)
 800842e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	6163      	str	r3, [r4, #20]
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	6120      	str	r0, [r4, #16]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x74>
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f88d 	bl	8008568 <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x74>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a0      	ldrh	r0, [r4, #12]
 800845e:	4305      	orrs	r5, r0
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cd      	b.n	8008400 <__smakebuf_r+0x18>
 8008464:	08007755 	.word	0x08007755

08008468 <__malloc_lock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_lock+0x8>)
 800846a:	f7ff ba45 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	200004f4 	.word	0x200004f4

08008474 <__malloc_unlock>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__malloc_unlock+0x8>)
 8008476:	f7ff ba40 	b.w	80078fa <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	200004f4 	.word	0x200004f4

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d048      	beq.n	8008518 <_free_r+0x98>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f7ff ffe7 	bl	8008468 <__malloc_lock>
 800849a:	4a20      	ldr	r2, [pc, #128]	; (800851c <_free_r+0x9c>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	4615      	mov	r5, r2
 80084a2:	b933      	cbnz	r3, 80084b2 <_free_r+0x32>
 80084a4:	6063      	str	r3, [r4, #4]
 80084a6:	6014      	str	r4, [r2, #0]
 80084a8:	b003      	add	sp, #12
 80084aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ae:	f7ff bfe1 	b.w	8008474 <__malloc_unlock>
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	d90b      	bls.n	80084ce <_free_r+0x4e>
 80084b6:	6821      	ldr	r1, [r4, #0]
 80084b8:	1862      	adds	r2, r4, r1
 80084ba:	4293      	cmp	r3, r2
 80084bc:	bf04      	itt	eq
 80084be:	681a      	ldreq	r2, [r3, #0]
 80084c0:	685b      	ldreq	r3, [r3, #4]
 80084c2:	6063      	str	r3, [r4, #4]
 80084c4:	bf04      	itt	eq
 80084c6:	1852      	addeq	r2, r2, r1
 80084c8:	6022      	streq	r2, [r4, #0]
 80084ca:	602c      	str	r4, [r5, #0]
 80084cc:	e7ec      	b.n	80084a8 <_free_r+0x28>
 80084ce:	461a      	mov	r2, r3
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <_free_r+0x58>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d9fa      	bls.n	80084ce <_free_r+0x4e>
 80084d8:	6811      	ldr	r1, [r2, #0]
 80084da:	1855      	adds	r5, r2, r1
 80084dc:	42a5      	cmp	r5, r4
 80084de:	d10b      	bne.n	80084f8 <_free_r+0x78>
 80084e0:	6824      	ldr	r4, [r4, #0]
 80084e2:	4421      	add	r1, r4
 80084e4:	1854      	adds	r4, r2, r1
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	d1dd      	bne.n	80084a8 <_free_r+0x28>
 80084ec:	681c      	ldr	r4, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	4421      	add	r1, r4
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	e7d7      	b.n	80084a8 <_free_r+0x28>
 80084f8:	d902      	bls.n	8008500 <_free_r+0x80>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e7d3      	b.n	80084a8 <_free_r+0x28>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf04      	itt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bf04      	itt	eq
 8008510:	1949      	addeq	r1, r1, r5
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6054      	str	r4, [r2, #4]
 8008516:	e7c7      	b.n	80084a8 <_free_r+0x28>
 8008518:	b003      	add	sp, #12
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	20000098 	.word	0x20000098

08008520 <_read_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d07      	ldr	r5, [pc, #28]	; (8008540 <_read_r+0x20>)
 8008524:	4604      	mov	r4, r0
 8008526:	4608      	mov	r0, r1
 8008528:	4611      	mov	r1, r2
 800852a:	2200      	movs	r2, #0
 800852c:	602a      	str	r2, [r5, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	f7f8 fef8 	bl	8001324 <_read>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_read_r+0x1e>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_read_r+0x1e>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	200004fc 	.word	0x200004fc

08008544 <_fstat_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4d07      	ldr	r5, [pc, #28]	; (8008564 <_fstat_r+0x20>)
 8008548:	2300      	movs	r3, #0
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	4611      	mov	r1, r2
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f7f8 ff10 	bl	8001376 <_fstat>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	d102      	bne.n	8008560 <_fstat_r+0x1c>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	b103      	cbz	r3, 8008560 <_fstat_r+0x1c>
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	bd38      	pop	{r3, r4, r5, pc}
 8008562:	bf00      	nop
 8008564:	200004fc 	.word	0x200004fc

08008568 <_isatty_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d06      	ldr	r5, [pc, #24]	; (8008584 <_isatty_r+0x1c>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f8 ff0f 	bl	8001396 <_isatty>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_isatty_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_isatty_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200004fc 	.word	0x200004fc

08008588 <_init>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr

08008594 <_fini>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr
