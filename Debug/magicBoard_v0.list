
magicBoard_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a730  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b11c  0800b11c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b124  0800b124  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b128  0800b128  0001b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018c0  20000078  0800b1a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001938  0800b1a4  00021938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b089  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005768  00000000  00000000  0004b12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  00050898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  000526f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe89  00000000  00000000  000542c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ebc  00000000  00000000  00084151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011474e  00000000  00000000  000ac00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c075b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083cc  00000000  00000000  001c07b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a918 	.word	0x0800a918

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800a918 	.word	0x0800a918

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SPI1_NCSactivate>:
		uint32_t* val);

sys_state_t systemGlobalState = {0};

uint32_t SPI1_NCSactivate(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <SPI1_NCSactivate+0x14>)
 80005f2:	f003 fb0f 	bl	8003c14 <HAL_GPIO_WritePin>
	return 0u;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020400 	.word	0x40020400

08000600 <SPI1_NCSdeactivate>:

uint32_t SPI1_NCSdeactivate(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <SPI1_NCSdeactivate+0x14>)
 800060a:	f003 fb03 	bl	8003c14 <HAL_GPIO_WritePin>
	return 0u;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020400 	.word	0x40020400

08000618 <EEPROM_WriteOperation>:

uint32_t EEPROM_WriteOperation(uint8_t *pDataTx, uint16_t Size)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	if (NULL == pDataTx)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <EEPROM_WriteOperation+0x18>
	{
		return (uint32_t)(-1);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e007      	b.n	8000640 <EEPROM_WriteOperation+0x28>
	}

	return (uint32_t)HAL_SPI_Transmit(&hspi3, pDataTx, Size, HAL_MAX_DELAY);
 8000630:	887a      	ldrh	r2, [r7, #2]
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <EEPROM_WriteOperation+0x30>)
 800063a:	f004 fe10 	bl	800525e <HAL_SPI_Transmit>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200014d8 	.word	0x200014d8

0800064c <EEPROM_ReadOperation>:

uint32_t EEPROM_ReadOperation(uint8_t* pDataRx, int16_t Size)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	if (NULL == pDataRx)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <EEPROM_ReadOperation+0x18>
	{
		return (uint32_t)(-1);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e007      	b.n	8000674 <EEPROM_ReadOperation+0x28>
	}

	return (uint32_t)HAL_SPI_Receive(&hspi3, pDataRx, Size, HAL_MAX_DELAY);
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <EEPROM_ReadOperation+0x30>)
 800066e:	f004 ff64 	bl	800553a <HAL_SPI_Receive>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200014d8 	.word	0x200014d8

08000680 <EEPROM_ReadData>:
	return result;
}


uint32_t EEPROM_ReadData(uint32_t address, uint8_t *pData, uint16_t Size)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
	uint8_t startWrite[4];
	uint32_t result[5] = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

	if((address > EEPROM_STOP_ADDRESS) ||
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006a4:	d203      	bcs.n	80006ae <EEPROM_ReadData+0x2e>
			(address < EEPROM_START_ADDRESS) ||
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ac:	d902      	bls.n	80006b4 <EEPROM_ReadData+0x34>
			(Size > MAX_WRITE_AT_ONCE))
	{
		return (uint32_t)(-1);
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e03b      	b.n	800072c <EEPROM_ReadData+0xac>
	}

	startWrite[0] = EEPROM_READ;
 80006b4:	2303      	movs	r3, #3
 80006b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	startWrite[1] = (address & 0x00FF0000) >> 16;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	startWrite[2] = (address & 0x0000FF00) >> 8;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	startWrite[3] = (address & 0x000000FF);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	result[1] = SPI1_NCSactivate();
 80006d6:	f7ff ff87 	bl	80005e8 <SPI1_NCSactivate>
 80006da:	4603      	mov	r3, r0
 80006dc:	617b      	str	r3, [r7, #20]
	result[2] = EEPROM_WriteOperation(startWrite, 4);
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff97 	bl	8000618 <EEPROM_WriteOperation>
 80006ea:	4603      	mov	r3, r0
 80006ec:	61bb      	str	r3, [r7, #24]
	result[3] = EEPROM_ReadOperation(pData, Size);
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f7ff ffa9 	bl	800064c <EEPROM_ReadOperation>
 80006fa:	4603      	mov	r3, r0
 80006fc:	61fb      	str	r3, [r7, #28]
	result[4] = SPI1_NCSdeactivate();
 80006fe:	f7ff ff7f 	bl	8000600 <SPI1_NCSdeactivate>
 8000702:	4603      	mov	r3, r0
 8000704:	623b      	str	r3, [r7, #32]

	if (0 == result[0] && 0 == result[1] && 0 == result[2] && 0 == result[3] && 0 == result[4])
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10d      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10a      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d107      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <EEPROM_ReadData+0xa8>
		return 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	e001      	b.n	800072c <EEPROM_ReadData+0xac>
	else
		return (uint32_t)(-1);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295

}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f001 fbef 	bl	8001f78 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fdec 	bl	800137c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007a4:	230c      	movs	r3, #12
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f001 fc23 	bl	8002000 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 fddc 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000153c 	.word	0x2000153c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <HAL_ADC_MspInit+0xd0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d152      	bne.n	80008a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800082a:	2304      	movs	r3, #4
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481c      	ldr	r0, [pc, #112]	; (80008b0 <HAL_ADC_MspInit+0xd8>)
 800083e:	f003 f825 	bl	800388c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_ADC_MspInit+0xe0>)
 8000846:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800085c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000860:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800086c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000870:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000886:	f001 ff8d 	bl	80027a4 <HAL_DMA_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000890:	f000 fd74 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40012000 	.word	0x40012000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020800 	.word	0x40020800
 80008b4:	20001584 	.word	0x20001584
 80008b8:	40026410 	.word	0x40026410

080008bc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_DAC_Init+0x4c>)
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_DAC_Init+0x50>)
 80008ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_DAC_Init+0x4c>)
 80008d2:	f001 fef6 	bl	80026c2 <HAL_DAC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008dc:	f000 fd4e 	bl	800137c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_DAC_Init+0x4c>)
 80008f0:	f001 ff09 	bl	8002706 <HAL_DAC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 fd3f 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200015e4 	.word	0x200015e4
 800090c:	40007400 	.word	0x40007400

08000910 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a15      	ldr	r2, [pc, #84]	; (8000984 <HAL_DAC_MspInit+0x74>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d123      	bne.n	800097a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_DAC_MspInit+0x78>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_DAC_MspInit+0x7c>)
 8000976:	f002 ff89 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40007400 	.word	0x40007400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_DMA_Init+0x60>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_DMA_Init+0x60>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_DMA_Init+0x60>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_DMA_Init+0x60>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <MX_DMA_Init+0x60>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_DMA_Init+0x60>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200e      	movs	r0, #14
 80009cc:	f001 fe43 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fe5c 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2038      	movs	r0, #56	; 0x38
 80009dc:	f001 fe3b 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009e0:	2038      	movs	r0, #56	; 0x38
 80009e2:	f001 fe54 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ETH_Init+0x78>)
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <MX_ETH_Init+0x7c>)
 80009fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a12:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a42:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a56:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a5a:	f002 faad 	bl	8002fb8 <HAL_ETH_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000a64:	f000 fc8a 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200015f8 	.word	0x200015f8
 8000a70:	40028000 	.word	0x40028000
 8000a74:	20000094 	.word	0x20000094

08000a78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 8096 	bne.w	8000bc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b44:	2332      	movs	r3, #50	; 0x32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <HAL_ETH_MspInit+0x160>)
 8000b60:	f002 fe94 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b64:	2386      	movs	r3, #134	; 0x86
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_ETH_MspInit+0x164>)
 8000b80:	f002 fe84 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <HAL_ETH_MspInit+0x168>)
 8000ba2:	f002 fe73 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <HAL_ETH_MspInit+0x16c>)
 8000bc4:	f002 fe62 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800

08000be8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a91      	ldr	r2, [pc, #580]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b8c      	ldr	r3, [pc, #560]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a8b      	ldr	r2, [pc, #556]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a7f      	ldr	r2, [pc, #508]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a79      	ldr	r2, [pc, #484]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b77      	ldr	r3, [pc, #476]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a73      	ldr	r2, [pc, #460]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b71      	ldr	r3, [pc, #452]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6d      	ldr	r2, [pc, #436]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4862      	ldr	r0, [pc, #392]	; (8000e4c <MX_GPIO_Init+0x264>)
 8000cc4:	f002 ffa6 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_NCS2_Pin|SPI3_NCS1_Pin|EEPROM_CS_Pin|NRF2_PWR_Pin
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f240 3126 	movw	r1, #806	; 0x326
 8000cce:	4860      	ldr	r0, [pc, #384]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000cd0:	f002 ffa0 	bl	8003c14 <HAL_GPIO_WritePin>
                          |NRF1_PWR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	485e      	ldr	r0, [pc, #376]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000cdc:	f002 ff9a 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP_RST_Pin|RDA_PWR_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f248 0101 	movw	r1, #32769	; 0x8001
 8000ce6:	485b      	ldr	r0, [pc, #364]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000ce8:	f002 ff94 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000cf2:	4857      	ldr	r0, [pc, #348]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000cf4:	f002 ff8e 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4856      	ldr	r0, [pc, #344]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000cfe:	f002 ff89 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4855      	ldr	r0, [pc, #340]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000d08:	f002 ff84 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	484e      	ldr	r0, [pc, #312]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000d24:	f002 fdb2 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF1_CE_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF1_CE_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4843      	ldr	r0, [pc, #268]	; (8000e4c <MX_GPIO_Init+0x264>)
 8000d40:	f002 fda4 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI3_NCS2_Pin|SPI3_NCS1_Pin|LD3_Pin|EEPROM_CS_Pin
 8000d44:	f244 33a6 	movw	r3, #17318	; 0x43a6
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin|NRF2_PWR_Pin|NRF1_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	483c      	ldr	r0, [pc, #240]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000d5e:	f002 fd95 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_IO0_Pin|ESP_IO2_Pin;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4837      	ldr	r0, [pc, #220]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000d78:	f002 fd88 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin|ESP_RST_Pin|RDA_PWR_Pin;
 8000d7c:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	482f      	ldr	r0, [pc, #188]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000d96:	f002 fd79 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF2_IRQ_Pin|NRF1_IRQ_Pin;
 8000d9a:	f248 0340 	movw	r3, #32832	; 0x8040
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4828      	ldr	r0, [pc, #160]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000db0:	f002 fd6c 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000dcc:	f002 fd5e 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000de4:	f002 fd52 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF2_CE_Pin;
 8000de8:	2340      	movs	r3, #64	; 0x40
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF2_CE_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000e00:	f002 fd44 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e16:	230a      	movs	r3, #10
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <MX_GPIO_Init+0x278>)
 8000e22:	f002 fd33 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_GPIO_Init+0x278>)
 8000e3c:	f002 fd26 	bl	800388c <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000

08000e64 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C2_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ea0:	f002 fed2 	bl	8003c48 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 fa67 	bl	800137c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000eb2:	f002 ff59 	bl	8003d68 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 fa5e 	bl	800137c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ec4:	f002 ff9b 	bl	8003dfe <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fa55 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000168c 	.word	0x2000168c
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	20303e5d 	.word	0x20303e5d

08000ee4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C4_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C4_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f20:	f002 fe92 	bl	8003c48 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 fa27 	bl	800137c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f32:	f002 ff19 	bl	8003d68 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fa1e 	bl	800137c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f44:	f002 ff5b 	bl	8003dfe <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fa15 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20001640 	.word	0x20001640
 8000f5c:	40006000 	.word	0x40006000
 8000f60:	20303e5d 	.word	0x20303e5d

08000f64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b0      	sub	sp, #192	; 0xc0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2290      	movs	r2, #144	; 0x90
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fb2f 	bl	80095e8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <HAL_I2C_MspInit+0x13c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d13e      	bne.n	8001012 <HAL_I2C_MspInit+0xae>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fc87 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fb0:	f000 f9e4 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd4:	2312      	movs	r3, #18
 8000fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482d      	ldr	r0, [pc, #180]	; (80010a8 <HAL_I2C_MspInit+0x144>)
 8000ff4:	f002 fc4a 	bl	800388c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001010:	e042      	b.n	8001098 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_I2C_MspInit+0x148>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d13d      	bne.n	8001098 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800101c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001020:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fc43 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001038:	f000 f9a0 	bl	800137c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001054:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800106e:	2304      	movs	r3, #4
 8001070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_I2C_MspInit+0x14c>)
 800107c:	f002 fc06 	bl	800388c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	bf00      	nop
 800109a:	37c0      	adds	r7, #192	; 0xc0
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005800 	.word	0x40005800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40006000 	.word	0x40006000
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0a8      	sub	sp, #160	; 0xa0
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t nrf1_tx[33];
  uint8_t nrf1_rx[33] = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80010be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c2:	221d      	movs	r2, #29
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 fa8e 	bl	80095e8 <memset>
  uint8_t nrf2_tx[33];
  uint8_t nrf2_rx[33] = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	221d      	movs	r2, #29
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 fa85 	bl	80095e8 <memset>
  uint8_t eepromData[9] = {0};
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fec3 	bl	8001e76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f8d2 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f7ff fd78 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 80010f8:	f7ff fc7c 	bl	80009f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010fc:	f000 fd64 	bl	8001bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001100:	f000 fe88 	bl	8001e14 <MX_USB_OTG_FS_USB_Init>
  MX_DAC_Init();
 8001104:	f7ff fbda 	bl	80008bc <MX_DAC_Init>
  MX_SPI3_Init();
 8001108:	f000 f93e 	bl	8001388 <MX_SPI3_Init>
  MX_TIM3_Init();
 800110c:	f000 fb46 	bl	800179c <MX_TIM3_Init>
  MX_DMA_Init();
 8001110:	f7ff fc3e 	bl	8000990 <MX_DMA_Init>
  MX_UART7_Init();
 8001114:	f000 fd28 	bl	8001b68 <MX_UART7_Init>
  MX_TIM2_Init();
 8001118:	f000 fabe 	bl	8001698 <MX_TIM2_Init>
  MX_I2C2_Init();
 800111c:	f7ff fea2 	bl	8000e64 <MX_I2C2_Init>
  MX_I2C4_Init();
 8001120:	f7ff fee0 	bl	8000ee4 <MX_I2C4_Init>
  MX_ADC1_Init();
 8001124:	f7ff fb06 	bl	8000734 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001128:	f000 fbba 	bl	80018a0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */


  ESP_HTTPinit();
 800112c:	f007 f9a4 	bl	8008478 <ESP_HTTPinit>

  EEPROM_ReadData(0, eepromData, 8);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2208      	movs	r2, #8
 8001134:	4619      	mov	r1, r3
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff faa2 	bl	8000680 <EEPROM_ReadData>
  printf((char*)eepromData);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fa5a 	bl	80095f8 <iprintf>

  NRF_powerDown();
 8001144:	f007 fd7f 	bl	8008c46 <NRF_powerDown>
  NRF_powerDown_B();
 8001148:	f008 f826 	bl	8009198 <NRF_powerDown_B>

  HAL_Delay(500);
 800114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001150:	f000 feee 	bl	8001f30 <HAL_Delay>

  NRF_powerUp();
 8001154:	f007 fd71 	bl	8008c3a <NRF_powerUp>
  NRF_powerUp_B();
 8001158:	f008 f818 	bl	800918c <NRF_powerUp_B>

  HAL_Delay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f000 fee6 	bl	8001f30 <HAL_Delay>

  printf("NRF1: 0x%02lx\n", NRF_powerCycle(HAL_Delay));
 8001164:	4846      	ldr	r0, [pc, #280]	; (8001280 <main+0x1cc>)
 8001166:	f007 fdd0 	bl	8008d0a <NRF_powerCycle>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	4845      	ldr	r0, [pc, #276]	; (8001284 <main+0x1d0>)
 8001170:	f008 fa42 	bl	80095f8 <iprintf>
  printf("NRF2: 0x%02lx\n", NRF_powerCycle_B(HAL_Delay));
 8001174:	4842      	ldr	r0, [pc, #264]	; (8001280 <main+0x1cc>)
 8001176:	f008 f871 	bl	800925c <NRF_powerCycle_B>
 800117a:	4603      	mov	r3, r0
 800117c:	4619      	mov	r1, r3
 800117e:	4842      	ldr	r0, [pc, #264]	; (8001288 <main+0x1d4>)
 8001180:	f008 fa3a 	bl	80095f8 <iprintf>

  NRF_configure(true);
 8001184:	2001      	movs	r0, #1
 8001186:	f007 fb4b 	bl	8008820 <NRF_configure>
  NRF_configure_B(false);
 800118a:	2000      	movs	r0, #0
 800118c:	f007 fdec 	bl	8008d68 <NRF_configure_B>

  while(1)
  {
	  sprintf((char*)nrf1_tx, "%032ld", HAL_GetTick());
 8001190:	f000 fec2 	bl	8001f18 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800119a:	493c      	ldr	r1, [pc, #240]	; (800128c <main+0x1d8>)
 800119c:	4618      	mov	r0, r3
 800119e:	f008 fab9 	bl	8009714 <siprintf>
	  sprintf((char*)nrf2_tx, "%032ld", 0x7FFFFFFF - HAL_GetTick());
 80011a2:	f000 feb9 	bl	8001f18 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80011b2:	461a      	mov	r2, r3
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <main+0x1d8>)
 80011b6:	f008 faad 	bl	8009714 <siprintf>

	  NRF_setW_TX_PAYLOAD(nrf1_tx, 32);
 80011ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011be:	2120      	movs	r1, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 fcc7 	bl	8008b54 <NRF_setW_TX_PAYLOAD>
	  NRF_set_W_ACK_PAYLOAD_B(0, nrf2_tx, 32);
 80011c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ca:	2220      	movs	r2, #32
 80011cc:	4619      	mov	r1, r3
 80011ce:	2000      	movs	r0, #0
 80011d0:	f007 ff8e 	bl	80090f0 <NRF_set_W_ACK_PAYLOAD_B>

	  NRF_CEactivate_B();
 80011d4:	f007 ffce 	bl	8009174 <NRF_CEactivate_B>
	  NRF_CEactivate();
 80011d8:	f007 fd23 	bl	8008c22 <NRF_CEactivate>
	  HAL_Delay(5);
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fea7 	bl	8001f30 <HAL_Delay>
	  NRF_CEdeactivate_B();
 80011e2:	f007 ffcd 	bl	8009180 <NRF_CEdeactivate_B>
	  NRF_CEdeactivate();
 80011e6:	f007 fd22 	bl	8008c2e <NRF_CEdeactivate>

	  if(NRF_getIRQ())
 80011ea:	f007 fd13 	bl	8008c14 <NRF_getIRQ>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <main+0x14c>
	  {
		  printf("NRF1 IRQ\n");
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <main+0x1dc>)
 80011f6:	f008 fa85 	bl	8009704 <puts>
		  HAL_Delay(50);
 80011fa:	2032      	movs	r0, #50	; 0x32
 80011fc:	f000 fe98 	bl	8001f30 <HAL_Delay>
	  }

	  if(NRF_getIRQ_B())
 8001200:	f007 ffb1 	bl	8009166 <NRF_getIRQ_B>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <main+0x162>
	  {
		  printf("NRF2 IRQ\n");
 800120a:	4822      	ldr	r0, [pc, #136]	; (8001294 <main+0x1e0>)
 800120c:	f008 fa7a 	bl	8009704 <puts>
		  HAL_Delay(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f000 fe8d 	bl	8001f30 <HAL_Delay>
	  }

	  uint8_t lng1 = NRF_postProcess(0, nrf1_rx);
 8001216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800121a:	4619      	mov	r1, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f007 fd18 	bl	8008c52 <NRF_postProcess>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  uint8_t lng2 = NRF_postProcess_B(0, nrf2_rx);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f007 ffb8 	bl	80091a4 <NRF_postProcess_B>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e


	  if(lng1 && lng1 != (uint8_t)(-1))
 800123a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <main+0x1a6>
 8001242:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d007      	beq.n	800125a <main+0x1a6>
	  {
		  printf("%s\n", nrf1_rx);
 800124a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800124e:	4618      	mov	r0, r3
 8001250:	f008 fa58 	bl	8009704 <puts>
		  HAL_Delay(50);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f000 fe6b 	bl	8001f30 <HAL_Delay>
	  }
	  if(lng2 && lng2 != (uint8_t)(-1))
 800125a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <main+0x1c0>
 8001262:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d004      	beq.n	8001274 <main+0x1c0>
	  {
		  printf("%s\n", nrf2_rx);
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4618      	mov	r0, r3
 8001270:	f008 fa48 	bl	8009704 <puts>
	  }

	  HAL_Delay(500);
 8001274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001278:	f000 fe5a 	bl	8001f30 <HAL_Delay>
  {
 800127c:	e788      	b.n	8001190 <main+0xdc>
 800127e:	bf00      	nop
 8001280:	08001f31 	.word	0x08001f31
 8001284:	0800a930 	.word	0x0800a930
 8001288:	0800a940 	.word	0x0800a940
 800128c:	0800a950 	.word	0x0800a950
 8001290:	0800a958 	.word	0x0800a958
 8001294:	0800a964 	.word	0x0800a964

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2234      	movs	r2, #52	; 0x34
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 f99e 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012bc:	f002 fdec 	bl	8003e98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <SystemClock_Config+0xdc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <SystemClock_Config+0xdc>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <SystemClock_Config+0xdc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <SystemClock_Config+0xe0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <SystemClock_Config+0xe0>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <SystemClock_Config+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fe19 	bl	8003f58 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800132c:	f000 f826 	bl	800137c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001330:	f002 fdc2 	bl	8003eb8 <HAL_PWREx_EnableOverDrive>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800133a:	f000 f81f 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2103      	movs	r1, #3
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f8aa 	bl	80044b4 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001366:	f000 f809 	bl	800137c <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	; 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_SPI3_Init+0x74>)
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <MX_SPI3_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_SPI3_Init+0x74>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_SPI3_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_SPI3_Init+0x74>)
 80013a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_SPI3_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_SPI3_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_SPI3_Init+0x74>)
 80013b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_SPI3_Init+0x74>)
 80013be:	2210      	movs	r2, #16
 80013c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_SPI3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_SPI3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_SPI3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_SPI3_Init+0x74>)
 80013d6:	2207      	movs	r2, #7
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_SPI3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_SPI3_Init+0x74>)
 80013e2:	2208      	movs	r2, #8
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_SPI3_Init+0x74>)
 80013e8:	f003 fe8e 	bl	8005108 <HAL_SPI_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f7ff ffc3 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200014d8 	.word	0x200014d8
 8001400:	40003c00 	.word	0x40003c00

08001404 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_SPI_MspInit+0x7c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d128      	bne.n	8001478 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_SPI_MspInit+0x80>)
 800142c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_SPI_MspInit+0x80>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_SPI_MspInit+0x80>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001456:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001468:	2306      	movs	r3, #6
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_SPI_MspInit+0x84>)
 8001474:	f002 fa0a 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40003c00 	.word	0x40003c00
 8001484:	40023800 	.word	0x40023800
 8001488:	40020800 	.word	0x40020800

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x44>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x44>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x44>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x44>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x44>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 fce6 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA1_Stream3_IRQHandler+0x10>)
 800152e:	f001 fad9 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200018c4 	.word	0x200018c4

0800153c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream0_IRQHandler+0x10>)
 8001542:	f001 facf 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20001584 	.word	0x20001584

08001550 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <UART7_IRQHandler+0x10>)
 8001556:	f005 fd23 	bl	8006fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200017bc 	.word	0x200017bc

08001564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
	}

return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:
	}
	return len;
}

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c6:	605a      	str	r2, [r3, #4]
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_isatty>:

int _isatty(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f007 ff90 	bl	800955c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20080000 	.word	0x20080000
 8001668:	00000400 	.word	0x00000400
 800166c:	2000009c 	.word	0x2000009c
 8001670:	20001938 	.word	0x20001938

08001674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <MX_TIM2_Init+0x100>)
 80016cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <MX_TIM2_Init+0x100>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <MX_TIM2_Init+0x100>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <MX_TIM2_Init+0x100>)
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <MX_TIM2_Init+0x100>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <MX_TIM2_Init+0x100>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f2:	4829      	ldr	r0, [pc, #164]	; (8001798 <MX_TIM2_Init+0x100>)
 80016f4:	f004 fc68 	bl	8005fc8 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016fe:	f7ff fe3d 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170c:	4619      	mov	r1, r3
 800170e:	4822      	ldr	r0, [pc, #136]	; (8001798 <MX_TIM2_Init+0x100>)
 8001710:	f004 fe26 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800171a:	f7ff fe2f 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800171e:	481e      	ldr	r0, [pc, #120]	; (8001798 <MX_TIM2_Init+0x100>)
 8001720:	f004 fca9 	bl	8006076 <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800172a:	f7ff fe27 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <MX_TIM2_Init+0x100>)
 800173e:	f005 fa71 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001748:	f7ff fe18 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	; 0x60
 800174e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_TIM2_Init+0x100>)
 8001764:	f004 fce8 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800176e:	f7ff fe05 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2204      	movs	r2, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM2_Init+0x100>)
 800177a:	f004 fcdd 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001784:	f7ff fdfa 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM2_Init+0x100>)
 800178a:	f000 f931 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	; 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20001770 	.word	0x20001770

0800179c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <MX_TIM3_Init+0x100>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f4:	4828      	ldr	r0, [pc, #160]	; (8001898 <MX_TIM3_Init+0xfc>)
 80017f6:	f004 fbe7 	bl	8005fc8 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001800:	f7ff fdbc 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	4619      	mov	r1, r3
 8001810:	4821      	ldr	r0, [pc, #132]	; (8001898 <MX_TIM3_Init+0xfc>)
 8001812:	f004 fda5 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800181c:	f7ff fdae 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <MX_TIM3_Init+0xfc>)
 8001822:	f004 fc28 	bl	8006076 <HAL_TIM_PWM_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800182c:	f7ff fda6 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4816      	ldr	r0, [pc, #88]	; (8001898 <MX_TIM3_Init+0xfc>)
 8001840:	f005 f9f0 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800184a:	f7ff fd97 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184e:	2360      	movs	r3, #96	; 0x60
 8001850:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_TIM3_Init+0xfc>)
 8001866:	f004 fc67 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001870:	f7ff fd84 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	2204      	movs	r2, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM3_Init+0xfc>)
 800187c:	f004 fc5c 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001886:	f7ff fd79 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM3_Init+0xfc>)
 800188c:	f000 f8b0 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8001890:	bf00      	nop
 8001892:	3738      	adds	r7, #56	; 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200016d8 	.word	0x200016d8
 800189c:	40000400 	.word	0x40000400

080018a0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <MX_TIM9_Init+0xbc>)
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <MX_TIM9_Init+0xc0>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_TIM9_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_TIM9_Init+0xbc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_TIM9_Init+0xbc>)
 80018da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018de:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_TIM9_Init+0xbc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM9_Init+0xbc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80018ec:	481b      	ldr	r0, [pc, #108]	; (800195c <MX_TIM9_Init+0xbc>)
 80018ee:	f004 fb6b 	bl	8005fc8 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f7ff fd40 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	4619      	mov	r1, r3
 8001908:	4814      	ldr	r0, [pc, #80]	; (800195c <MX_TIM9_Init+0xbc>)
 800190a:	f004 fd29 	bl	8006360 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001914:	f7ff fd32 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <MX_TIM9_Init+0xbc>)
 800191a:	f004 fbac 	bl	8006076 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001924:	f7ff fd2a 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001928:	2360      	movs	r3, #96	; 0x60
 800192a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <MX_TIM9_Init+0xbc>)
 8001940:	f004 fbfa 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800194a:	f7ff fd17 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <MX_TIM9_Init+0xbc>)
 8001950:	f000 f84e 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20001724 	.word	0x20001724
 8001960:	40014000 	.word	0x40014000

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d10c      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800198e:	e022      	b.n	80019d6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_TIM_Base_MspInit+0x84>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10c      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	e010      	b.n	80019d6 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0x88>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_TIM_Base_MspInit+0x80>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40014000 	.word	0x40014000

080019f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d139      	bne.n	8001a86 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a4d      	ldr	r2, [pc, #308]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a47      	ldr	r2, [pc, #284]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	483c      	ldr	r0, [pc, #240]	; (8001b50 <HAL_TIM_MspPostInit+0x160>)
 8001a60:	f001 ff14 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a64:	2308      	movs	r3, #8
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a74:	2301      	movs	r3, #1
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4835      	ldr	r0, [pc, #212]	; (8001b54 <HAL_TIM_MspPostInit+0x164>)
 8001a80:	f001 ff04 	bl	800388c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001a84:	e05e      	b.n	8001b44 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_TIM_MspPostInit+0x168>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d138      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4820      	ldr	r0, [pc, #128]	; (8001b5c <HAL_TIM_MspPostInit+0x16c>)
 8001adc:	f001 fed6 	bl	800388c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4816      	ldr	r0, [pc, #88]	; (8001b54 <HAL_TIM_MspPostInit+0x164>)
 8001afc:	f001 fec6 	bl	800388c <HAL_GPIO_Init>
}
 8001b00:	e020      	b.n	8001b44 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM9)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_TIM_MspPostInit+0x170>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d11b      	bne.n	8001b44 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_TIM_MspPostInit+0x15c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b24:	2320      	movs	r3, #32
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b34:	2303      	movs	r3, #3
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_TIM_MspPostInit+0x174>)
 8001b40:	f001 fea4 	bl	800388c <HAL_GPIO_Init>
}
 8001b44:	bf00      	nop
 8001b46:	3730      	adds	r7, #48	; 0x30
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40021000 	.word	0x40021000

08001b68 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <MX_UART7_Init+0x5c>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_UART7_Init+0x58>)
 8001bac:	f005 f8c8 	bl	8006d40 <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f7ff fbe1 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200017bc 	.word	0x200017bc
 8001bc4:	40007800 	.word	0x40007800

08001bc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_USART3_UART_Init+0x5c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART3_UART_Init+0x58>)
 8001c0c:	f005 f898 	bl	8006d40 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c16:	f7ff fbb1 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20001840 	.word	0x20001840
 8001c24:	40004800 	.word	0x40004800

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b0      	sub	sp, #192	; 0xc0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2290      	movs	r2, #144	; 0x90
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f007 fccd 	bl	80095e8 <memset>
  if(uartHandle->Instance==UART7)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5e      	ldr	r2, [pc, #376]	; (8001dcc <HAL_UART_MspInit+0x1a4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d173      	bne.n	8001d40 <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fe26 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c72:	f7ff fb83 	bl	800137c <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c76:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ca6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4841      	ldr	r0, [pc, #260]	; (8001dd4 <HAL_UART_MspInit+0x1ac>)
 8001cce:	f001 fddd 	bl	800388c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001cd4:	4a41      	ldr	r2, [pc, #260]	; (8001ddc <HAL_UART_MspInit+0x1b4>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001cda:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001cde:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001d12:	4831      	ldr	r0, [pc, #196]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d14:	f000 fd46 	bl	80027a4 <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d1e:	f7ff fb2d 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d26:	671a      	str	r2, [r3, #112]	; 0x70
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_UART_MspInit+0x1b0>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2052      	movs	r0, #82	; 0x52
 8001d34:	f000 fc8f 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001d38:	2052      	movs	r0, #82	; 0x52
 8001d3a:	f000 fca8 	bl	800268e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d3e:	e041      	b.n	8001dc4 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <HAL_UART_MspInit+0x1b8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d13c      	bne.n	8001dc4 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fdad 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001d64:	f7ff fb0a 	bl	800137c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d72:	6413      	str	r3, [r2, #64]	; 0x40
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_UART_MspInit+0x1a8>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db2:	2307      	movs	r3, #7
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_UART_MspInit+0x1bc>)
 8001dc0:	f001 fd64 	bl	800388c <HAL_GPIO_Init>
}
 8001dc4:	bf00      	nop
 8001dc6:	37c0      	adds	r7, #192	; 0xc0
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40007800 	.word	0x40007800
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	200018c4 	.word	0x200018c4
 8001ddc:	40026058 	.word	0x40026058
 8001de0:	40004800 	.word	0x40004800
 8001de4:	40020c00 	.word	0x40020c00

08001de8 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <_write+0x28>)
 8001e00:	f004 ffec 	bl	8006ddc <HAL_UART_Transmit>
	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20001840 	.word	0x20001840

08001e14 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff fc11 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f007 fb89 	bl	8009568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff f92d 	bl	80010b4 <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e68:	0800b12c 	.word	0x0800b12c
  ldr r2, =_sbss
 8001e6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e70:	20001938 	.word	0x20001938

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>

08001e76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f000 fbe0 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f000 f805 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e86:	f7ff fb01 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fbfb 	bl	80026aa <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fbc3 	bl	8002656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20001924 	.word	0x20001924

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20001924 	.word	0x20001924

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e031      	b.n	8001ff2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fc1e 	bl	80007d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_ADC_Init+0x84>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f970 	bl	80022ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe2:	e001      	b.n	8001fe8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	ffffeefd 	.word	0xffffeefd

08002000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1c>
 8002018:	2302      	movs	r3, #2
 800201a:	e136      	b.n	800228a <HAL_ADC_ConfigChannel+0x28a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d93a      	bls.n	80020a2 <HAL_ADC_ConfigChannel+0xa2>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002034:	d035      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	3b1e      	subs	r3, #30
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a8d      	ldr	r2, [pc, #564]	; (8002298 <HAL_ADC_ConfigChannel+0x298>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10a      	bne.n	800207c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68d9      	ldr	r1, [r3, #12]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207a:	e035      	b.n	80020e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	4603      	mov	r3, r0
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4403      	add	r3, r0
 8002094:	3b1e      	subs	r3, #30
 8002096:	409a      	lsls	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a0:	e022      	b.n	80020e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6919      	ldr	r1, [r3, #16]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	2207      	movs	r2, #7
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4403      	add	r3, r0
 80020de:	409a      	lsls	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d824      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	3b05      	subs	r3, #5
 8002102:	221f      	movs	r2, #31
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43da      	mvns	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	400a      	ands	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
 8002138:	e04c      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d824      	bhi.n	800218c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b23      	subs	r3, #35	; 0x23
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b23      	subs	r3, #35	; 0x23
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
 800218a:	e023      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b41      	subs	r3, #65	; 0x41
 800219e:	221f      	movs	r2, #31
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43da      	mvns	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	400a      	ands	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	; 0x41
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_ADC_ConfigChannel+0x29c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1f4>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_ADC_ConfigChannel+0x29c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10f      	bne.n	800221e <HAL_ADC_ConfigChannel+0x21e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b12      	cmp	r3, #18
 8002204:	d10b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800220c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002210:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_ADC_ConfigChannel+0x29c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12b      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x280>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_ADC_ConfigChannel+0x298>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <HAL_ADC_ConfigChannel+0x23a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b11      	cmp	r3, #17
 8002238:	d122      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002240:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002244:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800224c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002250:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_ADC_ConfigChannel+0x298>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9a      	lsrs	r2, r3, #18
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002272:	e002      	b.n	800227a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b01      	subs	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	10000012 	.word	0x10000012
 800229c:	40012000 	.word	0x40012000
 80022a0:	40012300 	.word	0x40012300
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83

080022ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <ADC_Init+0x1ec>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a77      	ldr	r2, [pc, #476]	; (8002498 <ADC_Init+0x1ec>)
 80022ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <ADC_Init+0x1ec>)
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4973      	ldr	r1, [pc, #460]	; (8002498 <ADC_Init+0x1ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	021a      	lsls	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	4a58      	ldr	r2, [pc, #352]	; (800249c <ADC_Init+0x1f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800234e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e00f      	b.n	80023a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0202 	bic.w	r2, r2, #2
 80023b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	005a      	lsls	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	3b01      	subs	r3, #1
 8002400:	035a      	lsls	r2, r3, #13
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	e007      	b.n	800241c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	3b01      	subs	r3, #1
 8002438:	051a      	lsls	r2, r3, #20
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800245e:	025a      	lsls	r2, r3, #9
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	029a      	lsls	r2, r3, #10
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	0f000001 	.word	0x0f000001

080024a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <__NVIC_SetPriorityGrouping+0x40>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x40>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	05fa0000 	.word	0x05fa0000

080024e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db0b      	blt.n	800252e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <__NVIC_EnableIRQ+0x38>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f7ff ff8e 	bl	8002540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff29 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff3e 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff8e 	bl	8002594 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5d 	bl	8002540 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff31 	bl	8002504 <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e014      	b.n	80026fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe f913 	bl	8000910 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002706:	b480      	push	{r7}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	795b      	ldrb	r3, [r3, #5]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_DAC_ConfigChannel+0x18>
 800271a:	2302      	movs	r3, #2
 800271c:	e03c      	b.n	8002798 <HAL_DAC_ConfigChannel+0x92>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2202      	movs	r2, #2
 8002728:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	f640 72fe 	movw	r2, #4094	; 0xffe
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4013      	ands	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	22c0      	movs	r2, #192	; 0xc0
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fbb2 	bl	8001f18 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e099      	b.n	80028f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	e00f      	b.n	8002802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e2:	f7ff fb99 	bl	8001f18 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d908      	bls.n	8002802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e078      	b.n	80028f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e8      	bne.n	80027e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_DMA_Init+0x158>)
 800281c:	4013      	ands	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4313      	orrs	r3, r2
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0307 	bic.w	r3, r3, #7
 8002882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b04      	cmp	r3, #4
 8002894:	d117      	bne.n	80028c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb09 	bl	8002ec0 <DMA_CheckFifoParam>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028c2:	2301      	movs	r3, #1
 80028c4:	e016      	b.n	80028f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fac0 	bl	8002e54 <DMA_CalcBaseAndBitshift>
 80028d4:	4603      	mov	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	223f      	movs	r2, #63	; 0x3f
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	e010803f 	.word	0xe010803f

08002900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Start_IT+0x26>
 8002922:	2302      	movs	r3, #2
 8002924:	e048      	b.n	80029b8 <HAL_DMA_Start_IT+0xb8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d137      	bne.n	80029aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa52 	bl	8002df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	223f      	movs	r2, #63	; 0x3f
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0216 	orr.w	r2, r2, #22
 800296e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800297e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0208 	orr.w	r2, r2, #8
 8002996:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e005      	b.n	80029b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029ce:	f7ff faa3 	bl	8001f18 <HAL_GetTick>
 80029d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d008      	beq.n	80029f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e052      	b.n	8002a98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0216 	bic.w	r2, r2, #22
 8002a00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <HAL_DMA_Abort+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0208 	bic.w	r2, r2, #8
 8002a30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a42:	e013      	b.n	8002a6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a44:	f7ff fa68 	bl	8001f18 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d90c      	bls.n	8002a6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e015      	b.n	8002a98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e4      	bne.n	8002a44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	223f      	movs	r2, #63	; 0x3f
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00c      	b.n	8002ad8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002af0:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_DMA_IRQHandler+0x258>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a92      	ldr	r2, [pc, #584]	; (8002d40 <HAL_DMA_IRQHandler+0x25c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a9b      	lsrs	r3, r3, #10
 8002afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2208      	movs	r2, #8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2201      	movs	r2, #1
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d012      	beq.n	8002bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2204      	movs	r2, #4
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d043      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03c      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	2210      	movs	r2, #16
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d024      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
 8002c12:	e01f      	b.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e016      	b.n	8002c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0208 	bic.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	2220      	movs	r2, #32
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 808e 	beq.w	8002d82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8086 	beq.w	8002d82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d136      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0216 	bic.w	r2, r2, #22
 8002c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x1da>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0208 	bic.w	r2, r2, #8
 8002ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	223f      	movs	r2, #63	; 0x3f
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d07d      	beq.n	8002dee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
        }
        return;
 8002cfa:	e078      	b.n	8002dee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01c      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d030      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
 8002d28:	e02b      	b.n	8002d82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
 8002d3a:	e022      	b.n	8002d82 <HAL_DMA_IRQHandler+0x29e>
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0210 	bic.w	r2, r2, #16
 8002d60:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d032      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d022      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d307      	bcc.n	8002dca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f2      	bne.n	8002dae <HAL_DMA_IRQHandler+0x2ca>
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e000      	b.n	8002df0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dee:	bf00      	nop
    }
  }
}
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop

08002df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d108      	bne.n	8002e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e36:	e007      	b.n	8002e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3b10      	subs	r3, #16
 8002e64:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <DMA_CalcBaseAndBitshift+0x60>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d908      	bls.n	8002e94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <DMA_CalcBaseAndBitshift+0x68>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	1d1a      	adds	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	659a      	str	r2, [r3, #88]	; 0x58
 8002e92:	e006      	b.n	8002ea2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <DMA_CalcBaseAndBitshift+0x68>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	aaaaaaab 	.word	0xaaaaaaab
 8002eb8:	0800b07c 	.word	0x0800b07c
 8002ebc:	fffffc00 	.word	0xfffffc00

08002ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0x5a>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d856      	bhi.n	8002f8e <DMA_CheckFifoParam+0xce>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x28>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f0b 	.word	0x08002f0b
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f8f 	.word	0x08002f8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d046      	beq.n	8002f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e043      	b.n	8002f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f12:	d140      	bne.n	8002f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e03d      	b.n	8002f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d121      	bne.n	8002f68 <DMA_CheckFifoParam+0xa8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d837      	bhi.n	8002f9a <DMA_CheckFifoParam+0xda>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <DMA_CheckFifoParam+0x70>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f47 	.word	0x08002f47
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002f59 	.word	0x08002f59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e030      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d025      	beq.n	8002f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f56:	e022      	b.n	8002f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f60:	d11f      	bne.n	8002fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f66:	e01c      	b.n	8002fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d903      	bls.n	8002f76 <DMA_CheckFifoParam+0xb6>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d003      	beq.n	8002f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f74:	e018      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7a:	e015      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e00b      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e00a      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e008      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e006      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e004      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002fc8:	4ba9      	ldr	r3, [pc, #676]	; (8003270 <HAL_ETH_Init+0x2b8>)
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e181      	b.n	80032e2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd40 	bl	8000a78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff8:	4b9e      	ldr	r3, [pc, #632]	; (8003274 <HAL_ETH_Init+0x2bc>)
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	4a9d      	ldr	r2, [pc, #628]	; (8003274 <HAL_ETH_Init+0x2bc>)
 8002ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003002:	6453      	str	r3, [r2, #68]	; 0x44
 8003004:	4b9b      	ldr	r3, [pc, #620]	; (8003274 <HAL_ETH_Init+0x2bc>)
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003010:	4b99      	ldr	r3, [pc, #612]	; (8003278 <HAL_ETH_Init+0x2c0>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a98      	ldr	r2, [pc, #608]	; (8003278 <HAL_ETH_Init+0x2c0>)
 8003016:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800301a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800301c:	4b96      	ldr	r3, [pc, #600]	; (8003278 <HAL_ETH_Init+0x2c0>)
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4994      	ldr	r1, [pc, #592]	; (8003278 <HAL_ETH_Init+0x2c0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003040:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003042:	f7fe ff69 	bl	8001f18 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003048:	e011      	b.n	800306e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800304a:	f7fe ff65 	bl	8001f18 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003058:	d909      	bls.n	800306e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e139      	b.n	80032e2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e4      	bne.n	800304a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f023 031c 	bic.w	r3, r3, #28
 800308e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003090:	f001 fbde 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8003094:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4a78      	ldr	r2, [pc, #480]	; (800327c <HAL_ETH_Init+0x2c4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d908      	bls.n	80030b0 <HAL_ETH_Init+0xf8>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_ETH_Init+0x2c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d804      	bhi.n	80030b0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e027      	b.n	8003100 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4a73      	ldr	r2, [pc, #460]	; (8003280 <HAL_ETH_Init+0x2c8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d908      	bls.n	80030ca <HAL_ETH_Init+0x112>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4a6d      	ldr	r2, [pc, #436]	; (8003270 <HAL_ETH_Init+0x2b8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d204      	bcs.n	80030ca <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f043 030c 	orr.w	r3, r3, #12
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e01a      	b.n	8003100 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4a68      	ldr	r2, [pc, #416]	; (8003270 <HAL_ETH_Init+0x2b8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d303      	bcc.n	80030da <HAL_ETH_Init+0x122>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_ETH_Init+0x2cc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d911      	bls.n	80030fe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4a69      	ldr	r2, [pc, #420]	; (8003284 <HAL_ETH_Init+0x2cc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d908      	bls.n	80030f4 <HAL_ETH_Init+0x13c>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4a68      	ldr	r2, [pc, #416]	; (8003288 <HAL_ETH_Init+0x2d0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d804      	bhi.n	80030f4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e005      	b.n	8003100 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e000      	b.n	8003100 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80030fe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003108:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800310c:	2100      	movs	r1, #0
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f954 	bl	80033bc <HAL_ETH_WritePHYRegister>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800311e:	6939      	ldr	r1, [r7, #16]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9b1 	bl	8003488 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0d7      	b.n	80032e2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003132:	20ff      	movs	r0, #255	; 0xff
 8003134:	f7fe fefc 	bl	8001f30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a5 	beq.w	800328c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003142:	f7fe fee9 	bl	8001f18 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	461a      	mov	r2, r3
 800314e:	2101      	movs	r1, #1
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8cb 	bl	80032ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003156:	f7fe fedf 	bl	8001f18 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d90f      	bls.n	8003188 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f98a 	bl	8003488 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0ac      	b.n	80032e2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0da      	beq.n	8003148 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003196:	2100      	movs	r1, #0
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f90f 	bl	80033bc <HAL_ETH_WritePHYRegister>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f96c 	bl	8003488 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80031b8:	2301      	movs	r3, #1
 80031ba:	e092      	b.n	80032e2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fe feac 	bl	8001f18 <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	461a      	mov	r2, r3
 80031c8:	2101      	movs	r1, #1
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f88e 	bl	80032ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031d0:	f7fe fea2 	bl	8001f18 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d90f      	bls.n	8003202 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80031e6:	6939      	ldr	r1, [r7, #16]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f94d 	bl	8003488 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e06f      	b.n	80032e2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0da      	beq.n	80031c2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	461a      	mov	r2, r3
 8003212:	2110      	movs	r1, #16
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f869 	bl	80032ec <HAL_ETH_ReadPHYRegister>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f92e 	bl	8003488 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003234:	2301      	movs	r3, #1
 8003236:	e054      	b.n	80032e2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e002      	b.n	8003252 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e035      	b.n	80032d0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e030      	b.n	80032d0 <HAL_ETH_Init+0x318>
 800326e:	bf00      	nop
 8003270:	03938700 	.word	0x03938700
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	01312cff 	.word	0x01312cff
 8003280:	02160ebf 	.word	0x02160ebf
 8003284:	05f5e0ff 	.word	0x05f5e0ff
 8003288:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800329c:	4313      	orrs	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f889 	bl	80033bc <HAL_ETH_WritePHYRegister>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032b4:	6939      	ldr	r1, [r7, #16]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8e6 	bl	8003488 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e00c      	b.n	80032e2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032c8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032cc:	f7fe fe30 	bl	8001f30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032d0:	6939      	ldr	r1, [r7, #16]
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8d8 	bl	8003488 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop

080032ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	460b      	mov	r3, r1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b82      	cmp	r3, #130	; 0x82
 800330c:	d101      	bne.n	8003312 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	e050      	b.n	80033b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2282      	movs	r2, #130	; 0x82
 8003316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 031c 	and.w	r3, r3, #28
 8003328:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8a1b      	ldrh	r3, [r3, #16]
 800332e:	02db      	lsls	r3, r3, #11
 8003330:	b29b      	uxth	r3, r3
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	019b      	lsls	r3, r3, #6
 800333c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0302 	bic.w	r3, r3, #2
 800334c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800335e:	f7fe fddb 	bl	8001f18 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003364:	e015      	b.n	8003392 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003366:	f7fe fdd7 	bl	8001f18 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d309      	bcc.n	800338a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e014      	b.n	80033b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e4      	bne.n	8003366 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	460b      	mov	r3, r1
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b42      	cmp	r3, #66	; 0x42
 80033dc:	d101      	bne.n	80033e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	e04e      	b.n	8003480 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2242      	movs	r2, #66	; 0x42
 80033e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 031c 	and.w	r3, r3, #28
 80033f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8a1b      	ldrh	r3, [r3, #16]
 80033fe:	02db      	lsls	r3, r3, #11
 8003400:	b29b      	uxth	r3, r3
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003408:	897b      	ldrh	r3, [r7, #10]
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003438:	f7fe fd6e 	bl	8001f18 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800343e:	e015      	b.n	800346c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003440:	f7fe fd6a 	bl	8001f18 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d309      	bcc.n	8003464 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e00d      	b.n	8003480 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e4      	bne.n	8003440 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b0b0      	sub	sp, #192	; 0xc0
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80034b6:	2300      	movs	r3, #0
 80034b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80034ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d2:	663b      	str	r3, [r7, #96]	; 0x60
 80034d4:	e001      	b.n	80034da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80034da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034e4:	2300      	movs	r3, #0
 80034e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800355c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003560:	4bab      	ldr	r3, [pc, #684]	; (8003810 <ETH_MACDMAConfig+0x388>)
 8003562:	4013      	ands	r3, r2
 8003564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003568:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800356c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003570:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003574:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800357a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800357e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003582:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003588:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800358a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800358c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800358e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003590:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003594:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003598:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800359a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800359c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800359e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035bc:	2001      	movs	r0, #1
 80035be:	f7fe fcb7 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80035ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035d0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80035d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80035d4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80035d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80035da:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80035dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80035e0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80035e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80035e6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80035e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80035ec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80035f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80035f8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035fa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003606:	2001      	movs	r0, #1
 8003608:	f7fe fc92 	bl	8001f30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003614:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800361e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003628:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003634:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003638:	f64f 7341 	movw	r3, #65345	; 0xff41
 800363c:	4013      	ands	r3, r2
 800363e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003646:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800364c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800364e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003652:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003658:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800365a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800365e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003664:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003666:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003678:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003684:	2001      	movs	r0, #1
 8003686:	f7fe fc53 	bl	8001f30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003692:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003694:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003698:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f7fe fc3e 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036bc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80036cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036d0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80036e2:	2304      	movs	r3, #4
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80036e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80036ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003702:	2300      	movs	r3, #0
 8003704:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003706:	2300      	movs	r3, #0
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f241 0318 	movw	r3, #4120	; 0x1018
 8003712:	4413      	add	r3, r2
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800371a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <ETH_MACDMAConfig+0x38c>)
 8003720:	4013      	ands	r3, r2
 8003722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003726:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003728:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800372a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800372c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800372e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003730:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003732:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003734:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003736:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003738:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800373a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800373c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800373e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003742:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003746:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003748:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f241 0318 	movw	r3, #4120	; 0x1018
 800375a:	4413      	add	r3, r2
 800375c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003760:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f241 0318 	movw	r3, #4120	; 0x1018
 800376a:	4413      	add	r3, r2
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003772:	2001      	movs	r0, #1
 8003774:	f7fe fbdc 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003780:	4413      	add	r3, r2
 8003782:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003786:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800378c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003790:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003794:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003798:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800379a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800379e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80037a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80037a2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fe fbb5 	bl	8001f30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037d2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10d      	bne.n	80037f8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f241 031c 	movw	r3, #4124	; 0x101c
 80037e4:	4413      	add	r3, r2
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6811      	ldr	r1, [r2, #0]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <ETH_MACDMAConfig+0x390>)
 80037ee:	431a      	orrs	r2, r3
 80037f0:	f241 031c 	movw	r3, #4124	; 0x101c
 80037f4:	440b      	add	r3, r1
 80037f6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	461a      	mov	r2, r3
 80037fe:	2100      	movs	r1, #0
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f80b 	bl	800381c <ETH_MACAddressConfig>
}
 8003806:	bf00      	nop
 8003808:	37c0      	adds	r7, #192	; 0xc0
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	ff20810f 	.word	0xff20810f
 8003814:	f8de3f23 	.word	0xf8de3f23
 8003818:	00010040 	.word	0x00010040

0800381c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3305      	adds	r3, #5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	3204      	adds	r2, #4
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <ETH_MACAddressConfig+0x68>)
 800383e:	4413      	add	r3, r2
 8003840:	461a      	mov	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3303      	adds	r3, #3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	061a      	lsls	r2, r3, #24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3302      	adds	r3, #2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <ETH_MACAddressConfig+0x6c>)
 800386e:	4413      	add	r3, r2
 8003870:	461a      	mov	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	6013      	str	r3, [r2, #0]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40028040 	.word	0x40028040
 8003888:	40028044 	.word	0x40028044

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e175      	b.n	8003b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 8164 	bne.w	8003b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d005      	beq.n	80038e2 <HAL_GPIO_Init+0x56>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d130      	bne.n	8003944 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0201 	and.w	r2, r3, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d017      	beq.n	8003980 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d123      	bne.n	80039d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3208      	adds	r2, #8
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	08da      	lsrs	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3208      	adds	r2, #8
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80be 	beq.w	8003b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_GPIO_Init+0x32c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d037      	beq.n	8003aca <HAL_GPIO_Init+0x23e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <HAL_GPIO_Init+0x23a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <HAL_GPIO_Init+0x236>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <HAL_GPIO_Init+0x338>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d025      	beq.n	8003abe <HAL_GPIO_Init+0x232>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_GPIO_Init+0x33c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <HAL_GPIO_Init+0x22e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <HAL_GPIO_Init+0x340>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d019      	beq.n	8003ab6 <HAL_GPIO_Init+0x22a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_GPIO_Init+0x344>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <HAL_GPIO_Init+0x348>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00d      	beq.n	8003aae <HAL_GPIO_Init+0x222>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_GPIO_Init+0x34c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <HAL_GPIO_Init+0x21e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4f      	ldr	r2, [pc, #316]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_GPIO_Init+0x21a>
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	e012      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e010      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00e      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e00c      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e00a      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f ae86 	bls.w	80038ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40021c00 	.word	0x40021c00
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022400 	.word	0x40022400
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e001      	b.n	8003c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c30:	e003      	b.n	8003c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	041a      	lsls	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f978 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e006      	b.n	8003cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d104      	bne.n	8003ce2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_I2C_Init+0x11c>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	02008000 	.word	0x02008000

08003d68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d138      	bne.n	8003df0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e032      	b.n	8003df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	; 0x24
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d139      	bne.n	8003e88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e033      	b.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	; 0x24
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40007000 	.word	0x40007000

08003eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee6:	f7fe f817 	bl	8001f18 <HAL_GetTick>
 8003eea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eec:	e009      	b.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eee:	f7fe f813 	bl	8001f18 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efc:	d901      	bls.n	8003f02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e022      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d1ee      	bne.n	8003eee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f1c:	f7fd fffc 	bl	8001f18 <HAL_GetTick>
 8003f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f22:	e009      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f24:	f7fd fff8 	bl	8001f18 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f32:	d901      	bls.n	8003f38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e007      	b.n	8003f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f44:	d1ee      	bne.n	8003f24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e29b      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8087 	beq.w	800408a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f7c:	4b96      	ldr	r3, [pc, #600]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d00c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f88:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d112      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
 8003f94:	4b90      	ldr	r3, [pc, #576]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d06c      	beq.n	8004088 <HAL_RCC_OscConfig+0x130>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d168      	bne.n	8004088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e275      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x7a>
 8003fc4:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a83      	ldr	r2, [pc, #524]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e02e      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x9c>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xd8>
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b6c      	ldr	r3, [pc, #432]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd ff6e 	bl	8001f18 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd ff6a 	bl	8001f18 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e229      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd ff5a 	bl	8001f18 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd ff56 	bl	8001f18 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e215      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x110>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d069      	beq.n	800416a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1e9      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	493d      	ldr	r1, [pc, #244]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e040      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd ff0c 	bl	8001f18 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	f7fd ff08 	bl	8001f18 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1c7      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4929      	ldr	r1, [pc, #164]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	e018      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd fee8 	bl	8001f18 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7fd fee4 	bl	8001f18 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1a3      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d038      	beq.n	80041e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d019      	beq.n	80041b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd fec5 	bl	8001f18 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fd fec1 	bl	8001f18 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e180      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x23a>
 80041b0:	e01a      	b.n	80041e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fd feab 	bl	8001f18 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fd fea7 	bl	8001f18 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d903      	bls.n	80041dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e166      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
 80041d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	4b92      	ldr	r3, [pc, #584]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ee      	bne.n	80041c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a4 	beq.w	800433e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b89      	ldr	r3, [pc, #548]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a88      	ldr	r2, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b86      	ldr	r3, [pc, #536]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421e:	4b83      	ldr	r3, [pc, #524]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800422a:	4b80      	ldr	r3, [pc, #512]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7f      	ldr	r2, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd fe6f 	bl	8001f18 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fd fe6b 	bl	8001f18 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e12a      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x4d4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x31a>
 8004264:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x33c>
 800427a:	4b6b      	ldr	r3, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a6a      	ldr	r2, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a67      	ldr	r2, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	e01c      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x35e>
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a61      	ldr	r2, [pc, #388]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x376>
 80042b6:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fd fe1f 	bl	8001f18 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd fe1b 	bl	8001f18 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0d8      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCC_OscConfig+0x386>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fe09 	bl	8001f18 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fe05 	bl	8001f18 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0c2      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80ae 	beq.w	80044a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d06d      	beq.n	8004430 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d14b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a31      	ldr	r2, [pc, #196]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fdd6 	bl	8001f18 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fdd2 	bl	8001f18 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e091      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	491b      	ldr	r1, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fda4 	bl	8001f18 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fda0 	bl	8001f18 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e05f      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x47c>
 80043f2:	e057      	b.n	80044a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fd8a 	bl	8001f18 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fd fd86 	bl	8001f18 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e045      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x4b0>
 8004426:	e03d      	b.n	80044a4 <HAL_RCC_OscConfig+0x54c>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <HAL_RCC_OscConfig+0x558>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d030      	beq.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d129      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d122      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	4293      	cmp	r3, r2
 800446a:	d119      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d10f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0d0      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d910      	bls.n	80044fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b67      	ldr	r3, [pc, #412]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 020f 	bic.w	r2, r3, #15
 80044e2:	4965      	ldr	r1, [pc, #404]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0b8      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a58      	ldr	r2, [pc, #352]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800452c:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a52      	ldr	r2, [pc, #328]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004538:	4b50      	ldr	r3, [pc, #320]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	494d      	ldr	r1, [pc, #308]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d040      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d115      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e073      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06b      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4936      	ldr	r1, [pc, #216]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd fcb6 	bl	8001f18 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fd fcb2 	bl	8001f18 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e053      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d210      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 020f 	bic.w	r2, r3, #15
 80045ee:	4922      	ldr	r1, [pc, #136]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e032      	b.n	800466e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4916      	ldr	r1, [pc, #88]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	490e      	ldr	r1, [pc, #56]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004646:	f000 f821 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800464a:	4602      	mov	r2, r0
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	490a      	ldr	r1, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x1cc>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1d0>)
 8004660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fc12 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023c00 	.word	0x40023c00
 800467c:	40023800 	.word	0x40023800
 8004680:	0800b064 	.word	0x0800b064
 8004684:	20000000 	.word	0x20000000
 8004688:	20000004 	.word	0x20000004

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	2300      	movs	r3, #0
 800469e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a4:	4b67      	ldr	r3, [pc, #412]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d00d      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x40>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	f200 80bd 	bhi.w	8004830 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046be:	e0b7      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046c2:	60bb      	str	r3, [r7, #8]
      break;
 80046c4:	e0b7      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c6:	4b61      	ldr	r3, [pc, #388]	; (800484c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046c8:	60bb      	str	r3, [r7, #8]
      break;
 80046ca:	e0b4      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046cc:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04d      	beq.n	800477e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	461a      	mov	r2, r3
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	ea02 0800 	and.w	r8, r2, r0
 80046fa:	ea03 0901 	and.w	r9, r3, r1
 80046fe:	4640      	mov	r0, r8
 8004700:	4649      	mov	r1, r9
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	014b      	lsls	r3, r1, #5
 800470c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004710:	0142      	lsls	r2, r0, #5
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	ebb0 0008 	subs.w	r0, r0, r8
 800471a:	eb61 0109 	sbc.w	r1, r1, r9
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	018b      	lsls	r3, r1, #6
 8004728:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800472c:	0182      	lsls	r2, r0, #6
 800472e:	1a12      	subs	r2, r2, r0
 8004730:	eb63 0301 	sbc.w	r3, r3, r1
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	00d9      	lsls	r1, r3, #3
 800473e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004742:	00d0      	lsls	r0, r2, #3
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	eb12 0208 	adds.w	r2, r2, r8
 800474c:	eb43 0309 	adc.w	r3, r3, r9
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0259      	lsls	r1, r3, #9
 800475a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800475e:	0250      	lsls	r0, r2, #9
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	f7fb fdbe 	bl	80002f0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e04a      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	ea02 0400 	and.w	r4, r2, r0
 8004796:	ea03 0501 	and.w	r5, r3, r1
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	014b      	lsls	r3, r1, #5
 80047a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047ac:	0142      	lsls	r2, r0, #5
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	1b00      	subs	r0, r0, r4
 80047b4:	eb61 0105 	sbc.w	r1, r1, r5
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	018b      	lsls	r3, r1, #6
 80047c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c6:	0182      	lsls	r2, r0, #6
 80047c8:	1a12      	subs	r2, r2, r0
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	00d9      	lsls	r1, r3, #3
 80047d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047dc:	00d0      	lsls	r0, r2, #3
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	1912      	adds	r2, r2, r4
 80047e4:	eb45 0303 	adc.w	r3, r5, r3
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0299      	lsls	r1, r3, #10
 80047f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047f6:	0290      	lsls	r0, r2, #10
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	f7fb fd72 	bl	80002f0 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	3301      	adds	r3, #1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	60bb      	str	r3, [r7, #8]
      break;
 800482e:	e002      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004832:	60bb      	str	r3, [r7, #8]
      break;
 8004834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004836:	68bb      	ldr	r3, [r7, #8]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	00f42400 	.word	0x00f42400
 800484c:	007a1200 	.word	0x007a1200

08004850 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_RCC_GetHCLKFreq+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800486c:	f7ff fff0 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0a9b      	lsrs	r3, r3, #10
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK1Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800b074 	.word	0x0800b074

08004890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004894:	f7ff ffdc 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0b5b      	lsrs	r3, r3, #13
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800b074 	.word	0x0800b074

080048b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d012      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048e0:	4b69      	ldr	r3, [pc, #420]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a68      	ldr	r2, [pc, #416]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048ea:	6093      	str	r3, [r2, #8]
 80048ec:	4b66      	ldr	r3, [pc, #408]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	4964      	ldr	r1, [pc, #400]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004912:	4b5d      	ldr	r3, [pc, #372]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	4959      	ldr	r1, [pc, #356]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004932:	2301      	movs	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d017      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800494e:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004954:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	494a      	ldr	r1, [pc, #296]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496c:	d101      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 808b 	beq.w	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b3a      	ldr	r3, [pc, #232]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	4a39      	ldr	r2, [pc, #228]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6413      	str	r3, [r2, #64]	; 0x40
 80049a8:	4b37      	ldr	r3, [pc, #220]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fd faaa 	bl	8001f18 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c8:	f7fd faa6 	bl	8001f18 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e38f      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049e6:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d035      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d02e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a04:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d114      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fa6e 	bl	8001f18 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fd fa6a 	bl	8001f18 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e351      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ee      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6e:	d111      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a7e:	400b      	ands	r3, r1
 8004a80:	4901      	ldr	r1, [pc, #4]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	0ffffcff 	.word	0x0ffffcff
 8004a94:	4bb3      	ldr	r3, [pc, #716]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4ab2      	ldr	r2, [pc, #712]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a9e:	6093      	str	r3, [r2, #8]
 8004aa0:	4bb0      	ldr	r3, [pc, #704]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aac:	49ad      	ldr	r1, [pc, #692]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d010      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004abe:	4ba9      	ldr	r3, [pc, #676]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	4aa7      	ldr	r2, [pc, #668]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ace:	4ba5      	ldr	r3, [pc, #660]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	49a2      	ldr	r1, [pc, #648]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aec:	4b9d      	ldr	r3, [pc, #628]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afa:	499a      	ldr	r1, [pc, #616]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b0e:	4b95      	ldr	r3, [pc, #596]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1c:	4991      	ldr	r1, [pc, #580]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b30:	4b8c      	ldr	r3, [pc, #560]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3e:	4989      	ldr	r1, [pc, #548]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b52:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4980      	ldr	r1, [pc, #512]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b74:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f023 0203 	bic.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4978      	ldr	r1, [pc, #480]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b96:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f023 020c 	bic.w	r2, r3, #12
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	496f      	ldr	r1, [pc, #444]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb8:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	4967      	ldr	r1, [pc, #412]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bda:	4b62      	ldr	r3, [pc, #392]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	495e      	ldr	r1, [pc, #376]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	4956      	ldr	r1, [pc, #344]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c1e:	4b51      	ldr	r3, [pc, #324]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c40:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4e:	4945      	ldr	r1, [pc, #276]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c62:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c70:	493c      	ldr	r1, [pc, #240]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d011      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb4:	492b      	ldr	r1, [pc, #172]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf4:	491b      	ldr	r1, [pc, #108]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d18:	4912      	ldr	r1, [pc, #72]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3c:	4909      	ldr	r1, [pc, #36]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	e002      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	4986      	ldr	r1, [pc, #536]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d7c:	4b81      	ldr	r3, [pc, #516]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8c:	497d      	ldr	r1, [pc, #500]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d006      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80d6 	beq.w	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004da8:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a75      	ldr	r2, [pc, #468]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fd f8b0 	bl	8001f18 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dbc:	f7fd f8ac 	bl	8001f18 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e195      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dce:	4b6d      	ldr	r3, [pc, #436]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d021      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d11d      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dee:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	0e1b      	lsrs	r3, r3, #24
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	019a      	lsls	r2, r3, #6
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	4958      	ldr	r1, [pc, #352]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e54:	d129      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e56:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e64:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6a:	0f1b      	lsrs	r3, r3, #28
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	019a      	lsls	r2, r3, #6
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	493e      	ldr	r1, [pc, #248]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	f023 021f 	bic.w	r2, r3, #31
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	4938      	ldr	r1, [pc, #224]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004eb6:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec4:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	0f1b      	lsrs	r3, r3, #28
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	019a      	lsls	r2, r3, #6
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	4926      	ldr	r1, [pc, #152]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	019a      	lsls	r2, r3, #6
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	071b      	lsls	r3, r3, #28
 8004f1a:	491a      	ldr	r1, [pc, #104]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2e:	f7fc fff3 	bl	8001f18 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f36:	f7fc ffef 	bl	8001f18 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b64      	cmp	r3, #100	; 0x64
 8004f42:	d901      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0d8      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	f040 80ce 	bne.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f68:	f7fc ffd6 	bl	8001f18 <HAL_GetTick>
 8004f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f70:	f7fc ffd2 	bl	8001f18 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d904      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0bb      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f88:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f94:	d0ec      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d02e      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d12a      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fbe:	4b51      	ldr	r3, [pc, #324]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fcc:	4b4d      	ldr	r3, [pc, #308]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	0f1b      	lsrs	r3, r3, #28
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	019a      	lsls	r2, r3, #6
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	4944      	ldr	r1, [pc, #272]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ffa:	4b42      	ldr	r3, [pc, #264]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	3b01      	subs	r3, #1
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	493d      	ldr	r1, [pc, #244]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d022      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005028:	d11d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	0e1b      	lsrs	r3, r3, #24
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005038:	4b32      	ldr	r3, [pc, #200]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	0f1b      	lsrs	r3, r3, #28
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	431a      	orrs	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	061b      	lsls	r3, r3, #24
 8005058:	431a      	orrs	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	4929      	ldr	r1, [pc, #164]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d028      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	0e1b      	lsrs	r3, r3, #24
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005080:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	019a      	lsls	r2, r3, #6
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	4917      	ldr	r1, [pc, #92]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4911      	ldr	r1, [pc, #68]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d0:	f7fc ff22 	bl	8001f18 <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050d8:	f7fc ff1e 	bl	8001f18 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e007      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f6:	d1ef      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e09d      	b.n	8005256 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512a:	d009      	beq.n	8005140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	61da      	str	r2, [r3, #28]
 8005132:	e005      	b.n	8005140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc f952 	bl	8001404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005180:	d902      	bls.n	8005188 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005196:	d007      	beq.n	80051a8 <HAL_SPI_Init+0xa0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	ea42 0103 	orr.w	r1, r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 0204 	and.w	r2, r3, #4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005224:	ea42 0103 	orr.w	r1, r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_SPI_Transmit+0x22>
 800527c:	2302      	movs	r3, #2
 800527e:	e158      	b.n	8005532 <HAL_SPI_Transmit+0x2d4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005288:	f7fc fe46 	bl	8001f18 <HAL_GetTick>
 800528c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a2:	e13d      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x52>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052b4:	e134      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2203      	movs	r2, #3
 80052ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d10f      	bne.n	8005322 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d007      	beq.n	8005340 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d94b      	bls.n	80053e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Transmit+0xfa>
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d13e      	bne.n	80053d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800537c:	e02b      	b.n	80053d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d112      	bne.n	80053b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	881a      	ldrh	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b0:	e011      	b.n	80053d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b2:	f7fc fdb1 	bl	8001f18 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d803      	bhi.n	80053ca <HAL_SPI_Transmit+0x16c>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d102      	bne.n	80053d0 <HAL_SPI_Transmit+0x172>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d4:	e0a4      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ce      	bne.n	800537e <HAL_SPI_Transmit+0x120>
 80053e0:	e07c      	b.n	80054dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Transmit+0x192>
 80053ea:	8afb      	ldrh	r3, [r7, #22]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d170      	bne.n	80054d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d912      	bls.n	8005420 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b02      	subs	r3, #2
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800541e:	e058      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005446:	e044      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d12b      	bne.n	80054ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d912      	bls.n	8005486 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	1c9a      	adds	r2, r3, #2
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b02      	subs	r3, #2
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005484:	e025      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ac:	e011      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ae:	f7fc fd33 	bl	8001f18 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_Transmit+0x268>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_Transmit+0x26e>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054d0:	e026      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1b5      	bne.n	8005448 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fd07 	bl	8005ef4 <SPI_EndRxTxTransaction>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e000      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800551e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af02      	add	r7, sp, #8
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005556:	d112      	bne.n	800557e <HAL_SPI_Receive+0x44>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10e      	bne.n	800557e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f910 	bl	800579a <HAL_SPI_TransmitReceive>
 800557a:	4603      	mov	r3, r0
 800557c:	e109      	b.n	8005792 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_SPI_Receive+0x52>
 8005588:	2302      	movs	r3, #2
 800558a:	e102      	b.n	8005792 <HAL_SPI_Receive+0x258>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005594:	f7fc fcc0 	bl	8001f18 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055aa:	e0e9      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Receive+0x7e>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055bc:	e0e0      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2204      	movs	r2, #4
 80055c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005608:	d908      	bls.n	800561c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e007      	b.n	800562c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005634:	d10f      	bne.n	8005656 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800567c:	d867      	bhi.n	800574e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800567e:	e030      	b.n	80056e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d117      	bne.n	80056be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f103 020c 	add.w	r2, r3, #12
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056bc:	e011      	b.n	80056e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fc fc2b 	bl	8001f18 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Receive+0x19c>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Receive+0x1a2>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056e0:	e04e      	b.n	8005780 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1c8      	bne.n	8005680 <HAL_SPI_Receive+0x146>
 80056ee:	e034      	b.n	800575a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d115      	bne.n	800572a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	b292      	uxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005728:	e011      	b.n	800574e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572a:	f7fc fbf5 	bl	8001f18 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d803      	bhi.n	8005742 <HAL_SPI_Receive+0x208>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Receive+0x20e>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800574c:	e018      	b.n	8005780 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ca      	bne.n	80056f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fb4c 	bl	8005dfc <SPI_EndRxTransaction>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
 800577c:	e000      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

error :
 800577e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b08a      	sub	sp, #40	; 0x28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057a8:	2301      	movs	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x26>
 80057bc:	2302      	movs	r3, #2
 80057be:	e1fb      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x41e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c8:	f7fc fba6 	bl	8001f18 <HAL_GetTick>
 80057cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057e0:	887b      	ldrh	r3, [r7, #2]
 80057e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057e4:	7efb      	ldrb	r3, [r7, #27]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d00e      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x6e>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f0:	d106      	bne.n	8005800 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_TransmitReceive+0x66>
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d003      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005800:	2302      	movs	r3, #2
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005806:	e1cd      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_SPI_TransmitReceive+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_SPI_TransmitReceive+0x80>
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005820:	e1c0      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b04      	cmp	r3, #4
 800582c:	d003      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2205      	movs	r2, #5
 8005832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	887a      	ldrh	r2, [r7, #2]
 800584e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	887a      	ldrh	r2, [r7, #2]
 8005862:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005878:	d802      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0xe6>
 800587a:	8a3b      	ldrh	r3, [r7, #16]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d908      	bls.n	8005892 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	e007      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d007      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c8:	d97c      	bls.n	80059c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x13e>
 80058d2:	8a7b      	ldrh	r3, [r7, #18]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d169      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058fc:	e056      	b.n	80059ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d113      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	1c9a      	adds	r2, r3, #2
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d11c      	bne.n	800598c <HAL_SPI_TransmitReceive+0x1f2>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005988:	2301      	movs	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800598c:	f7fc fac4 	bl	8001f18 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	429a      	cmp	r2, r3
 800599a:	d807      	bhi.n	80059ac <HAL_SPI_TransmitReceive+0x212>
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d003      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059aa:	e0fb      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1a3      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x164>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d19d      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x164>
 80059c2:	e0df      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x23a>
 80059cc:	8a7b      	ldrh	r3, [r7, #18]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	f040 80cb 	bne.w	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d912      	bls.n	8005a04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b02      	subs	r3, #2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a02:	e0b2      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2a:	e09e      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d134      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d12c      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d912      	bls.n	8005a7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b02      	subs	r3, #2
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a78:	e012      	b.n	8005aa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d148      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x3aa>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d042      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d923      	bls.n	8005b12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b02      	subs	r3, #2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d81f      	bhi.n	8005b40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	e016      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f103 020c 	add.w	r2, r3, #12
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b40:	2301      	movs	r3, #1
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b44:	f7fc f9e8 	bl	8001f18 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d803      	bhi.n	8005b5c <HAL_SPI_TransmitReceive+0x3c2>
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d102      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x3c8>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b68:	e01c      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af5b 	bne.w	8005a2c <HAL_SPI_TransmitReceive+0x292>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f47f af54 	bne.w	8005a2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f9b3 	bl	8005ef4 <SPI_EndRxTxTransaction>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8005ba0:	e000      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd0:	f7fc f9a2 	bl	8001f18 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be0:	f7fc f99a 	bl	8001f18 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf6:	e054      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d050      	beq.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c00:	f7fc f98a 	bl	8001f18 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d13d      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2e:	d111      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	d004      	beq.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c42:	d107      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	d10f      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e017      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d19b      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ce2:	f7fc f919 	bl	8001f18 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	4413      	add	r3, r2
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005cf2:	f7fc f911 	bl	8001f18 <HAL_GetTick>
 8005cf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d00:	4b3d      	ldr	r3, [pc, #244]	; (8005df8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	0d1b      	lsrs	r3, r3, #20
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d18:	e060      	b.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d20:	d107      	bne.n	8005d32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d050      	beq.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d3a:	f7fc f8ed 	bl	8001f18 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d902      	bls.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d13d      	bne.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d68:	d111      	bne.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d72:	d004      	beq.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d107      	bne.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d96:	d10f      	bne.n	8005db8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e010      	b.n	8005dee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d196      	bne.n	8005d1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3728      	adds	r7, #40	; 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000000 	.word	0x20000000

08005dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e10:	d111      	bne.n	8005e36 <SPI_EndRxTransaction+0x3a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1a:	d004      	beq.n	8005e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d107      	bne.n	8005e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3e:	d112      	bne.n	8005e66 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff feb8 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d021      	beq.n	8005e9a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e03d      	b.n	8005ee2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e66:	4b21      	ldr	r3, [pc, #132]	; (8005eec <SPI_EndRxTransaction+0xf0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <SPI_EndRxTransaction+0xf4>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	0d5b      	lsrs	r3, r3, #21
 8005e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d0f2      	beq.n	8005e7c <SPI_EndRxTransaction+0x80>
 8005e96:	e000      	b.n	8005e9a <SPI_EndRxTransaction+0x9e>
        break;
 8005e98:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d11d      	bne.n	8005ee0 <SPI_EndRxTransaction+0xe4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eac:	d004      	beq.n	8005eb8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb6:	d113      	bne.n	8005ee0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ff03 	bl	8005cd0 <SPI_WaitFifoStateUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e000      	b.n	8005ee2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	165e9f81 	.word	0x165e9f81

08005ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fedf 	bl	8005cd0 <SPI_WaitFifoStateUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e046      	b.n	8005fb6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f28:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <SPI_EndRxTxTransaction+0xcc>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <SPI_EndRxTxTransaction+0xd0>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0d5b      	lsrs	r3, r3, #21
 8005f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f46:	d112      	bne.n	8005f6e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe34 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e023      	b.n	8005fb6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d0f2      	beq.n	8005f6e <SPI_EndRxTxTransaction+0x7a>
 8005f88:	e000      	b.n	8005f8c <SPI_EndRxTxTransaction+0x98>
        break;
 8005f8a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fe99 	bl	8005cd0 <SPI_WaitFifoStateUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000000 	.word	0x20000000
 8005fc4:	165e9f81 	.word	0x165e9f81

08005fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e049      	b.n	800606e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fcb8 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 fa74 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e049      	b.n	800611c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f841 	bl	8006124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f000 fa1d 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006152:	2302      	movs	r3, #2
 8006154:	e0ff      	b.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b14      	cmp	r3, #20
 8006162:	f200 80f0 	bhi.w	8006346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	080061c1 	.word	0x080061c1
 8006170:	08006347 	.word	0x08006347
 8006174:	08006347 	.word	0x08006347
 8006178:	08006347 	.word	0x08006347
 800617c:	08006201 	.word	0x08006201
 8006180:	08006347 	.word	0x08006347
 8006184:	08006347 	.word	0x08006347
 8006188:	08006347 	.word	0x08006347
 800618c:	08006243 	.word	0x08006243
 8006190:	08006347 	.word	0x08006347
 8006194:	08006347 	.word	0x08006347
 8006198:	08006347 	.word	0x08006347
 800619c:	08006283 	.word	0x08006283
 80061a0:	08006347 	.word	0x08006347
 80061a4:	08006347 	.word	0x08006347
 80061a8:	08006347 	.word	0x08006347
 80061ac:	080062c5 	.word	0x080062c5
 80061b0:	08006347 	.word	0x08006347
 80061b4:	08006347 	.word	0x08006347
 80061b8:	08006347 	.word	0x08006347
 80061bc:	08006305 	.word	0x08006305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fa34 	bl	8006634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0208 	orr.w	r2, r2, #8
 80061da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6999      	ldr	r1, [r3, #24]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	619a      	str	r2, [r3, #24]
      break;
 80061fe:	e0a5      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fa86 	bl	8006718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800621a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6999      	ldr	r1, [r3, #24]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	021a      	lsls	r2, r3, #8
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	619a      	str	r2, [r3, #24]
      break;
 8006240:	e084      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fadd 	bl	8006808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0208 	orr.w	r2, r2, #8
 800625c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0204 	bic.w	r2, r2, #4
 800626c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69d9      	ldr	r1, [r3, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	61da      	str	r2, [r3, #28]
      break;
 8006280:	e064      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fb33 	bl	80068f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800629c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69d9      	ldr	r1, [r3, #28]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	021a      	lsls	r2, r3, #8
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	61da      	str	r2, [r3, #28]
      break;
 80062c2:	e043      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fb6a 	bl	80069a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0208 	orr.w	r2, r2, #8
 80062de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0204 	bic.w	r2, r2, #4
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006302:	e023      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fb9c 	bl	8006a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	021a      	lsls	r2, r3, #8
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006344:	e002      	b.n	800634c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
      break;
 800634a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIM_ConfigClockSource+0x1c>
 8006378:	2302      	movs	r3, #2
 800637a:	e0b4      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x186>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4b56      	ldr	r3, [pc, #344]	; (80064f0 <HAL_TIM_ConfigClockSource+0x190>)
 8006398:	4013      	ands	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b4:	d03e      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0xd4>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ba:	f200 8087 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_TIM_ConfigClockSource+0x172>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d87f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063cc:	2b70      	cmp	r3, #112	; 0x70
 80063ce:	d01a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xa6>
 80063d0:	2b70      	cmp	r3, #112	; 0x70
 80063d2:	d87b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b60      	cmp	r3, #96	; 0x60
 80063d6:	d050      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x11a>
 80063d8:	2b60      	cmp	r3, #96	; 0x60
 80063da:	d877      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b50      	cmp	r3, #80	; 0x50
 80063de:	d03c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0xfa>
 80063e0:	2b50      	cmp	r3, #80	; 0x50
 80063e2:	d873      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d058      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x13a>
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d86f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063ec:	2b30      	cmp	r3, #48	; 0x30
 80063ee:	d064      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d86b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d060      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d867      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d05c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d05a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006404:	e062      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f000 fbe5 	bl	8006be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
      break;
 8006432:	e04f      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f000 fbce 	bl	8006be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006456:	609a      	str	r2, [r3, #8]
      break;
 8006458:	e03c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fb42 	bl	8006af0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2150      	movs	r1, #80	; 0x50
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fb9b 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 8006478:	e02c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	f000 fb61 	bl	8006b4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2160      	movs	r1, #96	; 0x60
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fb8b 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 8006498:	e01c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f000 fb22 	bl	8006af0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fb7b 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 80064b8:	e00c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f000 fb72 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 80064ca:	e003      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	fffeff88 	.word	0xfffeff88

080064f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a40      	ldr	r2, [pc, #256]	; (8006608 <TIM_Base_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a3d      	ldr	r2, [pc, #244]	; (800660c <TIM_Base_SetConfig+0x118>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <TIM_Base_SetConfig+0x120>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3a      	ldr	r2, [pc, #232]	; (8006618 <TIM_Base_SetConfig+0x124>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2f      	ldr	r2, [pc, #188]	; (8006608 <TIM_Base_SetConfig+0x114>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d02b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d027      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <TIM_Base_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d023      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <TIM_Base_SetConfig+0x120>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <TIM_Base_SetConfig+0x124>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d017      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a28      	ldr	r2, [pc, #160]	; (800661c <TIM_Base_SetConfig+0x128>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <TIM_Base_SetConfig+0x12c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a26      	ldr	r2, [pc, #152]	; (8006624 <TIM_Base_SetConfig+0x130>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a25      	ldr	r2, [pc, #148]	; (8006628 <TIM_Base_SetConfig+0x134>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a24      	ldr	r2, [pc, #144]	; (800662c <TIM_Base_SetConfig+0x138>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <TIM_Base_SetConfig+0x13c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d108      	bne.n	80065b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <TIM_Base_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0xf8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <TIM_Base_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d103      	bne.n	80065f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	615a      	str	r2, [r3, #20]
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800
 8006628:	40001800 	.word	0x40001800
 800662c:	40001c00 	.word	0x40001c00
 8006630:	40002000 	.word	0x40002000

08006634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4b2b      	ldr	r3, [pc, #172]	; (800670c <TIM_OC1_SetConfig+0xd8>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0302 	bic.w	r3, r3, #2
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_OC1_SetConfig+0x64>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a20      	ldr	r2, [pc, #128]	; (8006714 <TIM_OC1_SetConfig+0xe0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d10c      	bne.n	80066b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0308 	bic.w	r3, r3, #8
 800669e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0304 	bic.w	r3, r3, #4
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC1_SetConfig+0x8e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <TIM_OC1_SetConfig+0xe0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d111      	bne.n	80066e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	fffeff8f 	.word	0xfffeff8f
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0210 	bic.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4b2e      	ldr	r3, [pc, #184]	; (80067fc <TIM_OC2_SetConfig+0xe4>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0320 	bic.w	r3, r3, #32
 8006762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a23      	ldr	r2, [pc, #140]	; (8006800 <TIM_OC2_SetConfig+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC2_SetConfig+0x68>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a22      	ldr	r2, [pc, #136]	; (8006804 <TIM_OC2_SetConfig+0xec>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10d      	bne.n	800679c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <TIM_OC2_SetConfig+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_OC2_SetConfig+0x94>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a17      	ldr	r2, [pc, #92]	; (8006804 <TIM_OC2_SetConfig+0xec>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d113      	bne.n	80067d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	feff8fff 	.word	0xfeff8fff
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <TIM_OC3_SetConfig+0xe0>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_OC3_SetConfig+0xe4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC3_SetConfig+0x66>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_OC3_SetConfig+0xe8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10d      	bne.n	800688a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <TIM_OC3_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x92>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <TIM_OC3_SetConfig+0xe8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d113      	bne.n	80068c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	fffeff8f 	.word	0xfffeff8f
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40010400 	.word	0x40010400

080068f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <TIM_OC4_SetConfig+0xa4>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a13      	ldr	r2, [pc, #76]	; (800699c <TIM_OC4_SetConfig+0xa8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC4_SetConfig+0x68>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <TIM_OC4_SetConfig+0xac>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d109      	bne.n	8006970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	feff8fff 	.word	0xfeff8fff
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400

080069a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <TIM_OC5_SetConfig+0x98>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a12      	ldr	r2, [pc, #72]	; (8006a40 <TIM_OC5_SetConfig+0x9c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_OC5_SetConfig+0x5e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a11      	ldr	r2, [pc, #68]	; (8006a44 <TIM_OC5_SetConfig+0xa0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d109      	bne.n	8006a16 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	621a      	str	r2, [r3, #32]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	fffeff8f 	.word	0xfffeff8f
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40010400 	.word	0x40010400

08006a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4b1c      	ldr	r3, [pc, #112]	; (8006ae4 <TIM_OC6_SetConfig+0x9c>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	051b      	lsls	r3, r3, #20
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <TIM_OC6_SetConfig+0xa0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_OC6_SetConfig+0x60>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a12      	ldr	r2, [pc, #72]	; (8006aec <TIM_OC6_SetConfig+0xa4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d109      	bne.n	8006abc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	029b      	lsls	r3, r3, #10
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	feff8fff 	.word	0xfeff8fff
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40010400 	.word	0x40010400

08006af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0201 	bic.w	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 030a 	bic.w	r3, r3, #10
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b087      	sub	sp, #28
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0210 	bic.w	r2, r3, #16
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	031b      	lsls	r3, r3, #12
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f043 0307 	orr.w	r3, r3, #7
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e06d      	b.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a30      	ldr	r2, [pc, #192]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d108      	bne.n	8006c82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d022      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d01d      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d018      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00e      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a15      	ldr	r2, [pc, #84]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d009      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10c      	bne.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40010000 	.word	0x40010000
 8006d28:	40010400 	.word	0x40010400
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40001800 	.word	0x40001800

08006d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e040      	b.n	8006dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fa ff60 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc2c 	bl	80075dc <UART_SetConfig>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e022      	b.n	8006dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fe82 	bl	8007aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ff09 	bl	8007be4 <UART_CheckIdleState>
 8006dd2:	4603      	mov	r3, r0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	4613      	mov	r3, r2
 8006dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	f040 8081 	bne.w	8006ef8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UART_Transmit+0x26>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e079      	b.n	8006efa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_UART_Transmit+0x38>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e072      	b.n	8006efa <HAL_UART_Transmit+0x11e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2221      	movs	r2, #33	; 0x21
 8006e28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e2a:	f7fb f875 	bl	8001f18 <HAL_GetTick>
 8006e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e48:	d108      	bne.n	8006e5c <HAL_UART_Transmit+0x80>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	e003      	b.n	8006e64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e6c:	e02c      	b.n	8006ec8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2200      	movs	r2, #0
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fefc 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e038      	b.n	8006efa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	e007      	b.n	8006eb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1cc      	bne.n	8006e6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2200      	movs	r2, #0
 8006edc:	2140      	movs	r1, #64	; 0x40
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 fec9 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e005      	b.n	8006efa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006ef8:	2302      	movs	r3, #2
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b08a      	sub	sp, #40	; 0x28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d13d      	bne.n	8006f94 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_UART_Receive_DMA+0x22>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e036      	b.n	8006f96 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Receive_DMA+0x34>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e02f      	b.n	8006f96 <HAL_UART_Receive_DMA+0x94>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d018      	beq.n	8006f84 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 ff38 	bl	8007e00 <UART_Start_Receive_DMA>
 8006f90:	4603      	mov	r3, r0
 8006f92:	e000      	b.n	8006f96 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3728      	adds	r7, #40	; 0x28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b0ba      	sub	sp, #232	; 0xe8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006fce:	4013      	ands	r3, r2
 8006fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d115      	bne.n	8007008 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00f      	beq.n	8007008 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 82a4 	beq.w	8007546 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
      }
      return;
 8007006:	e29e      	b.n	8007546 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8117 	beq.w	8007240 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800701e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007022:	4b85      	ldr	r3, [pc, #532]	; (8007238 <HAL_UART_IRQHandler+0x298>)
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 810a 	beq.w	8007240 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_UART_IRQHandler+0xbc>
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_UART_IRQHandler+0xec>
 8007068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2202      	movs	r2, #2
 800707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007082:	f043 0204 	orr.w	r2, r3, #4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0x11c>
 8007098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2204      	movs	r2, #4
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	f043 0202 	orr.w	r2, r3, #2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d017      	beq.n	80070f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ee:	f043 0208 	orr.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007100:	2b00      	cmp	r3, #0
 8007102:	d012      	beq.n	800712a <HAL_UART_IRQHandler+0x18a>
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 820a 	beq.w	800754a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d005      	beq.n	8007182 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800717a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800717e:	2b00      	cmp	r3, #0
 8007180:	d04f      	beq.n	8007222 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 ff08 	bl	8007f98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d141      	bne.n	800721a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1d9      	bne.n	8007196 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d013      	beq.n	8007212 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a13      	ldr	r2, [pc, #76]	; (800723c <HAL_UART_IRQHandler+0x29c>)
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fb fc52 	bl	8002aa0 <HAL_DMA_Abort_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00f      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9c2 	bl	800759c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e00b      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9be 	bl	800759c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	e007      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9ba 	bl	800759c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007230:	e18b      	b.n	800754a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007232:	bf00      	nop
    return;
 8007234:	e189      	b.n	800754a <HAL_UART_IRQHandler+0x5aa>
 8007236:	bf00      	nop
 8007238:	04000120 	.word	0x04000120
 800723c:	08008233 	.word	0x08008233

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007244:	2b01      	cmp	r3, #1
 8007246:	f040 8144 	bne.w	80074d2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 813d 	beq.w	80074d2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8136 	beq.w	80074d2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2210      	movs	r2, #16
 800726c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	f040 80b2 	bne.w	80073e2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800728a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 815d 	beq.w	800754e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800729a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800729e:	429a      	cmp	r2, r3
 80072a0:	f080 8155 	bcs.w	800754e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	f000 8085 	beq.w	80073c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1da      	bne.n	80072bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800732a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800732e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007332:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800733c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e1      	bne.n	8007306 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007366:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007368:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800736c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e3      	bne.n	8007342 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007396:	f023 0310 	bic.w	r3, r3, #16
 800739a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80073aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e4      	bne.n	8007386 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fb fafd 	bl	80029c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8e8 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e0:	e0b5      	b.n	800754e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80a7 	beq.w	8007552 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8007404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80a2 	beq.w	8007552 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007430:	647b      	str	r3, [r7, #68]	; 0x44
 8007432:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	623b      	str	r3, [r7, #32]
   return(result);
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3308      	adds	r3, #8
 8007464:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007468:	633a      	str	r2, [r7, #48]	; 0x30
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800746e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e3      	bne.n	8007444 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60fb      	str	r3, [r7, #12]
   return(result);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69b9      	ldr	r1, [r7, #24]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	617b      	str	r3, [r7, #20]
   return(result);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f870 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074d0:	e03f      	b.n	8007552 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00e      	beq.n	80074fc <HAL_UART_IRQHandler+0x55c>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f867 	bl	80075c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074fa:	e02d      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01c      	beq.n	8007556 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
    }
    return;
 8007524:	e017      	b.n	8007556 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d012      	beq.n	8007558 <HAL_UART_IRQHandler+0x5b8>
 8007532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fe8d 	bl	800825e <UART_EndTransmit_IT>
    return;
 8007544:	e008      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007546:	bf00      	nop
 8007548:	e006      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
    return;
 800754a:	bf00      	nop
 800754c:	e004      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
      return;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007556:	bf00      	nop
  }

}
 8007558:	37e8      	adds	r7, #232	; 0xe8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4ba7      	ldr	r3, [pc, #668]	; (80078a4 <UART_SetConfig+0x2c8>)
 8007608:	4013      	ands	r3, r2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	430b      	orrs	r3, r1
 8007612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	430a      	orrs	r2, r1
 800764c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a95      	ldr	r2, [pc, #596]	; (80078a8 <UART_SetConfig+0x2cc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d120      	bne.n	800769a <UART_SetConfig+0xbe>
 8007658:	4b94      	ldr	r3, [pc, #592]	; (80078ac <UART_SetConfig+0x2d0>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d816      	bhi.n	8007694 <UART_SetConfig+0xb8>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <UART_SetConfig+0x90>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	0800767d 	.word	0x0800767d
 8007670:	08007689 	.word	0x08007689
 8007674:	08007683 	.word	0x08007683
 8007678:	0800768f 	.word	0x0800768f
 800767c:	2301      	movs	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e14f      	b.n	8007922 <UART_SetConfig+0x346>
 8007682:	2302      	movs	r3, #2
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e14c      	b.n	8007922 <UART_SetConfig+0x346>
 8007688:	2304      	movs	r3, #4
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e149      	b.n	8007922 <UART_SetConfig+0x346>
 800768e:	2308      	movs	r3, #8
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e146      	b.n	8007922 <UART_SetConfig+0x346>
 8007694:	2310      	movs	r3, #16
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	e143      	b.n	8007922 <UART_SetConfig+0x346>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a84      	ldr	r2, [pc, #528]	; (80078b0 <UART_SetConfig+0x2d4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d132      	bne.n	800770a <UART_SetConfig+0x12e>
 80076a4:	4b81      	ldr	r3, [pc, #516]	; (80078ac <UART_SetConfig+0x2d0>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d828      	bhi.n	8007704 <UART_SetConfig+0x128>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0xdc>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	08007705 	.word	0x08007705
 80076c0:	08007705 	.word	0x08007705
 80076c4:	08007705 	.word	0x08007705
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	08007705 	.word	0x08007705
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007705 	.word	0x08007705
 80076d8:	080076f3 	.word	0x080076f3
 80076dc:	08007705 	.word	0x08007705
 80076e0:	08007705 	.word	0x08007705
 80076e4:	08007705 	.word	0x08007705
 80076e8:	080076ff 	.word	0x080076ff
 80076ec:	2300      	movs	r3, #0
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e117      	b.n	8007922 <UART_SetConfig+0x346>
 80076f2:	2302      	movs	r3, #2
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e114      	b.n	8007922 <UART_SetConfig+0x346>
 80076f8:	2304      	movs	r3, #4
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e111      	b.n	8007922 <UART_SetConfig+0x346>
 80076fe:	2308      	movs	r3, #8
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e10e      	b.n	8007922 <UART_SetConfig+0x346>
 8007704:	2310      	movs	r3, #16
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e10b      	b.n	8007922 <UART_SetConfig+0x346>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a69      	ldr	r2, [pc, #420]	; (80078b4 <UART_SetConfig+0x2d8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d120      	bne.n	8007756 <UART_SetConfig+0x17a>
 8007714:	4b65      	ldr	r3, [pc, #404]	; (80078ac <UART_SetConfig+0x2d0>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	d013      	beq.n	800774a <UART_SetConfig+0x16e>
 8007722:	2b30      	cmp	r3, #48	; 0x30
 8007724:	d814      	bhi.n	8007750 <UART_SetConfig+0x174>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d009      	beq.n	800773e <UART_SetConfig+0x162>
 800772a:	2b20      	cmp	r3, #32
 800772c:	d810      	bhi.n	8007750 <UART_SetConfig+0x174>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <UART_SetConfig+0x15c>
 8007732:	2b10      	cmp	r3, #16
 8007734:	d006      	beq.n	8007744 <UART_SetConfig+0x168>
 8007736:	e00b      	b.n	8007750 <UART_SetConfig+0x174>
 8007738:	2300      	movs	r3, #0
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e0f1      	b.n	8007922 <UART_SetConfig+0x346>
 800773e:	2302      	movs	r3, #2
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e0ee      	b.n	8007922 <UART_SetConfig+0x346>
 8007744:	2304      	movs	r3, #4
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e0eb      	b.n	8007922 <UART_SetConfig+0x346>
 800774a:	2308      	movs	r3, #8
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e0e8      	b.n	8007922 <UART_SetConfig+0x346>
 8007750:	2310      	movs	r3, #16
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e0e5      	b.n	8007922 <UART_SetConfig+0x346>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a57      	ldr	r2, [pc, #348]	; (80078b8 <UART_SetConfig+0x2dc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d120      	bne.n	80077a2 <UART_SetConfig+0x1c6>
 8007760:	4b52      	ldr	r3, [pc, #328]	; (80078ac <UART_SetConfig+0x2d0>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800776a:	2bc0      	cmp	r3, #192	; 0xc0
 800776c:	d013      	beq.n	8007796 <UART_SetConfig+0x1ba>
 800776e:	2bc0      	cmp	r3, #192	; 0xc0
 8007770:	d814      	bhi.n	800779c <UART_SetConfig+0x1c0>
 8007772:	2b80      	cmp	r3, #128	; 0x80
 8007774:	d009      	beq.n	800778a <UART_SetConfig+0x1ae>
 8007776:	2b80      	cmp	r3, #128	; 0x80
 8007778:	d810      	bhi.n	800779c <UART_SetConfig+0x1c0>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <UART_SetConfig+0x1a8>
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d006      	beq.n	8007790 <UART_SetConfig+0x1b4>
 8007782:	e00b      	b.n	800779c <UART_SetConfig+0x1c0>
 8007784:	2300      	movs	r3, #0
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e0cb      	b.n	8007922 <UART_SetConfig+0x346>
 800778a:	2302      	movs	r3, #2
 800778c:	77fb      	strb	r3, [r7, #31]
 800778e:	e0c8      	b.n	8007922 <UART_SetConfig+0x346>
 8007790:	2304      	movs	r3, #4
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e0c5      	b.n	8007922 <UART_SetConfig+0x346>
 8007796:	2308      	movs	r3, #8
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e0c2      	b.n	8007922 <UART_SetConfig+0x346>
 800779c:	2310      	movs	r3, #16
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e0bf      	b.n	8007922 <UART_SetConfig+0x346>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a45      	ldr	r2, [pc, #276]	; (80078bc <UART_SetConfig+0x2e0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d125      	bne.n	80077f8 <UART_SetConfig+0x21c>
 80077ac:	4b3f      	ldr	r3, [pc, #252]	; (80078ac <UART_SetConfig+0x2d0>)
 80077ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ba:	d017      	beq.n	80077ec <UART_SetConfig+0x210>
 80077bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c0:	d817      	bhi.n	80077f2 <UART_SetConfig+0x216>
 80077c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c6:	d00b      	beq.n	80077e0 <UART_SetConfig+0x204>
 80077c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077cc:	d811      	bhi.n	80077f2 <UART_SetConfig+0x216>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <UART_SetConfig+0x1fe>
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d6:	d006      	beq.n	80077e6 <UART_SetConfig+0x20a>
 80077d8:	e00b      	b.n	80077f2 <UART_SetConfig+0x216>
 80077da:	2300      	movs	r3, #0
 80077dc:	77fb      	strb	r3, [r7, #31]
 80077de:	e0a0      	b.n	8007922 <UART_SetConfig+0x346>
 80077e0:	2302      	movs	r3, #2
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e09d      	b.n	8007922 <UART_SetConfig+0x346>
 80077e6:	2304      	movs	r3, #4
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e09a      	b.n	8007922 <UART_SetConfig+0x346>
 80077ec:	2308      	movs	r3, #8
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e097      	b.n	8007922 <UART_SetConfig+0x346>
 80077f2:	2310      	movs	r3, #16
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e094      	b.n	8007922 <UART_SetConfig+0x346>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <UART_SetConfig+0x2e4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d125      	bne.n	800784e <UART_SetConfig+0x272>
 8007802:	4b2a      	ldr	r3, [pc, #168]	; (80078ac <UART_SetConfig+0x2d0>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800780c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007810:	d017      	beq.n	8007842 <UART_SetConfig+0x266>
 8007812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007816:	d817      	bhi.n	8007848 <UART_SetConfig+0x26c>
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781c:	d00b      	beq.n	8007836 <UART_SetConfig+0x25a>
 800781e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007822:	d811      	bhi.n	8007848 <UART_SetConfig+0x26c>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <UART_SetConfig+0x254>
 8007828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782c:	d006      	beq.n	800783c <UART_SetConfig+0x260>
 800782e:	e00b      	b.n	8007848 <UART_SetConfig+0x26c>
 8007830:	2301      	movs	r3, #1
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e075      	b.n	8007922 <UART_SetConfig+0x346>
 8007836:	2302      	movs	r3, #2
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e072      	b.n	8007922 <UART_SetConfig+0x346>
 800783c:	2304      	movs	r3, #4
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e06f      	b.n	8007922 <UART_SetConfig+0x346>
 8007842:	2308      	movs	r3, #8
 8007844:	77fb      	strb	r3, [r7, #31]
 8007846:	e06c      	b.n	8007922 <UART_SetConfig+0x346>
 8007848:	2310      	movs	r3, #16
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	e069      	b.n	8007922 <UART_SetConfig+0x346>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1c      	ldr	r2, [pc, #112]	; (80078c4 <UART_SetConfig+0x2e8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d137      	bne.n	80078c8 <UART_SetConfig+0x2ec>
 8007858:	4b14      	ldr	r3, [pc, #80]	; (80078ac <UART_SetConfig+0x2d0>)
 800785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007866:	d017      	beq.n	8007898 <UART_SetConfig+0x2bc>
 8007868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800786c:	d817      	bhi.n	800789e <UART_SetConfig+0x2c2>
 800786e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007872:	d00b      	beq.n	800788c <UART_SetConfig+0x2b0>
 8007874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007878:	d811      	bhi.n	800789e <UART_SetConfig+0x2c2>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <UART_SetConfig+0x2aa>
 800787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007882:	d006      	beq.n	8007892 <UART_SetConfig+0x2b6>
 8007884:	e00b      	b.n	800789e <UART_SetConfig+0x2c2>
 8007886:	2300      	movs	r3, #0
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e04a      	b.n	8007922 <UART_SetConfig+0x346>
 800788c:	2302      	movs	r3, #2
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e047      	b.n	8007922 <UART_SetConfig+0x346>
 8007892:	2304      	movs	r3, #4
 8007894:	77fb      	strb	r3, [r7, #31]
 8007896:	e044      	b.n	8007922 <UART_SetConfig+0x346>
 8007898:	2308      	movs	r3, #8
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e041      	b.n	8007922 <UART_SetConfig+0x346>
 800789e:	2310      	movs	r3, #16
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e03e      	b.n	8007922 <UART_SetConfig+0x346>
 80078a4:	efff69f3 	.word	0xefff69f3
 80078a8:	40011000 	.word	0x40011000
 80078ac:	40023800 	.word	0x40023800
 80078b0:	40004400 	.word	0x40004400
 80078b4:	40004800 	.word	0x40004800
 80078b8:	40004c00 	.word	0x40004c00
 80078bc:	40005000 	.word	0x40005000
 80078c0:	40011400 	.word	0x40011400
 80078c4:	40007800 	.word	0x40007800
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a71      	ldr	r2, [pc, #452]	; (8007a94 <UART_SetConfig+0x4b8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d125      	bne.n	800791e <UART_SetConfig+0x342>
 80078d2:	4b71      	ldr	r3, [pc, #452]	; (8007a98 <UART_SetConfig+0x4bc>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80078dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078e0:	d017      	beq.n	8007912 <UART_SetConfig+0x336>
 80078e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078e6:	d817      	bhi.n	8007918 <UART_SetConfig+0x33c>
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ec:	d00b      	beq.n	8007906 <UART_SetConfig+0x32a>
 80078ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f2:	d811      	bhi.n	8007918 <UART_SetConfig+0x33c>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <UART_SetConfig+0x324>
 80078f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078fc:	d006      	beq.n	800790c <UART_SetConfig+0x330>
 80078fe:	e00b      	b.n	8007918 <UART_SetConfig+0x33c>
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e00d      	b.n	8007922 <UART_SetConfig+0x346>
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e00a      	b.n	8007922 <UART_SetConfig+0x346>
 800790c:	2304      	movs	r3, #4
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e007      	b.n	8007922 <UART_SetConfig+0x346>
 8007912:	2308      	movs	r3, #8
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e004      	b.n	8007922 <UART_SetConfig+0x346>
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e001      	b.n	8007922 <UART_SetConfig+0x346>
 800791e:	2310      	movs	r3, #16
 8007920:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792a:	d15a      	bne.n	80079e2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800792c:	7ffb      	ldrb	r3, [r7, #31]
 800792e:	2b08      	cmp	r3, #8
 8007930:	d827      	bhi.n	8007982 <UART_SetConfig+0x3a6>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x35c>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007983 	.word	0x08007983
 8007948:	08007973 	.word	0x08007973
 800794c:	08007983 	.word	0x08007983
 8007950:	08007983 	.word	0x08007983
 8007954:	08007983 	.word	0x08007983
 8007958:	0800797b 	.word	0x0800797b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fc ff84 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8007960:	61b8      	str	r0, [r7, #24]
        break;
 8007962:	e013      	b.n	800798c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fc ff94 	bl	8004890 <HAL_RCC_GetPCLK2Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e00f      	b.n	800798c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b4b      	ldr	r3, [pc, #300]	; (8007a9c <UART_SetConfig+0x4c0>)
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00c      	b.n	800798c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fc fe8b 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8007976:	61b8      	str	r0, [r7, #24]
        break;
 8007978:	e008      	b.n	800798c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e004      	b.n	800798c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	77bb      	strb	r3, [r7, #30]
        break;
 800798a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d074      	beq.n	8007a7c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	005a      	lsls	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	441a      	add	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	d916      	bls.n	80079dc <UART_SetConfig+0x400>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b4:	d212      	bcs.n	80079dc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f023 030f 	bic.w	r3, r3, #15
 80079be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	89fb      	ldrh	r3, [r7, #14]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	89fa      	ldrh	r2, [r7, #14]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	e04f      	b.n	8007a7c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	77bb      	strb	r3, [r7, #30]
 80079e0:	e04c      	b.n	8007a7c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079e2:	7ffb      	ldrb	r3, [r7, #31]
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d828      	bhi.n	8007a3a <UART_SetConfig+0x45e>
 80079e8:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x414>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	08007a3b 	.word	0x08007a3b
 8007a00:	08007a2b 	.word	0x08007a2b
 8007a04:	08007a3b 	.word	0x08007a3b
 8007a08:	08007a3b 	.word	0x08007a3b
 8007a0c:	08007a3b 	.word	0x08007a3b
 8007a10:	08007a33 	.word	0x08007a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a14:	f7fc ff28 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8007a18:	61b8      	str	r0, [r7, #24]
        break;
 8007a1a:	e013      	b.n	8007a44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a1c:	f7fc ff38 	bl	8004890 <HAL_RCC_GetPCLK2Freq>
 8007a20:	61b8      	str	r0, [r7, #24]
        break;
 8007a22:	e00f      	b.n	8007a44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a24:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <UART_SetConfig+0x4c0>)
 8007a26:	61bb      	str	r3, [r7, #24]
        break;
 8007a28:	e00c      	b.n	8007a44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a2a:	f7fc fe2f 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8007a2e:	61b8      	str	r0, [r7, #24]
        break;
 8007a30:	e008      	b.n	8007a44 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a36:	61bb      	str	r3, [r7, #24]
        break;
 8007a38:	e004      	b.n	8007a44 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	77bb      	strb	r3, [r7, #30]
        break;
 8007a42:	bf00      	nop
    }

    if (pclk != 0U)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	085a      	lsrs	r2, r3, #1
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	441a      	add	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b0f      	cmp	r3, #15
 8007a62:	d909      	bls.n	8007a78 <UART_SetConfig+0x49c>
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	d205      	bcs.n	8007a78 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60da      	str	r2, [r3, #12]
 8007a76:	e001      	b.n	8007a7c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a88:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40007c00 	.word	0x40007c00
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	00f42400 	.word	0x00f42400

08007aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01a      	beq.n	8007bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b9e:	d10a      	bne.n	8007bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	605a      	str	r2, [r3, #4]
  }
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bf4:	f7fa f990 	bl	8001f18 <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d10e      	bne.n	8007c26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f82d 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e023      	b.n	8007c6e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d10e      	bne.n	8007c52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f817 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e00d      	b.n	8007c6e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b09c      	sub	sp, #112	; 0x70
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c86:	e0a5      	b.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	f000 80a1 	beq.w	8007dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fa f941 	bl	8001f18 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d13e      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2220      	movs	r2, #32
 8007d18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e067      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d04f      	beq.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d42:	d147      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e6      	bne.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007da0:	623a      	str	r2, [r7, #32]
 8007da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e5      	bne.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e010      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69da      	ldr	r2, [r3, #28]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	f43f af4a 	beq.w	8007c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3770      	adds	r7, #112	; 0x70
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b096      	sub	sp, #88	; 0x58
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2222      	movs	r2, #34	; 0x22
 8007e28:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d02b      	beq.n	8007e8a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e36:	4a42      	ldr	r2, [pc, #264]	; (8007f40 <UART_Start_Receive_DMA+0x140>)
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3e:	4a41      	ldr	r2, [pc, #260]	; (8007f44 <UART_Start_Receive_DMA+0x144>)
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <UART_Start_Receive_DMA+0x148>)
 8007e48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	2200      	movs	r2, #0
 8007e50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e62:	461a      	mov	r2, r3
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	f7fa fd4b 	bl	8002900 <HAL_DMA_Start_IT>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2210      	movs	r2, #16
 8007e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e055      	b.n	8007f36 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eae:	657b      	str	r3, [r7, #84]	; 0x54
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e6      	bne.n	8007e9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eec:	637a      	str	r2, [r7, #52]	; 0x34
 8007eee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f20:	623a      	str	r2, [r7, #32]
 8007f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	69f9      	ldr	r1, [r7, #28]
 8007f26:	6a3a      	ldr	r2, [r7, #32]
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e5      	bne.n	8007f00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3758      	adds	r7, #88	; 0x58
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	0800805f 	.word	0x0800805f
 8007f44:	0800817f 	.word	0x0800817f
 8007f48:	080081b7 	.word	0x080081b7

08007f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	; 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007f8c:	bf00      	nop
 8007f8e:	3724      	adds	r7, #36	; 0x24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b095      	sub	sp, #84	; 0x54
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e6      	bne.n	8007fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800800a:	2b01      	cmp	r3, #1
 800800c:	d118      	bne.n	8008040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	60bb      	str	r3, [r7, #8]
   return(result);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	647b      	str	r3, [r7, #68]	; 0x44
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6979      	ldr	r1, [r7, #20]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	613b      	str	r3, [r7, #16]
   return(result);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008052:	bf00      	nop
 8008054:	3754      	adds	r7, #84	; 0x54
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b09c      	sub	sp, #112	; 0x70
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008074:	d070      	beq.n	8008158 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	2200      	movs	r2, #0
 800807a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800808c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008092:	66bb      	str	r3, [r7, #104]	; 0x68
 8008094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800809c:	65bb      	str	r3, [r7, #88]	; 0x58
 800809e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3308      	adds	r3, #8
 80080b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	667b      	str	r3, [r7, #100]	; 0x64
 80080c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080d0:	647a      	str	r2, [r7, #68]	; 0x44
 80080d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	623b      	str	r3, [r7, #32]
   return(result);
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fa:	663b      	str	r3, [r7, #96]	; 0x60
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008104:	633a      	str	r2, [r7, #48]	; 0x30
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e5      	bne.n	80080e4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	2220      	movs	r2, #32
 800811c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	2b01      	cmp	r3, #1
 8008124:	d118      	bne.n	8008158 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	60fb      	str	r3, [r7, #12]
   return(result);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0310 	bic.w	r3, r3, #16
 800813a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	69b9      	ldr	r1, [r7, #24]
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	617b      	str	r3, [r7, #20]
   return(result);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e6      	bne.n	8008126 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	2b01      	cmp	r3, #1
 800815e:	d107      	bne.n	8008170 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008162:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008166:	4619      	mov	r1, r3
 8008168:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800816a:	f7ff fa21 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800816e:	e002      	b.n	8008176 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8008170:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008172:	f7ff f9ff 	bl	8007574 <HAL_UART_RxCpltCallback>
}
 8008176:	bf00      	nop
 8008178:	3770      	adds	r7, #112	; 0x70
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008190:	2b01      	cmp	r3, #1
 8008192:	d109      	bne.n	80081a8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	b29b      	uxth	r3, r3
 800819e:	4619      	mov	r1, r3
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff fa05 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081a6:	e002      	b.n	80081ae <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff f9ed 	bl	8007588 <HAL_UART_RxHalfCpltCallback>
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081da:	2b80      	cmp	r3, #128	; 0x80
 80081dc:	d109      	bne.n	80081f2 <UART_DMAError+0x3c>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b21      	cmp	r3, #33	; 0x21
 80081e2:	d106      	bne.n	80081f2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80081ec:	6978      	ldr	r0, [r7, #20]
 80081ee:	f7ff fead 	bl	8007f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d109      	bne.n	8008214 <UART_DMAError+0x5e>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b22      	cmp	r3, #34	; 0x22
 8008204:	d106      	bne.n	8008214 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800820e:	6978      	ldr	r0, [r7, #20]
 8008210:	f7ff fec2 	bl	8007f98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800821a:	f043 0210 	orr.w	r2, r3, #16
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008224:	6978      	ldr	r0, [r7, #20]
 8008226:	f7ff f9b9 	bl	800759c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff f9a3 	bl	800759c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	60bb      	str	r3, [r7, #8]
   return(result);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6979      	ldr	r1, [r7, #20]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	613b      	str	r3, [r7, #16]
   return(result);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e6      	bne.n	8008266 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff f95b 	bl	8007560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082aa:	bf00      	nop
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <ESP_CheckRX>:
				     uint32_t blockingTimeOut,
					 U32_pFn_pC_pC_U32_pC_pU32 processFn,
					 char * keyWord,
					 char **retStr,
					 uint32_t * retU32)
{
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b08b      	sub	sp, #44	; 0x2c
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
	uint32_t rxResult = ESP_HARD_ERR;
 80082c2:	f06f 0305 	mvn.w	r3, #5
 80082c6:	61bb      	str	r3, [r7, #24]
	uint32_t processingResult = ESP_HARD_ERR;
 80082c8:	f06f 0305 	mvn.w	r3, #5
 80082cc:	61fb      	str	r3, [r7, #28]
	uint32_t okAlreadyArrived = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

	if(blockingTimeOut)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d04c      	beq.n	8008372 <ESP_CheckRX+0xbe>
	{
		do
		{
			rxResult = ESP_CheckRX_DMA_XUART(timeOut);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f951 	bl	8008580 <ESP_CheckRX_DMA_XUART>
 80082de:	61b8      	str	r0, [r7, #24]
		}
		while(rxResult == ESP_RX_PENDING /*|| rxResult == ESP_TX_TIMEOUT*/ || rxResult == ESP_RX_SILENT);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f113 0f04 	cmn.w	r3, #4
 80082e6:	d0f7      	beq.n	80082d8 <ESP_CheckRX+0x24>
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f113 0f02 	cmn.w	r3, #2
 80082ee:	d0f3      	beq.n	80082d8 <ESP_CheckRX+0x24>

		if(rxResult == ESP_OK)
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d13a      	bne.n	800836c <ESP_CheckRX+0xb8>
		{
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 80082f6:	e032      	b.n	800835e <ESP_CheckRX+0xaa>
			{
#if PRINT_EACH_RECEIVE
				HAL_UART_Transmit(&huart3,
						(uint8_t*)comUsrBuffer[comUserBufferMsgReadIdx],
 80082f8:	4b46      	ldr	r3, [pc, #280]	; (8008414 <ESP_CheckRX+0x160>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	4413      	add	r3, r2
 8008302:	4a45      	ldr	r2, [pc, #276]	; (8008418 <ESP_CheckRX+0x164>)
 8008304:	1899      	adds	r1, r3, r2
						(uint16_t)comUsrBufferLen[comUserBufferMsgReadIdx],
 8008306:	4b43      	ldr	r3, [pc, #268]	; (8008414 <ESP_CheckRX+0x160>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a44      	ldr	r2, [pc, #272]	; (800841c <ESP_CheckRX+0x168>)
 800830c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				HAL_UART_Transmit(&huart3,
 8008310:	b29a      	uxth	r2, r3
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
 8008316:	4842      	ldr	r0, [pc, #264]	; (8008420 <ESP_CheckRX+0x16c>)
 8008318:	f7fe fd60 	bl	8006ddc <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*)("\r\n"), 2, HAL_MAX_DELAY);
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	2202      	movs	r2, #2
 8008322:	4940      	ldr	r1, [pc, #256]	; (8008424 <ESP_CheckRX+0x170>)
 8008324:	483e      	ldr	r0, [pc, #248]	; (8008420 <ESP_CheckRX+0x16c>)
 8008326:	f7fe fd59 	bl	8006ddc <HAL_UART_Transmit>
#endif
				processingResult = processFn(keyWord,
											comUsrBuffer[comUserBufferMsgReadIdx],
 800832a:	4b3a      	ldr	r3, [pc, #232]	; (8008414 <ESP_CheckRX+0x160>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4613      	mov	r3, r2
 8008330:	029b      	lsls	r3, r3, #10
 8008332:	4413      	add	r3, r2
 8008334:	4a38      	ldr	r2, [pc, #224]	; (8008418 <ESP_CheckRX+0x164>)
 8008336:	1899      	adds	r1, r3, r2
				processingResult = processFn(keyWord,
 8008338:	4b36      	ldr	r3, [pc, #216]	; (8008414 <ESP_CheckRX+0x160>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a37      	ldr	r2, [pc, #220]	; (800841c <ESP_CheckRX+0x168>)
 800833e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	687c      	ldr	r4, [r7, #4]
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	6838      	ldr	r0, [r7, #0]
 800834c:	47a0      	blx	r4
 800834e:	61f8      	str	r0, [r7, #28]
											comUsrBufferLen[comUserBufferMsgReadIdx],
											retStr,
											retU32);
				comUserBufferMsgReadIdx = (comUserBufferMsgReadIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 8008350:	4b30      	ldr	r3, [pc, #192]	; (8008414 <ESP_CheckRX+0x160>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	4a2e      	ldr	r2, [pc, #184]	; (8008414 <ESP_CheckRX+0x160>)
 800835c:	6013      	str	r3, [r2, #0]
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 800835e:	4b32      	ldr	r3, [pc, #200]	; (8008428 <ESP_CheckRX+0x174>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <ESP_CheckRX+0x160>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d1c6      	bne.n	80082f8 <ESP_CheckRX+0x44>
 800836a:	e046      	b.n	80083fa <ESP_CheckRX+0x146>
			}
		}
		else
		{
			processingResult = rxResult;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	e043      	b.n	80083fa <ESP_CheckRX+0x146>
		}
	}
	else
	{
		if ((rxResult = ESP_CheckRX_DMA_XUART(timeOut)) == ESP_OK)
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f904 	bl	8008580 <ESP_CheckRX_DMA_XUART>
 8008378:	61b8      	str	r0, [r7, #24]
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d13a      	bne.n	80083f6 <ESP_CheckRX+0x142>
		{
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 8008380:	e032      	b.n	80083e8 <ESP_CheckRX+0x134>
			{
#if PRINT_EACH_RECEIVE
				HAL_UART_Transmit(&huart3,
						(uint8_t*)comUsrBuffer[comUserBufferMsgReadIdx],
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <ESP_CheckRX+0x160>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4613      	mov	r3, r2
 8008388:	029b      	lsls	r3, r3, #10
 800838a:	4413      	add	r3, r2
 800838c:	4a22      	ldr	r2, [pc, #136]	; (8008418 <ESP_CheckRX+0x164>)
 800838e:	1899      	adds	r1, r3, r2
						(uint16_t)comUsrBufferLen[comUserBufferMsgReadIdx],
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <ESP_CheckRX+0x160>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a21      	ldr	r2, [pc, #132]	; (800841c <ESP_CheckRX+0x168>)
 8008396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				HAL_UART_Transmit(&huart3,
 800839a:	b29a      	uxth	r2, r3
 800839c:	f04f 33ff 	mov.w	r3, #4294967295
 80083a0:	481f      	ldr	r0, [pc, #124]	; (8008420 <ESP_CheckRX+0x16c>)
 80083a2:	f7fe fd1b 	bl	8006ddc <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*)("\r\n"), 2, HAL_MAX_DELAY);
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	2202      	movs	r2, #2
 80083ac:	491d      	ldr	r1, [pc, #116]	; (8008424 <ESP_CheckRX+0x170>)
 80083ae:	481c      	ldr	r0, [pc, #112]	; (8008420 <ESP_CheckRX+0x16c>)
 80083b0:	f7fe fd14 	bl	8006ddc <HAL_UART_Transmit>
#endif
				processingResult = processFn(keyWord,
											comUsrBuffer[comUserBufferMsgReadIdx],
 80083b4:	4b17      	ldr	r3, [pc, #92]	; (8008414 <ESP_CheckRX+0x160>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	029b      	lsls	r3, r3, #10
 80083bc:	4413      	add	r3, r2
 80083be:	4a16      	ldr	r2, [pc, #88]	; (8008418 <ESP_CheckRX+0x164>)
 80083c0:	1899      	adds	r1, r3, r2
				processingResult = processFn(keyWord,
 80083c2:	4b14      	ldr	r3, [pc, #80]	; (8008414 <ESP_CheckRX+0x160>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <ESP_CheckRX+0x168>)
 80083c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	687c      	ldr	r4, [r7, #4]
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	6838      	ldr	r0, [r7, #0]
 80083d6:	47a0      	blx	r4
 80083d8:	61f8      	str	r0, [r7, #28]
											comUsrBufferLen[comUserBufferMsgReadIdx],
											retStr,
											retU32);
				comUserBufferMsgReadIdx = (comUserBufferMsgReadIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <ESP_CheckRX+0x160>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <ESP_CheckRX+0x160>)
 80083e6:	6013      	str	r3, [r2, #0]
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 80083e8:	4b0f      	ldr	r3, [pc, #60]	; (8008428 <ESP_CheckRX+0x174>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b09      	ldr	r3, [pc, #36]	; (8008414 <ESP_CheckRX+0x160>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d1c6      	bne.n	8008382 <ESP_CheckRX+0xce>
 80083f4:	e001      	b.n	80083fa <ESP_CheckRX+0x146>
			}
		}
		else
		{
			processingResult = rxResult;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	61fb      	str	r3, [r7, #28]
		}
	}


	if(okAlreadyArrived && processingResult != ESP_OK)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <ESP_CheckRX+0x156>
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <ESP_CheckRX+0x156>
	{
		processingResult = ESP_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
	}

	return processingResult;
 800840a:	69fb      	ldr	r3, [r7, #28]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3724      	adds	r7, #36	; 0x24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd90      	pop	{r4, r7, pc}
 8008414:	200014b8 	.word	0x200014b8
 8008418:	200004a0 	.word	0x200004a0
 800841c:	200014a4 	.word	0x200014a4
 8008420:	20001840 	.word	0x20001840
 8008424:	0800a970 	.word	0x0800a970
 8008428:	200014b4 	.word	0x200014b4

0800842c <ESP_CheckResponse>:

uint8_t* ESP_CheckResponse(char *pCmd, uint32_t cmdLng, uint32_t timeOut)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	; 0x28
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	const uint32_t blockingTimeoutYes = 1u;
 8008438:	2301      	movs	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]

	uint32_t result = ESP_RSP_ERR;
 800843c:	f06f 0306 	mvn.w	r3, #6
 8008440:	61bb      	str	r3, [r7, #24]
	uint32_t pDummyU32;

	char *pDummyC = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]

	result = ESP_CheckRX(timeOut, blockingTimeoutYes, ESP_CheckForKeyWord, pCmd, &pDummyC, &pDummyU32);
 8008446:	f107 0314 	add.w	r3, r7, #20
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a07      	ldr	r2, [pc, #28]	; (8008474 <ESP_CheckResponse+0x48>)
 8008456:	69f9      	ldr	r1, [r7, #28]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ff2b 	bl	80082b4 <ESP_CheckRX>
 800845e:	61b8      	str	r0, [r7, #24]

	if (ESP_OK != result)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <ESP_CheckResponse+0x3e>
	{
		pDummyC = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
	}

	return (uint8_t*)pDummyC;
 800846a:	693b      	ldr	r3, [r7, #16]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	08008785 	.word	0x08008785

08008478 <ESP_HTTPinit>:
#define atCmd_CWJAP_LNG		(uint32_t)(strlen("AT+CWJAP="))

static char httpReqBuff[MAX_HTTP_REQ_SIZE + 1] = {0};

uint32_t ESP_HTTPinit (void)
{
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b0a5      	sub	sp, #148	; 0x94
 800847c:	af00      	add	r7, sp, #0

	uint32_t result = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint8_t* subResult = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint8_t pSSIDpassword[EEPROM_PAGE_SIZE/2];

	// UART init and activate-deactivate RST pin of ESP8266
	ESP_ComInit();
 800848a:	f000 f93b 	bl	8008704 <ESP_ComInit>

	// Software reset
	for(uint8_t resetAttempts = 0; resetAttempts < 3; resetAttempts++)
 800848e:	2300      	movs	r3, #0
 8008490:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8008494:	e02b      	b.n	80084ee <ESP_HTTPinit+0x76>
	{
	    ESP_SendCommand(atCmd_RST, strlen(atCmd_RST));
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <ESP_HTTPinit+0x88>)
 8008498:	681c      	ldr	r4, [r3, #0]
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <ESP_HTTPinit+0x88>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f7 fece 	bl	8000240 <strlen>
 80084a4:	4603      	mov	r3, r0
 80084a6:	4619      	mov	r1, r3
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 f93b 	bl	8008724 <ESP_SendCommand>
	    if(NULL == ESP_CheckResponse((char*)atRsp_ready, strlen(atRsp_ready), ESP_TIMEOUT_2s))
 80084ae:	4b15      	ldr	r3, [pc, #84]	; (8008504 <ESP_HTTPinit+0x8c>)
 80084b0:	681c      	ldr	r4, [r3, #0]
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <ESP_HTTPinit+0x8c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f7 fec2 	bl	8000240 <strlen>
 80084bc:	4603      	mov	r3, r0
 80084be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80084c2:	4619      	mov	r1, r3
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7ff ffb1 	bl	800842c <ESP_CheckResponse>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d105      	bne.n	80084dc <ESP_HTTPinit+0x64>
	    {
	    	result++;
 80084d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084d4:	3301      	adds	r3, #1
 80084d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084da:	e003      	b.n	80084e4 <ESP_HTTPinit+0x6c>
	    }
	    else
	    {
	    	result = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	    	break;
 80084e2:	e008      	b.n	80084f6 <ESP_HTTPinit+0x7e>
	for(uint8_t resetAttempts = 0; resetAttempts < 3; resetAttempts++)
 80084e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80084e8:	3301      	adds	r3, #1
 80084ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80084ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d9cf      	bls.n	8008496 <ESP_HTTPinit+0x1e>
	    }
	}

#warning CUT HERE
	return 0;
 80084f6:	2300      	movs	r3, #0
    if(NULL == ESP_CheckResponse((char*)atRsp_OK, strlen(atRsp_OK), ESP_TIMEOUT_300ms)) result++;

    result = (result) ? ESP_HARD_ERR : ESP_OK;

    return result;
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3794      	adds	r7, #148	; 0x94
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd90      	pop	{r4, r7, pc}
 8008500:	2000000c 	.word	0x2000000c
 8008504:	20000010 	.word	0x20000010

08008508 <Do_2Sec_Reset>:
static uint32_t sendTimeOut = 0;
static uint32_t sendTimeOutStarted = 0;


static uint32_t Do_2Sec_Reset(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 800850c:	2200      	movs	r2, #0
 800850e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008512:	4810      	ldr	r0, [pc, #64]	; (8008554 <Do_2Sec_Reset+0x4c>)
 8008514:	f7fb fb7e 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8008518:	2201      	movs	r2, #1
 800851a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800851e:	480d      	ldr	r0, [pc, #52]	; (8008554 <Do_2Sec_Reset+0x4c>)
 8008520:	f7fb fb78 	bl	8003c14 <HAL_GPIO_WritePin>
	PLATFORM_DELAY_MS(ESP_TIMEOUT_1s);
 8008524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008528:	f7f9 fd02 	bl	8001f30 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 800852c:	2201      	movs	r2, #1
 800852e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008532:	4808      	ldr	r0, [pc, #32]	; (8008554 <Do_2Sec_Reset+0x4c>)
 8008534:	f7fb fb6e 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_RESET);
 8008538:	2200      	movs	r2, #0
 800853a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800853e:	4805      	ldr	r0, [pc, #20]	; (8008554 <Do_2Sec_Reset+0x4c>)
 8008540:	f7fb fb68 	bl	8003c14 <HAL_GPIO_WritePin>
	PLATFORM_DELAY_MS(ESP_TIMEOUT_1s);
 8008544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008548:	f7f9 fcf2 	bl	8001f30 <HAL_Delay>
	return 0;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	40021000 	.word	0x40021000

08008558 <Start_DMA_XUART>:

uint32_t Start_DMA_XUART(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
	uint32_t result;
	result = (uint32_t)HAL_UART_Receive_DMA(&huart7, (uint8_t*)uartX_rx_buf, ESP_COM_BUFF_LNG);
 800855e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008562:	4905      	ldr	r1, [pc, #20]	; (8008578 <Start_DMA_XUART+0x20>)
 8008564:	4805      	ldr	r0, [pc, #20]	; (800857c <Start_DMA_XUART+0x24>)
 8008566:	f7fe fccc 	bl	8006f02 <HAL_UART_Receive_DMA>
 800856a:	4603      	mov	r3, r0
 800856c:	607b      	str	r3, [r7, #4]
	return result;
 800856e:	687b      	ldr	r3, [r7, #4]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200000a0 	.word	0x200000a0
 800857c:	200017bc 	.word	0x200017bc

08008580 <ESP_CheckRX_DMA_XUART>:
 * ESP_NEVER_VALUE - initial value which must not be ever returned
 *
 */

uint32_t ESP_CheckRX_DMA_XUART(const uint32_t timeout)
{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

	uint32_t result = ESP_NEVER_VALUE;
 8008588:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800858c:	617b      	str	r3, [r7, #20]
	uint32_t writtenChars = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]

	static uint32_t timeOut = 0;
	static uint32_t timeOutStarted = 0;

	/* If any bytes were received */
	if (uartX_rx_read_ptr != (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR))
 8008592:	4b52      	ldr	r3, [pc, #328]	; (80086dc <ESP_CheckRX_DMA_XUART+0x15c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800859c:	4b50      	ldr	r3, [pc, #320]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d07b      	beq.n	800869c <ESP_CheckRX_DMA_XUART+0x11c>
	{
		/* and was expected response from previous command, cancel timeout timer of the command */
		if(sendTimeOutStarted)
 80085a4:	4b4f      	ldr	r3, [pc, #316]	; (80086e4 <ESP_CheckRX_DMA_XUART+0x164>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <ESP_CheckRX_DMA_XUART+0x32>
		{
			sendTimeOutStarted = 0;
 80085ac:	4b4d      	ldr	r3, [pc, #308]	; (80086e4 <ESP_CheckRX_DMA_XUART+0x164>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
		}

		/* If timer to receive all bytes was not started yet*/
		if(!timeOutStarted)
 80085b2:	4b4d      	ldr	r3, [pc, #308]	; (80086e8 <ESP_CheckRX_DMA_XUART+0x168>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <ESP_CheckRX_DMA_XUART+0x52>
		{
			/* start timer to wait until all bytes can arrive*/
			timeOutStarted = 1;
 80085ba:	4b4b      	ldr	r3, [pc, #300]	; (80086e8 <ESP_CheckRX_DMA_XUART+0x168>)
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]
			timeOut = HAL_GetTick();
 80085c0:	f7f9 fcaa 	bl	8001f18 <HAL_GetTick>
 80085c4:	4603      	mov	r3, r0
 80085c6:	4a49      	ldr	r2, [pc, #292]	; (80086ec <ESP_CheckRX_DMA_XUART+0x16c>)
 80085c8:	6013      	str	r3, [r2, #0]
			result = ESP_RX_PENDING;
 80085ca:	f06f 0303 	mvn.w	r3, #3
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e07b      	b.n	80086ca <ESP_CheckRX_DMA_XUART+0x14a>
		}
		else
		{
			/* If timer was started and timeout elapsed, retrieve bytes */
			if (timeOut + timeout < HAL_GetTick())
 80085d2:	4b46      	ldr	r3, [pc, #280]	; (80086ec <ESP_CheckRX_DMA_XUART+0x16c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	18d4      	adds	r4, r2, r3
 80085da:	f7f9 fc9d 	bl	8001f18 <HAL_GetTick>
 80085de:	4603      	mov	r3, r0
 80085e0:	429c      	cmp	r4, r3
 80085e2:	d257      	bcs.n	8008694 <ESP_CheckRX_DMA_XUART+0x114>
			{
				/* cancel timer to receive all bytes */
				timeOutStarted = 0;
 80085e4:	4b40      	ldr	r3, [pc, #256]	; (80086e8 <ESP_CheckRX_DMA_XUART+0x168>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
				uint32_t uartX_rx_write_ptr = (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR);
 80085ea:	4b3c      	ldr	r3, [pc, #240]	; (80086dc <ESP_CheckRX_DMA_XUART+0x15c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80085f4:	60fb      	str	r3, [r7, #12]
				while (uartX_rx_read_ptr != uartX_rx_write_ptr)
 80085f6:	e047      	b.n	8008688 <ESP_CheckRX_DMA_XUART+0x108>
  __ASM volatile ("isb 0xF":::"memory");
 80085f8:	f3bf 8f6f 	isb	sy
}
 80085fc:	bf00      	nop
				{
					/* Said my teacher that like this it is better ... to really get DMA content actualized .. Don't Know*/
					__ISB(); // something like synchronize internal barriers and force core to refresh contents
					/* Write received char into user buffer */
					comUsrBuffer[comUserBufferMsgIdx][writtenChars] = uartX_rx_buf[uartX_rx_read_ptr];
 80085fe:	4b38      	ldr	r3, [pc, #224]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a3b      	ldr	r2, [pc, #236]	; (80086f0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	493b      	ldr	r1, [pc, #236]	; (80086f4 <ESP_CheckRX_DMA_XUART+0x174>)
 8008608:	5cc8      	ldrb	r0, [r1, r3]
 800860a:	493b      	ldr	r1, [pc, #236]	; (80086f8 <ESP_CheckRX_DMA_XUART+0x178>)
 800860c:	4613      	mov	r3, r2
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	4413      	add	r3, r2
 8008612:	18ca      	adds	r2, r1, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	4413      	add	r3, r2
 8008618:	4602      	mov	r2, r0
 800861a:	701a      	strb	r2, [r3, #0]
					/* Always push in front a null character (buffer element is UART_BUFFSIZE + 1) for better string handling */
					comUsrBuffer[comUserBufferMsgIdx][writtenChars+1] = '\0';
 800861c:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <ESP_CheckRX_DMA_XUART+0x170>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	4834      	ldr	r0, [pc, #208]	; (80086f8 <ESP_CheckRX_DMA_XUART+0x178>)
 8008626:	4613      	mov	r3, r2
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	4413      	add	r3, r2
 800862c:	4403      	add	r3, r0
 800862e:	440b      	add	r3, r1
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]

					uartX_rx_read_ptr = (uartX_rx_read_ptr + (uint32_t)1u) % ESP_COM_BUFF_LNG;
 8008634:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863e:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008640:	6013      	str	r3, [r2, #0]

					/* If the end of the string arrived or string is too long for one line, jump on the next line of comUsrBuffer*/
					if (uartX_rx_read_ptr == uartX_rx_write_ptr || (writtenChars >= (ESP_COM_BUFF_LNG-1)))
 8008642:	4b27      	ldr	r3, [pc, #156]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	429a      	cmp	r2, r3
 800864a:	d004      	beq.n	8008656 <ESP_CheckRX_DMA_XUART+0xd6>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008652:	4293      	cmp	r3, r2
 8008654:	d90f      	bls.n	8008676 <ESP_CheckRX_DMA_XUART+0xf6>
					{
						/* Non-<CR><LF> message received> .. some exception mechanism */
						comUsrBufferLen[comUserBufferMsgIdx] = writtenChars+1;
 8008656:	4b26      	ldr	r3, [pc, #152]	; (80086f0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	3201      	adds	r2, #1
 800865e:	4927      	ldr	r1, [pc, #156]	; (80086fc <ESP_CheckRX_DMA_XUART+0x17c>)
 8008660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						comUserBufferMsgIdx = (comUserBufferMsgIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 8008664:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	4a20      	ldr	r2, [pc, #128]	; (80086f0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008670:	6013      	str	r3, [r2, #0]
						result = ESP_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]
					}
					writtenChars++;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3301      	adds	r3, #1
 800867a:	613b      	str	r3, [r7, #16]
					uartX_rx_write_ptr = (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR);
 800867c:	4b17      	ldr	r3, [pc, #92]	; (80086dc <ESP_CheckRX_DMA_XUART+0x15c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008686:	60fb      	str	r3, [r7, #12]
				while (uartX_rx_read_ptr != uartX_rx_write_ptr)
 8008688:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <ESP_CheckRX_DMA_XUART+0x160>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d1b2      	bne.n	80085f8 <ESP_CheckRX_DMA_XUART+0x78>
 8008692:	e01a      	b.n	80086ca <ESP_CheckRX_DMA_XUART+0x14a>
				}
			}
			else
			{
				/*Otherwise say timeout is pending*/
				result = ESP_RX_PENDING;
 8008694:	f06f 0303 	mvn.w	r3, #3
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e016      	b.n	80086ca <ESP_CheckRX_DMA_XUART+0x14a>
		}
	}
	else
	{
		/* and was expected response from previous command, cancel timeout timer of the command */
		if(sendTimeOutStarted && sendTimeOut + TX_TIMETOUT < HAL_GetTick())
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <ESP_CheckRX_DMA_XUART+0x164>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00f      	beq.n	80086c4 <ESP_CheckRX_DMA_XUART+0x144>
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <ESP_CheckRX_DMA_XUART+0x180>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 80086ac:	f7f9 fc34 	bl	8001f18 <HAL_GetTick>
 80086b0:	4603      	mov	r3, r0
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d206      	bcs.n	80086c4 <ESP_CheckRX_DMA_XUART+0x144>
		{
			sendTimeOutStarted = 0;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <ESP_CheckRX_DMA_XUART+0x164>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
			result = ESP_TX_TIMEOUT;
 80086bc:	f06f 0304 	mvn.w	r3, #4
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e002      	b.n	80086ca <ESP_CheckRX_DMA_XUART+0x14a>
		}
		else
		{
			result = ESP_RX_SILENT;
 80086c4:	f06f 0301 	mvn.w	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]

		}
	}

	while(result == ESP_NEVER_VALUE);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80086d0:	d0fb      	beq.n	80086ca <ESP_CheckRX_DMA_XUART+0x14a>

	return result;
 80086d2:	697b      	ldr	r3, [r7, #20]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}
 80086dc:	200018c4 	.word	0x200018c4
 80086e0:	200014bc 	.word	0x200014bc
 80086e4:	200014c4 	.word	0x200014c4
 80086e8:	200014c8 	.word	0x200014c8
 80086ec:	200014cc 	.word	0x200014cc
 80086f0:	200014b4 	.word	0x200014b4
 80086f4:	200000a0 	.word	0x200000a0
 80086f8:	200004a0 	.word	0x200004a0
 80086fc:	200014a4 	.word	0x200014a4
 8008700:	200014c0 	.word	0x200014c0

08008704 <ESP_ComInit>:

uint32_t ESP_ComInit(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]

	Do_2Sec_Reset();
 800870e:	f7ff fefb 	bl	8008508 <Do_2Sec_Reset>

	result = Start_DMA_XUART();
 8008712:	f7ff ff21 	bl	8008558 <Start_DMA_XUART>
 8008716:	6078      	str	r0, [r7, #4]

	return result;
 8008718:	687b      	ldr	r3, [r7, #4]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <ESP_SendCommand>:

uint32_t ESP_SendCommand(const char* const pStrCmd, const uint32_t lng)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	uint32_t result = ESP_NEVER_VALUE;
 800872e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008732:	60fb      	str	r3, [r7, #12]

	if(!sendTimeOutStarted)
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <ESP_SendCommand+0x54>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d114      	bne.n	8008766 <ESP_SendCommand+0x42>
	{
		result = (uint32_t)HAL_UART_Transmit(&huart7, (uint8_t*)pStrCmd, lng, HAL_MAX_DELAY);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	480d      	ldr	r0, [pc, #52]	; (800877c <ESP_SendCommand+0x58>)
 8008748:	f7fe fb48 	bl	8006ddc <HAL_UART_Transmit>
 800874c:	4603      	mov	r3, r0
 800874e:	60fb      	str	r3, [r7, #12]
		sendTimeOutStarted = 1;
 8008750:	4b09      	ldr	r3, [pc, #36]	; (8008778 <ESP_SendCommand+0x54>)
 8008752:	2201      	movs	r2, #1
 8008754:	601a      	str	r2, [r3, #0]
		sendTimeOut = HAL_GetTick();
 8008756:	f7f9 fbdf 	bl	8001f18 <HAL_GetTick>
 800875a:	4603      	mov	r3, r0
 800875c:	4a08      	ldr	r2, [pc, #32]	; (8008780 <ESP_SendCommand+0x5c>)
 800875e:	6013      	str	r3, [r2, #0]
		result = ESP_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	e002      	b.n	800876c <ESP_SendCommand+0x48>
	}
	else
	{
		result = ESP_COMMAND_BUSY;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200014c4 	.word	0x200014c4
 800877c:	200017bc 	.word	0x200017bc
 8008780:	200014c0 	.word	0x200014c0

08008784 <ESP_CheckForKeyWord>:
 */

#include "esp8266_utils.h"

uint32_t ESP_CheckForKeyWord(char * key, char * buff, uint32_t buff_lng, char **ppRetStr, uint32_t *retVal)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
	uint32_t result = ESP_RSP_ERR, key_lng = strlen(key);
 8008792:	f06f 0306 	mvn.w	r3, #6
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7f7 fd51 	bl	8000240 <strlen>
 800879e:	6138      	str	r0, [r7, #16]
	char* pBuff = buff;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61bb      	str	r3, [r7, #24]

	UNUSED(ppRetStr);

	if(key == NULL || buff == NULL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <ESP_CheckForKeyWord+0x2c>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <ESP_CheckForKeyWord+0x32>
	{
		return ESP_HARD_ERR;
 80087b0:	f06f 0305 	mvn.w	r3, #5
 80087b4:	e030      	b.n	8008818 <ESP_CheckForKeyWord+0x94>
	}
	if(key_lng > buff_lng)
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d901      	bls.n	80087c2 <ESP_CheckForKeyWord+0x3e>
	{
		return result;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	e02a      	b.n	8008818 <ESP_CheckForKeyWord+0x94>
	}

	for (uint32_t idx = 0; idx < buff_lng - key_lng + 1; idx++)
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e016      	b.n	80087f6 <ESP_CheckForKeyWord+0x72>
	{
		if(!memcmp(pBuff, key, key_lng))
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	69b8      	ldr	r0, [r7, #24]
 80087ce:	f000 feef 	bl	80095b0 <memcmp>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d108      	bne.n	80087ea <ESP_CheckForKeyWord+0x66>
		{
			result = ESP_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
			*ppRetStr = pBuff;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	601a      	str	r2, [r3, #0]
			*retVal = key_lng;
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	601a      	str	r2, [r3, #0]
			break;
 80087e8:	e00c      	b.n	8008804 <ESP_CheckForKeyWord+0x80>
		}

		(uint8_t*)pBuff++;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	3301      	adds	r3, #1
 80087ee:	61bb      	str	r3, [r7, #24]
	for (uint32_t idx = 0; idx < buff_lng - key_lng + 1; idx++)
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3301      	adds	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	3301      	adds	r3, #1
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	429a      	cmp	r2, r3
 8008802:	d3e1      	bcc.n	80087c8 <ESP_CheckForKeyWord+0x44>

	}
	if(result!= ESP_OK)
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <ESP_CheckForKeyWord+0x92>
	{
		*retVal = 0;
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
		*ppRetStr = NULL;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
	}

	return result;
 8008816:	69fb      	ldr	r3, [r7, #28]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <NRF_configure>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure(bool ptx_nprx)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 800882a:	230f      	movs	r3, #15
 800882c:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 800882e:	230e      	movs	r3, #14
 8008830:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 8008832:	2301      	movs	r3, #1
 8008834:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 8008836:	2301      	movs	r3, #1
 8008838:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 800883a:	2303      	movs	r3, #3
 800883c:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 800883e:	23ff      	movs	r3, #255	; 0xff
 8008840:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 8008842:	2302      	movs	r3, #2
 8008844:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 8008846:	230e      	movs	r3, #14
 8008848:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 800884a:	2371      	movs	r3, #113	; 0x71
 800884c:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 800884e:	2301      	movs	r3, #1
 8008850:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 8008852:	2306      	movs	r3, #6
 8008854:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 8008856:	4a2b      	ldr	r2, [pc, #172]	; (8008904 <NRF_configure+0xe4>)
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008860:	6018      	str	r0, [r3, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 8008866:	4a27      	ldr	r2, [pc, #156]	; (8008904 <NRF_configure+0xe4>)
 8008868:	f107 0308 	add.w	r3, r7, #8
 800886c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008870:	6018      	str	r0, [r3, #0]
 8008872:	3304      	adds	r3, #4
 8008874:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <NRF_configure+0x66>
	{
		NRF_setCONFIG(config_ptx);
 800887c:	7fbb      	ldrb	r3, [r7, #30]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f84a 	bl	8008918 <NRF_setCONFIG>
 8008884:	e003      	b.n	800888e <NRF_configure+0x6e>
	}
	else
	{
		NRF_setCONFIG(config_prx);
 8008886:	7ffb      	ldrb	r3, [r7, #31]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f845 	bl	8008918 <NRF_setCONFIG>
	}

	NRF_setEN_AA(en_aa);
 800888e:	7f7b      	ldrb	r3, [r7, #29]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f84f 	bl	8008934 <NRF_setEN_AA>
	NRF_setEN_RXADDR(en_rxaddr);
 8008896:	7f3b      	ldrb	r3, [r7, #28]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f859 	bl	8008950 <NRF_setEN_RXADDR>
	NRF_setSETUP_AW(setup_aw);
 800889e:	7efb      	ldrb	r3, [r7, #27]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f863 	bl	800896c <NRF_setSETUP_AW>
	NRF_setSETUP_RETR(setup_retr);
 80088a6:	7ebb      	ldrb	r3, [r7, #26]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f86d 	bl	8008988 <NRF_setSETUP_RETR>
	NRF_setRF_CH(rf_ch);
 80088ae:	7e7b      	ldrb	r3, [r7, #25]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 f877 	bl	80089a4 <NRF_setRF_CH>
	NRF_setRF_SETUP(rf_setup);
 80088b6:	7e3b      	ldrb	r3, [r7, #24]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 f881 	bl	80089c0 <NRF_setRF_SETUP>
	NRF_setSTATUS(status);
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f88b 	bl	80089dc <NRF_setSTATUS>
	NRF_setDYNPD(dynpd);
 80088c6:	7dbb      	ldrb	r3, [r7, #22]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f8f1 	bl	8008ab0 <NRF_setDYNPD>
	NRF_setFEATURE(feature);
 80088ce:	7d7b      	ldrb	r3, [r7, #21]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f8fb 	bl	8008acc <NRF_setFEATURE>

	if(ptx_nprx)
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <NRF_configure+0xc8>
	{
		NRF_setTX_ADDR((uint8_t*)tx_adr, NRF_ADR_MAX);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	2105      	movs	r1, #5
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8b6 	bl	8008a54 <NRF_setTX_ADDR>
	}

	NRF_setRX_ADDR_P0((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	2105      	movs	r1, #5
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f882 	bl	80089f8 <NRF_setRX_ADDR_P0>

	NRF_setFLUSH_RX();
 80088f4:	f000 f975 	bl	8008be2 <NRF_setFLUSH_RX>
	NRF_setFLUSH_TX();
 80088f8:	f000 f962 	bl	8008bc0 <NRF_setFLUSH_TX>
}
 80088fc:	bf00      	nop
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	0800b054 	.word	0x0800b054

08008908 <NRF_getSTATUS>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
	return nrfport_readByte(STATUS_ADR);
 800890c:	2007      	movs	r0, #7
 800890e:	f000 fd1e 	bl	800934e <nrfport_readByte>
 8008912:	4603      	mov	r3, r0
}
 8008914:	4618      	mov	r0, r3
 8008916:	bd80      	pop	{r7, pc}

08008918 <NRF_setCONFIG>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG(uint8_t arg)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(CONFIG_ADR, arg);
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	4619      	mov	r1, r3
 8008926:	2000      	movs	r0, #0
 8008928:	f000 fcf2 	bl	8009310 <nrfport_writeByte>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <NRF_setEN_AA>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA(uint8_t arg)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_AA_ADR, arg);
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	4619      	mov	r1, r3
 8008942:	2001      	movs	r0, #1
 8008944:	f000 fce4 	bl	8009310 <nrfport_writeByte>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <NRF_setEN_RXADDR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR(uint8_t arg)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_RXADDR_ADR, arg);
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	4619      	mov	r1, r3
 800895e:	2002      	movs	r0, #2
 8008960:	f000 fcd6 	bl	8009310 <nrfport_writeByte>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <NRF_setSETUP_AW>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW(uint8_t arg)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_AW_ADR, arg);
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	4619      	mov	r1, r3
 800897a:	2003      	movs	r0, #3
 800897c:	f000 fcc8 	bl	8009310 <nrfport_writeByte>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <NRF_setSETUP_RETR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR(uint8_t arg)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_RETR_ADR, arg);
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	4619      	mov	r1, r3
 8008996:	2004      	movs	r0, #4
 8008998:	f000 fcba 	bl	8009310 <nrfport_writeByte>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <NRF_setRF_CH>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH(uint8_t arg)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_CH_ADR, arg);
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	4619      	mov	r1, r3
 80089b2:	2005      	movs	r0, #5
 80089b4:	f000 fcac 	bl	8009310 <nrfport_writeByte>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <NRF_setRF_SETUP>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP(uint8_t arg)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_SETUP_ADR, arg);
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4619      	mov	r1, r3
 80089ce:	2006      	movs	r0, #6
 80089d0:	f000 fc9e 	bl	8009310 <nrfport_writeByte>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <NRF_setSTATUS>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS(uint8_t arg)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(STATUS_ADR, arg);
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	4619      	mov	r1, r3
 80089ea:	2007      	movs	r0, #7
 80089ec:	f000 fc90 	bl	8009310 <nrfport_writeByte>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <NRF_setRX_ADDR_P0>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0(uint8_t* arg, uint32_t lng)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d921      	bls.n	8008a4c <NRF_setRX_ADDR_P0+0x54>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d81e      	bhi.n	8008a4c <NRF_setRX_ADDR_P0+0x54>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01b      	beq.n	8008a4c <NRF_setRX_ADDR_P0+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	2300      	movs	r3, #0
 8008a22:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8008a24:	f107 0310 	add.w	r3, r7, #16
 8008a28:	3301      	adds	r3, #1
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fdcc 	bl	80095cc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 8008a34:	232a      	movs	r3, #42	; 0x2a
 8008a36:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	f107 0108 	add.w	r1, r7, #8
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fc39 	bl	80092bc <nrfport_spiTransaction>
 8008a4a:	e000      	b.n	8008a4e <NRF_setRX_ADDR_P0+0x56>
		return;
 8008a4c:	bf00      	nop
}
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <NRF_setTX_ADDR>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR(uint8_t* arg, uint32_t lng)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d921      	bls.n	8008aa8 <NRF_setTX_ADDR+0x54>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	d81e      	bhi.n	8008aa8 <NRF_setTX_ADDR+0x54>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01b      	beq.n	8008aa8 <NRF_setTX_ADDR+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	2300      	movs	r3, #0
 8008a76:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8008a80:	f107 0310 	add.w	r3, r7, #16
 8008a84:	3301      	adds	r3, #1
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fd9e 	bl	80095cc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 8008a90:	2330      	movs	r3, #48	; 0x30
 8008a92:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	f107 0310 	add.w	r3, r7, #16
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fc0b 	bl	80092bc <nrfport_spiTransaction>
 8008aa6:	e000      	b.n	8008aaa <NRF_setTX_ADDR+0x56>
		return;
 8008aa8:	bf00      	nop
}
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <NRF_setDYNPD>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD(uint8_t arg)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(DYNPD_ADR, arg);
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	4619      	mov	r1, r3
 8008abe:	201c      	movs	r0, #28
 8008ac0:	f000 fc26 	bl	8009310 <nrfport_writeByte>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <NRF_setFEATURE>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE(uint8_t arg)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(FEATURE_ADR, arg);
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	201d      	movs	r0, #29
 8008adc:	f000 fc18 	bl	8009310 <nrfport_writeByte>
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <NRF_getR_RX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b094      	sub	sp, #80	; 0x50
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d029      	beq.n	8008b4c <NRF_getR_RX_PAYLOAD+0x64>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d826      	bhi.n	8008b4c <NRF_getR_RX_PAYLOAD+0x64>

	uint8_t tx[33] = {0};
 8008afe:	2300      	movs	r3, #0
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b06:	221d      	movs	r2, #29
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fd6c 	bl	80095e8 <memset>
	uint8_t rx[33] = {0};
 8008b10:	2300      	movs	r3, #0
 8008b12:	60bb      	str	r3, [r7, #8]
 8008b14:	f107 030c 	add.w	r3, r7, #12
 8008b18:	221d      	movs	r2, #29
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fd63 	bl	80095e8 <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 8008b22:	2361      	movs	r3, #97	; 0x61
 8008b24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction(tx, rx, lng + 1);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	f107 0108 	add.w	r1, r7, #8
 8008b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fbc1 	bl	80092bc <nrfport_spiTransaction>
	memcpy(arg, rx + 1, lng);
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	3301      	adds	r3, #1
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fd41 	bl	80095cc <memcpy>
 8008b4a:	e000      	b.n	8008b4e <NRF_getR_RX_PAYLOAD+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8008b4c:	bf00      	nop
}
 8008b4e:	3750      	adds	r7, #80	; 0x50
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <NRF_setW_TX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_setW_TX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b094      	sub	sp, #80	; 0x50
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d829      	bhi.n	8008bb8 <NRF_setW_TX_PAYLOAD+0x64>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d026      	beq.n	8008bb8 <NRF_setW_TX_PAYLOAD+0x64>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b72:	221d      	movs	r2, #29
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fd36 	bl	80095e8 <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60bb      	str	r3, [r7, #8]
 8008b80:	f107 030c 	add.w	r3, r7, #12
 8008b84:	221d      	movs	r2, #29
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fd2d 	bl	80095e8 <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD;
 8008b8e:	23a0      	movs	r3, #160	; 0xa0
 8008b90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	memcpy(tx+1, arg, lng);
 8008b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b98:	3301      	adds	r3, #1
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fd14 	bl	80095cc <memcpy>
	nrfport_spiTransaction(tx, rx, lng+1);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	f107 0108 	add.w	r1, r7, #8
 8008bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fb83 	bl	80092bc <nrfport_spiTransaction>
 8008bb6:	e000      	b.n	8008bba <NRF_setW_TX_PAYLOAD+0x66>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 8008bb8:	bf00      	nop
}
 8008bba:	3750      	adds	r7, #80	; 0x50
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <NRF_setFLUSH_TX>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 8008bc6:	23e1      	movs	r3, #225	; 0xe1
 8008bc8:	71fb      	strb	r3, [r7, #7]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 8008bce:	1db9      	adds	r1, r7, #6
 8008bd0:	1dfb      	adds	r3, r7, #7
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fb71 	bl	80092bc <nrfport_spiTransaction>
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <NRF_setFLUSH_RX>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX(void)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 8008be8:	23e2      	movs	r3, #226	; 0xe2
 8008bea:	71fb      	strb	r3, [r7, #7]
 8008bec:	2300      	movs	r3, #0
 8008bee:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 8008bf0:	1db9      	adds	r1, r7, #6
 8008bf2:	1dfb      	adds	r3, r7, #7
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fb60 	bl	80092bc <nrfport_spiTransaction>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <NRF_getR_RX_PL_WID>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
	return nrfport_readByte(CMD_R_RX_PL_WID);
 8008c08:	2060      	movs	r0, #96	; 0x60
 8008c0a:	f000 fba0 	bl	800934e <nrfport_readByte>
 8008c0e:	4603      	mov	r3, r0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <NRF_getIRQ>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
	return nrfport_getIRQ();
 8008c18:	f000 fbe2 	bl	80093e0 <nrfport_getIRQ>
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <NRF_CEactivate>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate(void)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	af00      	add	r7, sp, #0
	nrfport_ceHigh();
 8008c26:	f000 fbab 	bl	8009380 <nrfport_ceHigh>
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <NRF_CEdeactivate>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate(void)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	af00      	add	r7, sp, #0
	nrfport_ceLow();
 8008c32:	f000 fbb1 	bl	8009398 <nrfport_ceLow>
}
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <NRF_powerUp>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp(void)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	af00      	add	r7, sp, #0
	nrfport_powerUp();
 8008c3e:	f000 fbb7 	bl	80093b0 <nrfport_powerUp>
}
 8008c42:	bf00      	nop
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <NRF_powerDown>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown(void)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	af00      	add	r7, sp, #0
	nrfport_powerDown();
 8008c4a:	f000 fbbd 	bl	80093c8 <nrfport_powerDown>
}
 8008c4e:	bf00      	nop
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <NRF_postProcess>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess(uint8_t pipe, uint8_t* rxBuff)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	4603      	mov	r3, r0
 8008c5a:	6039      	str	r1, [r7, #0]
 8008c5c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 8008c66:	23ff      	movs	r3, #255	; 0xff
 8008c68:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS();
 8008c6a:	f7ff fe4d 	bl	8008908 <NRF_getSTATUS>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 8008c72:	7b3b      	ldrb	r3, [r7, #12]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <NRF_postProcess+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	f043 0310 	orr.w	r3, r3, #16
 8008c82:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 8008c84:	7b3b      	ldrb	r3, [r7, #12]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <NRF_postProcess+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 8008c96:	7b3b      	ldrb	r3, [r7, #12]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <NRF_postProcess+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	f043 0320 	orr.w	r3, r3, #32
 8008ca6:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 8008ca8:	23ff      	movs	r3, #255	; 0xff
 8008caa:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 8008cac:	7b3b      	ldrb	r3, [r7, #12]
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d016      	beq.n	8008ce4 <NRF_postProcess+0x92>
	{
		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 8008cb6:	7b3b      	ldrb	r3, [r7, #12]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 8008cbc:	f003 0306 	and.w	r3, r3, #6
 8008cc0:	737b      	strb	r3, [r7, #13]
	  if(rPipe == pipe)
 8008cc2:	7b7a      	ldrb	r2, [r7, #13]
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d10c      	bne.n	8008ce4 <NRF_postProcess+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID();
 8008cca:	f7ff ff9b 	bl	8008c04 <NRF_getR_RX_PL_WID>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD(rxBuff, rxBytes);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6838      	ldr	r0, [r7, #0]
 8008cd8:	f7ff ff06 	bl	8008ae8 <NRF_getR_RX_PAYLOAD>
		  wStatus |= (1 << RX_DR);
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce2:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <NRF_postProcess+0xae>
	{
		NRF_setSTATUS(wStatus);
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fe75 	bl	80089dc <NRF_setSTATUS>
		if(rStatus & (1 << MAX_RT))
 8008cf2:	7b3b      	ldrb	r3, [r7, #12]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <NRF_postProcess+0xae>
		{
			NRF_setFLUSH_TX();
 8008cfc:	f7ff ff60 	bl	8008bc0 <NRF_setFLUSH_TX>
		}
	}
	return rxBytes;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <NRF_powerCycle>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle(void (*msDelay)(uint32_t))
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown();
 8008d16:	f7ff ff96 	bl	8008c46 <NRF_powerDown>
	  msDelay(100);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2064      	movs	r0, #100	; 0x64
 8008d1e:	4798      	blx	r3
	  NRF_powerUp();
 8008d20:	f7ff ff8b 	bl	8008c3a <NRF_powerUp>
	  msDelay(100);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2064      	movs	r0, #100	; 0x64
 8008d28:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS();
 8008d2a:	f7ff fded 	bl	8008908 <NRF_getSTATUS>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2064      	movs	r0, #100	; 0x64
 8008d3c:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	2b0e      	cmp	r3, #14
 8008d42:	bf14      	ite	ne
 8008d44:	2301      	movne	r3, #1
 8008d46:	2300      	moveq	r3, #0
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	bf94      	ite	ls
 8008d50:	2301      	movls	r3, #1
 8008d52:	2300      	movhi	r3, #0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e5      	bne.n	8008d2a <NRF_powerCycle+0x20>


	  return (uint32_t)status;
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <NRF_configure_B>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure_B(bool ptx_nprx)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 8008d72:	230f      	movs	r3, #15
 8008d74:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 8008d76:	230e      	movs	r3, #14
 8008d78:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 8008d7e:	2301      	movs	r3, #1
 8008d80:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 8008d82:	2303      	movs	r3, #3
 8008d84:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 8008d86:	23ff      	movs	r3, #255	; 0xff
 8008d88:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 8008d8e:	230e      	movs	r3, #14
 8008d90:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 8008d92:	2371      	movs	r3, #113	; 0x71
 8008d94:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 8008d96:	2301      	movs	r3, #1
 8008d98:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 8008d9a:	2306      	movs	r3, #6
 8008d9c:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 8008d9e:	4a2b      	ldr	r2, [pc, #172]	; (8008e4c <NRF_configure_B+0xe4>)
 8008da0:	f107 0310 	add.w	r3, r7, #16
 8008da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008da8:	6018      	str	r0, [r3, #0]
 8008daa:	3304      	adds	r3, #4
 8008dac:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 8008dae:	4a27      	ldr	r2, [pc, #156]	; (8008e4c <NRF_configure_B+0xe4>)
 8008db0:	f107 0308 	add.w	r3, r7, #8
 8008db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008db8:	6018      	str	r0, [r3, #0]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <NRF_configure_B+0x66>
	{
		NRF_setCONFIG_B(config_ptx);
 8008dc4:	7fbb      	ldrb	r3, [r7, #30]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f84a 	bl	8008e60 <NRF_setCONFIG_B>
 8008dcc:	e003      	b.n	8008dd6 <NRF_configure_B+0x6e>
	}
	else
	{
		NRF_setCONFIG_B(config_prx);
 8008dce:	7ffb      	ldrb	r3, [r7, #31]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f845 	bl	8008e60 <NRF_setCONFIG_B>
	}

	NRF_setEN_AA_B(en_aa);
 8008dd6:	7f7b      	ldrb	r3, [r7, #29]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f84f 	bl	8008e7c <NRF_setEN_AA_B>
	NRF_setEN_RXADDR_B(en_rxaddr);
 8008dde:	7f3b      	ldrb	r3, [r7, #28]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f859 	bl	8008e98 <NRF_setEN_RXADDR_B>
	NRF_setSETUP_AW_B(setup_aw);
 8008de6:	7efb      	ldrb	r3, [r7, #27]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f863 	bl	8008eb4 <NRF_setSETUP_AW_B>
	NRF_setSETUP_RETR_B(setup_retr);
 8008dee:	7ebb      	ldrb	r3, [r7, #26]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f86d 	bl	8008ed0 <NRF_setSETUP_RETR_B>
	NRF_setRF_CH_B(rf_ch);
 8008df6:	7e7b      	ldrb	r3, [r7, #25]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f877 	bl	8008eec <NRF_setRF_CH_B>
	NRF_setRF_SETUP_B(rf_setup);
 8008dfe:	7e3b      	ldrb	r3, [r7, #24]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f881 	bl	8008f08 <NRF_setRF_SETUP_B>
	NRF_setSTATUS_B(status);
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f88b 	bl	8008f24 <NRF_setSTATUS_B>
	NRF_setDYNPD_B(dynpd);
 8008e0e:	7dbb      	ldrb	r3, [r7, #22]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f8f1 	bl	8008ff8 <NRF_setDYNPD_B>
	NRF_setFEATURE_B(feature);
 8008e16:	7d7b      	ldrb	r3, [r7, #21]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 f8fb 	bl	8009014 <NRF_setFEATURE_B>

	if(ptx_nprx)
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <NRF_configure_B+0xc8>
	{
		NRF_setTX_ADDR_B((uint8_t*)tx_adr, NRF_ADR_MAX);
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	2105      	movs	r1, #5
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8b6 	bl	8008f9c <NRF_setTX_ADDR_B>
	}

	NRF_setRX_ADDR_P0_B((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 8008e30:	f107 0310 	add.w	r3, r7, #16
 8008e34:	2105      	movs	r1, #5
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f882 	bl	8008f40 <NRF_setRX_ADDR_P0_B>

	NRF_setFLUSH_RX_B();
 8008e3c:	f000 f93f 	bl	80090be <NRF_setFLUSH_RX_B>
	NRF_setFLUSH_TX_B();
 8008e40:	f000 f92c 	bl	800909c <NRF_setFLUSH_TX_B>
}
 8008e44:	bf00      	nop
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	0800b05c 	.word	0x0800b05c

08008e50 <NRF_getSTATUS_B>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS_B(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(STATUS_ADR);
 8008e54:	2007      	movs	r0, #7
 8008e56:	f000 fb22 	bl	800949e <nrfport_readByte_B>
 8008e5a:	4603      	mov	r3, r0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <NRF_setCONFIG_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG_B(uint8_t arg)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(CONFIG_ADR, arg);
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f000 faf6 	bl	8009460 <nrfport_writeByte_B>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <NRF_setEN_AA_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA_B(uint8_t arg)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_AA_ADR, arg);
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f000 fae8 	bl	8009460 <nrfport_writeByte_B>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <NRF_setEN_RXADDR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR_B(uint8_t arg)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_RXADDR_ADR, arg);
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	2002      	movs	r0, #2
 8008ea8:	f000 fada 	bl	8009460 <nrfport_writeByte_B>
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <NRF_setSETUP_AW_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW_B(uint8_t arg)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_AW_ADR, arg);
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2003      	movs	r0, #3
 8008ec4:	f000 facc 	bl	8009460 <nrfport_writeByte_B>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <NRF_setSETUP_RETR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR_B(uint8_t arg)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_RETR_ADR, arg);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	4619      	mov	r1, r3
 8008ede:	2004      	movs	r0, #4
 8008ee0:	f000 fabe 	bl	8009460 <nrfport_writeByte_B>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <NRF_setRF_CH_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH_B(uint8_t arg)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_CH_ADR, arg);
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2005      	movs	r0, #5
 8008efc:	f000 fab0 	bl	8009460 <nrfport_writeByte_B>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <NRF_setRF_SETUP_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP_B(uint8_t arg)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_SETUP_ADR, arg);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4619      	mov	r1, r3
 8008f16:	2006      	movs	r0, #6
 8008f18:	f000 faa2 	bl	8009460 <nrfport_writeByte_B>
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <NRF_setSTATUS_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS_B(uint8_t arg)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(STATUS_ADR, arg);
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	4619      	mov	r1, r3
 8008f32:	2007      	movs	r0, #7
 8008f34:	f000 fa94 	bl	8009460 <nrfport_writeByte_B>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <NRF_setRX_ADDR_P0_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0_B(uint8_t* arg, uint32_t lng)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d921      	bls.n	8008f94 <NRF_setRX_ADDR_P0_B+0x54>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b05      	cmp	r3, #5
 8008f54:	d81e      	bhi.n	8008f94 <NRF_setRX_ADDR_P0_B+0x54>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01b      	beq.n	8008f94 <NRF_setRX_ADDR_P0_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	2300      	movs	r3, #0
 8008f62:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8008f64:	2300      	movs	r3, #0
 8008f66:	60bb      	str	r3, [r7, #8]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8008f6c:	f107 0310 	add.w	r3, r7, #16
 8008f70:	3301      	adds	r3, #1
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb28 	bl	80095cc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 8008f7c:	232a      	movs	r3, #42	; 0x2a
 8008f7e:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	f107 0310 	add.w	r3, r7, #16
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fa3d 	bl	800940c <nrfport_spiTransaction_B>
 8008f92:	e000      	b.n	8008f96 <NRF_setRX_ADDR_P0_B+0x56>
		return;
 8008f94:	bf00      	nop
}
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <NRF_setTX_ADDR_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR_B(uint8_t* arg, uint32_t lng)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d921      	bls.n	8008ff0 <NRF_setTX_ADDR_B+0x54>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d81e      	bhi.n	8008ff0 <NRF_setTX_ADDR_B+0x54>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01b      	beq.n	8008ff0 <NRF_setTX_ADDR_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60bb      	str	r3, [r7, #8]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8008fc8:	f107 0310 	add.w	r3, r7, #16
 8008fcc:	3301      	adds	r3, #1
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fafa 	bl	80095cc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 8008fd8:	2330      	movs	r3, #48	; 0x30
 8008fda:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fa0f 	bl	800940c <nrfport_spiTransaction_B>
 8008fee:	e000      	b.n	8008ff2 <NRF_setTX_ADDR_B+0x56>
		return;
 8008ff0:	bf00      	nop
}
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <NRF_setDYNPD_B>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD_B(uint8_t arg)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(DYNPD_ADR, arg);
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	4619      	mov	r1, r3
 8009006:	201c      	movs	r0, #28
 8009008:	f000 fa2a 	bl	8009460 <nrfport_writeByte_B>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <NRF_setFEATURE_B>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE_B(uint8_t arg)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(FEATURE_ADR, arg);
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	4619      	mov	r1, r3
 8009022:	201d      	movs	r0, #29
 8009024:	f000 fa1c 	bl	8009460 <nrfport_writeByte_B>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <NRF_getR_RX_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD_B(uint8_t* arg, uint32_t lng)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b094      	sub	sp, #80	; 0x50
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d029      	beq.n	8009094 <NRF_getR_RX_PAYLOAD_B+0x64>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b20      	cmp	r3, #32
 8009044:	d826      	bhi.n	8009094 <NRF_getR_RX_PAYLOAD_B+0x64>

	uint8_t tx[33] = {0};
 8009046:	2300      	movs	r3, #0
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800904e:	221d      	movs	r2, #29
 8009050:	2100      	movs	r1, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fac8 	bl	80095e8 <memset>
	uint8_t rx[33] = {0};
 8009058:	2300      	movs	r3, #0
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	f107 030c 	add.w	r3, r7, #12
 8009060:	221d      	movs	r2, #29
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fabf 	bl	80095e8 <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 800906a:	2361      	movs	r3, #97	; 0x61
 800906c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	f107 0108 	add.w	r1, r7, #8
 8009078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f9c5 	bl	800940c <nrfport_spiTransaction_B>
	memcpy(arg, rx + 1, lng);
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	3301      	adds	r3, #1
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa9d 	bl	80095cc <memcpy>
 8009092:	e000      	b.n	8009096 <NRF_getR_RX_PAYLOAD_B+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8009094:	bf00      	nop
}
 8009096:	3750      	adds	r7, #80	; 0x50
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <NRF_setFLUSH_TX_B>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX_B(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 80090a2:	23e1      	movs	r3, #225	; 0xe1
 80090a4:	71fb      	strb	r3, [r7, #7]
 80090a6:	2300      	movs	r3, #0
 80090a8:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 80090aa:	1db9      	adds	r1, r7, #6
 80090ac:	1dfb      	adds	r3, r7, #7
 80090ae:	2201      	movs	r2, #1
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f9ab 	bl	800940c <nrfport_spiTransaction_B>
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <NRF_setFLUSH_RX_B>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX_B(void)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 80090c4:	23e2      	movs	r3, #226	; 0xe2
 80090c6:	71fb      	strb	r3, [r7, #7]
 80090c8:	2300      	movs	r3, #0
 80090ca:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 80090cc:	1db9      	adds	r1, r7, #6
 80090ce:	1dfb      	adds	r3, r7, #7
 80090d0:	2201      	movs	r2, #1
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f99a 	bl	800940c <nrfport_spiTransaction_B>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <NRF_getR_RX_PL_WID_B>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID_B(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(CMD_R_RX_PL_WID);
 80090e4:	2060      	movs	r0, #96	; 0x60
 80090e6:	f000 f9da 	bl	800949e <nrfport_readByte_B>
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <NRF_set_W_ACK_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_set_W_ACK_PAYLOAD_B(uint8_t pipe, uint8_t* arg, uint32_t lng)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b096      	sub	sp, #88	; 0x58
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	73fb      	strb	r3, [r7, #15]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b20      	cmp	r3, #32
 8009102:	d82c      	bhi.n	800915e <NRF_set_W_ACK_PAYLOAD_B+0x6e>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d029      	beq.n	800915e <NRF_set_W_ACK_PAYLOAD_B+0x6e>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 800910a:	2300      	movs	r3, #0
 800910c:	637b      	str	r3, [r7, #52]	; 0x34
 800910e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009112:	221d      	movs	r2, #29
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fa66 	bl	80095e8 <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 800911c:	2300      	movs	r3, #0
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	221d      	movs	r2, #29
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fa5d 	bl	80095e8 <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD|pipe;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	memcpy(tx+1, arg, lng);
 800913a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800913e:	3301      	adds	r3, #1
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fa41 	bl	80095cc <memcpy>
	nrfport_spiTransaction_B(tx, rx, lng+1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	f107 0110 	add.w	r1, r7, #16
 8009152:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f958 	bl	800940c <nrfport_spiTransaction_B>
 800915c:	e000      	b.n	8009160 <NRF_set_W_ACK_PAYLOAD_B+0x70>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 800915e:	bf00      	nop
}
 8009160:	3758      	adds	r7, #88	; 0x58
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <NRF_getIRQ_B>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ_B(void)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	af00      	add	r7, sp, #0
	return nrfport_getIRQ_B();
 800916a:	f000 f9e1 	bl	8009530 <nrfport_getIRQ_B>
 800916e:	4603      	mov	r3, r0
}
 8009170:	4618      	mov	r0, r3
 8009172:	bd80      	pop	{r7, pc}

08009174 <NRF_CEactivate_B>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate_B(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
	nrfport_ceHigh_B();
 8009178:	f000 f9aa 	bl	80094d0 <nrfport_ceHigh_B>
}
 800917c:	bf00      	nop
 800917e:	bd80      	pop	{r7, pc}

08009180 <NRF_CEdeactivate_B>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate_B(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
	nrfport_ceLow_B();
 8009184:	f000 f9b0 	bl	80094e8 <nrfport_ceLow_B>
}
 8009188:	bf00      	nop
 800918a:	bd80      	pop	{r7, pc}

0800918c <NRF_powerUp_B>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp_B(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
	nrfport_powerUp_B();
 8009190:	f000 f9b6 	bl	8009500 <nrfport_powerUp_B>
}
 8009194:	bf00      	nop
 8009196:	bd80      	pop	{r7, pc}

08009198 <NRF_powerDown_B>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown_B(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
	nrfport_powerDown_B();
 800919c:	f000 f9bc 	bl	8009518 <nrfport_powerDown_B>
}
 80091a0:	bf00      	nop
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <NRF_postProcess_B>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess_B(uint8_t pipe, uint8_t* rxBuff)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 80091b8:	23ff      	movs	r3, #255	; 0xff
 80091ba:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS_B();
 80091bc:	f7ff fe48 	bl	8008e50 <NRF_getSTATUS_B>
 80091c0:	4603      	mov	r3, r0
 80091c2:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 80091c4:	7b3b      	ldrb	r3, [r7, #12]
 80091c6:	f003 0310 	and.w	r3, r3, #16
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <NRF_postProcess_B+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	f043 0310 	orr.w	r3, r3, #16
 80091d4:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 80091d6:	7b3b      	ldrb	r3, [r7, #12]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <NRF_postProcess_B+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	f043 0301 	orr.w	r3, r3, #1
 80091e6:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 80091e8:	7b3b      	ldrb	r3, [r7, #12]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <NRF_postProcess_B+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	f043 0320 	orr.w	r3, r3, #32
 80091f8:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 80091fa:	23ff      	movs	r3, #255	; 0xff
 80091fc:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 80091fe:	7b3b      	ldrb	r3, [r7, #12]
 8009200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d016      	beq.n	8009236 <NRF_postProcess_B+0x92>
	{

		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 8009208:	7b3b      	ldrb	r3, [r7, #12]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 800920e:	f003 0306 	and.w	r3, r3, #6
 8009212:	737b      	strb	r3, [r7, #13]
	  if(pipe == rPipe)
 8009214:	79fa      	ldrb	r2, [r7, #7]
 8009216:	7b7b      	ldrb	r3, [r7, #13]
 8009218:	429a      	cmp	r2, r3
 800921a:	d10c      	bne.n	8009236 <NRF_postProcess_B+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID_B();
 800921c:	f7ff ff60 	bl	80090e0 <NRF_getR_RX_PL_WID_B>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD_B(rxBuff, rxBytes);
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4619      	mov	r1, r3
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f7ff ff01 	bl	8009030 <NRF_getR_RX_PAYLOAD_B>
		  wStatus |= (1 << RX_DR);
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009234:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <NRF_postProcess_B+0xae>
	{
		NRF_setSTATUS_B(wStatus);
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fe70 	bl	8008f24 <NRF_setSTATUS_B>
		if(rStatus & (1 << MAX_RT))
 8009244:	7b3b      	ldrb	r3, [r7, #12]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <NRF_postProcess_B+0xae>
		{
			NRF_setFLUSH_TX_B();
 800924e:	f7ff ff25 	bl	800909c <NRF_setFLUSH_TX_B>
		}
	}
	return rxBytes;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <NRF_powerCycle_B>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle_B(void (*msDelay)(uint32_t))
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown_B();
 8009268:	f7ff ff96 	bl	8009198 <NRF_powerDown_B>
	  msDelay(100);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2064      	movs	r0, #100	; 0x64
 8009270:	4798      	blx	r3
	  NRF_powerUp_B();
 8009272:	f7ff ff8b 	bl	800918c <NRF_powerUp_B>
	  msDelay(100);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2064      	movs	r0, #100	; 0x64
 800927a:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS_B();
 800927c:	f7ff fde8 	bl	8008e50 <NRF_getSTATUS_B>
 8009280:	4603      	mov	r3, r0
 8009282:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2064      	movs	r0, #100	; 0x64
 800928e:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	2b0e      	cmp	r3, #14
 8009294:	bf14      	ite	ne
 8009296:	2301      	movne	r3, #1
 8009298:	2300      	moveq	r3, #0
 800929a:	b2da      	uxtb	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	bf94      	ite	ls
 80092a2:	2301      	movls	r3, #1
 80092a4:	2300      	movhi	r3, #0
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e5      	bne.n	800927c <NRF_powerCycle_B+0x20>


	  return (uint32_t)status;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <nrfport_spiTransaction>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d017      	beq.n	80092fe <nrfport_spiTransaction+0x42>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d014      	beq.n	80092fe <nrfport_spiTransaction+0x42>

	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_RESET);
 80092d4:	2200      	movs	r2, #0
 80092d6:	2104      	movs	r1, #4
 80092d8:	480b      	ldr	r0, [pc, #44]	; (8009308 <nrfport_spiTransaction+0x4c>)
 80092da:	f7fa fc9b 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	9200      	str	r2, [sp, #0]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	68f9      	ldr	r1, [r7, #12]
 80092ec:	4807      	ldr	r0, [pc, #28]	; (800930c <nrfport_spiTransaction+0x50>)
 80092ee:	f7fc fa54 	bl	800579a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_SET);
 80092f2:	2201      	movs	r2, #1
 80092f4:	2104      	movs	r1, #4
 80092f6:	4804      	ldr	r0, [pc, #16]	; (8009308 <nrfport_spiTransaction+0x4c>)
 80092f8:	f7fa fc8c 	bl	8003c14 <HAL_GPIO_WritePin>
 80092fc:	e000      	b.n	8009300 <nrfport_spiTransaction+0x44>
	if(NULL == tx || NULL == rx) return;
 80092fe:	bf00      	nop
}
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40020400 	.word	0x40020400
 800930c:	200014d8 	.word	0x200014d8

08009310 <nrfport_writeByte>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte(uint8_t adr, uint8_t data)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	460a      	mov	r2, r1
 800931a:	71fb      	strb	r3, [r7, #7]
 800931c:	4613      	mov	r3, r2
 800931e:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 8009320:	2300      	movs	r3, #0
 8009322:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 8009324:	2300      	movs	r3, #0
 8009326:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	f043 0320 	orr.w	r3, r3, #32
 800932e:	b2db      	uxtb	r3, r3
 8009330:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 8009332:	79bb      	ldrb	r3, [r7, #6]
 8009334:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction(tx, rx, WR_BYTE_LNG);
 8009336:	f107 010c 	add.w	r1, r7, #12
 800933a:	f107 0308 	add.w	r3, r7, #8
 800933e:	2202      	movs	r2, #2
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff ffbb 	bl	80092bc <nrfport_spiTransaction>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <nrfport_readByte>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte(uint8_t adr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	4603      	mov	r3, r0
 8009356:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8009358:	2300      	movs	r3, #0
 800935a:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 800935c:	2300      	movs	r3, #0
 800935e:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction(tx, rx, RD_BYTE_LNG);
 8009364:	f107 010c 	add.w	r1, r7, #12
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	2202      	movs	r2, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff ffa4 	bl	80092bc <nrfport_spiTransaction>

	return rx[RD_BYTE_PLD];
 8009374:	7b7b      	ldrb	r3, [r7, #13]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <nrfport_ceHigh>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_SET);
 8009384:	2201      	movs	r2, #1
 8009386:	2110      	movs	r1, #16
 8009388:	4802      	ldr	r0, [pc, #8]	; (8009394 <nrfport_ceHigh+0x14>)
 800938a:	f7fa fc43 	bl	8003c14 <HAL_GPIO_WritePin>
}
 800938e:	bf00      	nop
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	40021400 	.word	0x40021400

08009398 <nrfport_ceLow>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 800939c:	2200      	movs	r2, #0
 800939e:	2110      	movs	r1, #16
 80093a0:	4802      	ldr	r0, [pc, #8]	; (80093ac <nrfport_ceLow+0x14>)
 80093a2:	f7fa fc37 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	40021400 	.word	0x40021400

080093b0 <nrfport_powerUp>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_RESET);
 80093b4:	2200      	movs	r2, #0
 80093b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093ba:	4802      	ldr	r0, [pc, #8]	; (80093c4 <nrfport_powerUp+0x14>)
 80093bc:	f7fa fc2a 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80093c0:	bf00      	nop
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40020400 	.word	0x40020400

080093c8 <nrfport_powerDown>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_SET);
 80093cc:	2201      	movs	r2, #1
 80093ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093d2:	4802      	ldr	r0, [pc, #8]	; (80093dc <nrfport_powerDown+0x14>)
 80093d4:	f7fa fc1e 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80093d8:	bf00      	nop
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	40020400 	.word	0x40020400

080093e0 <nrfport_getIRQ>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF1_IRQ_GPIO_Port, NRF1_IRQ_Pin)) ? 1 : 0;
 80093e6:	2140      	movs	r1, #64	; 0x40
 80093e8:	4807      	ldr	r0, [pc, #28]	; (8009408 <nrfport_getIRQ+0x28>)
 80093ea:	f7fa fbfb 	bl	8003be4 <HAL_GPIO_ReadPin>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bf0c      	ite	eq
 80093f4:	2301      	moveq	r3, #1
 80093f6:	2300      	movne	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 80093fc:	79fb      	ldrb	r3, [r7, #7]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40020400 	.word	0x40020400

0800940c <nrfport_spiTransaction_B>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction_B(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af02      	add	r7, sp, #8
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d017      	beq.n	800944e <nrfport_spiTransaction_B+0x42>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d014      	beq.n	800944e <nrfport_spiTransaction_B+0x42>

	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_RESET);
 8009424:	2200      	movs	r2, #0
 8009426:	2102      	movs	r1, #2
 8009428:	480b      	ldr	r0, [pc, #44]	; (8009458 <nrfport_spiTransaction_B+0x4c>)
 800942a:	f7fa fbf3 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	b29b      	uxth	r3, r3
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	9200      	str	r2, [sp, #0]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	4807      	ldr	r0, [pc, #28]	; (800945c <nrfport_spiTransaction_B+0x50>)
 800943e:	f7fc f9ac 	bl	800579a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_SET);
 8009442:	2201      	movs	r2, #1
 8009444:	2102      	movs	r1, #2
 8009446:	4804      	ldr	r0, [pc, #16]	; (8009458 <nrfport_spiTransaction_B+0x4c>)
 8009448:	f7fa fbe4 	bl	8003c14 <HAL_GPIO_WritePin>
 800944c:	e000      	b.n	8009450 <nrfport_spiTransaction_B+0x44>
	if(NULL == tx || NULL == rx) return;
 800944e:	bf00      	nop
}
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40020400 	.word	0x40020400
 800945c:	200014d8 	.word	0x200014d8

08009460 <nrfport_writeByte_B>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte_B(uint8_t adr, uint8_t data)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	460a      	mov	r2, r1
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	4613      	mov	r3, r2
 800946e:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 8009470:	2300      	movs	r3, #0
 8009472:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 8009474:	2300      	movs	r3, #0
 8009476:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	f043 0320 	orr.w	r3, r3, #32
 800947e:	b2db      	uxtb	r3, r3
 8009480:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 8009482:	79bb      	ldrb	r3, [r7, #6]
 8009484:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 8009486:	f107 010c 	add.w	r1, r7, #12
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	2202      	movs	r2, #2
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ffbb 	bl	800940c <nrfport_spiTransaction_B>
}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <nrfport_readByte_B>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte_B(uint8_t adr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	4603      	mov	r3, r0
 80094a6:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 80094a8:	2300      	movs	r3, #0
 80094aa:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 80094ac:	2300      	movs	r3, #0
 80094ae:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 80094b4:	f107 010c 	add.w	r1, r7, #12
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	2202      	movs	r2, #2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ffa4 	bl	800940c <nrfport_spiTransaction_B>

	return rx[RD_BYTE_PLD];
 80094c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <nrfport_ceHigh_B>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh_B(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_SET);
 80094d4:	2201      	movs	r2, #1
 80094d6:	2140      	movs	r1, #64	; 0x40
 80094d8:	4802      	ldr	r0, [pc, #8]	; (80094e4 <nrfport_ceHigh_B+0x14>)
 80094da:	f7fa fb9b 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80094de:	bf00      	nop
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	40020800 	.word	0x40020800

080094e8 <nrfport_ceLow_B>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow_B(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 80094ec:	2200      	movs	r2, #0
 80094ee:	2140      	movs	r1, #64	; 0x40
 80094f0:	4802      	ldr	r0, [pc, #8]	; (80094fc <nrfport_ceLow_B+0x14>)
 80094f2:	f7fa fb8f 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80094f6:	bf00      	nop
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40020800 	.word	0x40020800

08009500 <nrfport_powerUp_B>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp_B(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_RESET);
 8009504:	2200      	movs	r2, #0
 8009506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800950a:	4802      	ldr	r0, [pc, #8]	; (8009514 <nrfport_powerUp_B+0x14>)
 800950c:	f7fa fb82 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8009510:	bf00      	nop
 8009512:	bd80      	pop	{r7, pc}
 8009514:	40020400 	.word	0x40020400

08009518 <nrfport_powerDown_B>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown_B(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_SET);
 800951c:	2201      	movs	r2, #1
 800951e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009522:	4802      	ldr	r0, [pc, #8]	; (800952c <nrfport_powerDown_B+0x14>)
 8009524:	f7fa fb76 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8009528:	bf00      	nop
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40020400 	.word	0x40020400

08009530 <nrfport_getIRQ_B>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ_B(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF2_IRQ_GPIO_Port, NRF2_IRQ_Pin)) ? 1 : 0;
 8009536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800953a:	4807      	ldr	r0, [pc, #28]	; (8009558 <nrfport_getIRQ_B+0x28>)
 800953c:	f7fa fb52 	bl	8003be4 <HAL_GPIO_ReadPin>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	bf0c      	ite	eq
 8009546:	2301      	moveq	r3, #1
 8009548:	2300      	movne	r3, #0
 800954a:	b2db      	uxtb	r3, r3
 800954c:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 800954e:	79fb      	ldrb	r3, [r7, #7]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40020400 	.word	0x40020400

0800955c <__errno>:
 800955c:	4b01      	ldr	r3, [pc, #4]	; (8009564 <__errno+0x8>)
 800955e:	6818      	ldr	r0, [r3, #0]
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20000014 	.word	0x20000014

08009568 <__libc_init_array>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	4d0d      	ldr	r5, [pc, #52]	; (80095a0 <__libc_init_array+0x38>)
 800956c:	4c0d      	ldr	r4, [pc, #52]	; (80095a4 <__libc_init_array+0x3c>)
 800956e:	1b64      	subs	r4, r4, r5
 8009570:	10a4      	asrs	r4, r4, #2
 8009572:	2600      	movs	r6, #0
 8009574:	42a6      	cmp	r6, r4
 8009576:	d109      	bne.n	800958c <__libc_init_array+0x24>
 8009578:	4d0b      	ldr	r5, [pc, #44]	; (80095a8 <__libc_init_array+0x40>)
 800957a:	4c0c      	ldr	r4, [pc, #48]	; (80095ac <__libc_init_array+0x44>)
 800957c:	f001 f9cc 	bl	800a918 <_init>
 8009580:	1b64      	subs	r4, r4, r5
 8009582:	10a4      	asrs	r4, r4, #2
 8009584:	2600      	movs	r6, #0
 8009586:	42a6      	cmp	r6, r4
 8009588:	d105      	bne.n	8009596 <__libc_init_array+0x2e>
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009590:	4798      	blx	r3
 8009592:	3601      	adds	r6, #1
 8009594:	e7ee      	b.n	8009574 <__libc_init_array+0xc>
 8009596:	f855 3b04 	ldr.w	r3, [r5], #4
 800959a:	4798      	blx	r3
 800959c:	3601      	adds	r6, #1
 800959e:	e7f2      	b.n	8009586 <__libc_init_array+0x1e>
 80095a0:	0800b124 	.word	0x0800b124
 80095a4:	0800b124 	.word	0x0800b124
 80095a8:	0800b124 	.word	0x0800b124
 80095ac:	0800b128 	.word	0x0800b128

080095b0 <memcmp>:
 80095b0:	b530      	push	{r4, r5, lr}
 80095b2:	3901      	subs	r1, #1
 80095b4:	2400      	movs	r4, #0
 80095b6:	42a2      	cmp	r2, r4
 80095b8:	d101      	bne.n	80095be <memcmp+0xe>
 80095ba:	2000      	movs	r0, #0
 80095bc:	e005      	b.n	80095ca <memcmp+0x1a>
 80095be:	5d03      	ldrb	r3, [r0, r4]
 80095c0:	3401      	adds	r4, #1
 80095c2:	5d0d      	ldrb	r5, [r1, r4]
 80095c4:	42ab      	cmp	r3, r5
 80095c6:	d0f6      	beq.n	80095b6 <memcmp+0x6>
 80095c8:	1b58      	subs	r0, r3, r5
 80095ca:	bd30      	pop	{r4, r5, pc}

080095cc <memcpy>:
 80095cc:	440a      	add	r2, r1
 80095ce:	4291      	cmp	r1, r2
 80095d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d4:	d100      	bne.n	80095d8 <memcpy+0xc>
 80095d6:	4770      	bx	lr
 80095d8:	b510      	push	{r4, lr}
 80095da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e2:	4291      	cmp	r1, r2
 80095e4:	d1f9      	bne.n	80095da <memcpy+0xe>
 80095e6:	bd10      	pop	{r4, pc}

080095e8 <memset>:
 80095e8:	4402      	add	r2, r0
 80095ea:	4603      	mov	r3, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <iprintf>:
 80095f8:	b40f      	push	{r0, r1, r2, r3}
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <iprintf+0x2c>)
 80095fc:	b513      	push	{r0, r1, r4, lr}
 80095fe:	681c      	ldr	r4, [r3, #0]
 8009600:	b124      	cbz	r4, 800960c <iprintf+0x14>
 8009602:	69a3      	ldr	r3, [r4, #24]
 8009604:	b913      	cbnz	r3, 800960c <iprintf+0x14>
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fa7e 	bl	8009b08 <__sinit>
 800960c:	ab05      	add	r3, sp, #20
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	68a1      	ldr	r1, [r4, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fdab 	bl	800a170 <_vfiprintf_r>
 800961a:	b002      	add	sp, #8
 800961c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009620:	b004      	add	sp, #16
 8009622:	4770      	bx	lr
 8009624:	20000014 	.word	0x20000014

08009628 <_puts_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	460e      	mov	r6, r1
 800962c:	4605      	mov	r5, r0
 800962e:	b118      	cbz	r0, 8009638 <_puts_r+0x10>
 8009630:	6983      	ldr	r3, [r0, #24]
 8009632:	b90b      	cbnz	r3, 8009638 <_puts_r+0x10>
 8009634:	f000 fa68 	bl	8009b08 <__sinit>
 8009638:	69ab      	ldr	r3, [r5, #24]
 800963a:	68ac      	ldr	r4, [r5, #8]
 800963c:	b913      	cbnz	r3, 8009644 <_puts_r+0x1c>
 800963e:	4628      	mov	r0, r5
 8009640:	f000 fa62 	bl	8009b08 <__sinit>
 8009644:	4b2c      	ldr	r3, [pc, #176]	; (80096f8 <_puts_r+0xd0>)
 8009646:	429c      	cmp	r4, r3
 8009648:	d120      	bne.n	800968c <_puts_r+0x64>
 800964a:	686c      	ldr	r4, [r5, #4]
 800964c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964e:	07db      	lsls	r3, r3, #31
 8009650:	d405      	bmi.n	800965e <_puts_r+0x36>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	0598      	lsls	r0, r3, #22
 8009656:	d402      	bmi.n	800965e <_puts_r+0x36>
 8009658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800965a:	f000 faf3 	bl	8009c44 <__retarget_lock_acquire_recursive>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	0719      	lsls	r1, r3, #28
 8009662:	d51d      	bpl.n	80096a0 <_puts_r+0x78>
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	b1db      	cbz	r3, 80096a0 <_puts_r+0x78>
 8009668:	3e01      	subs	r6, #1
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009670:	3b01      	subs	r3, #1
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	bb39      	cbnz	r1, 80096c6 <_puts_r+0x9e>
 8009676:	2b00      	cmp	r3, #0
 8009678:	da38      	bge.n	80096ec <_puts_r+0xc4>
 800967a:	4622      	mov	r2, r4
 800967c:	210a      	movs	r1, #10
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f868 	bl	8009754 <__swbuf_r>
 8009684:	3001      	adds	r0, #1
 8009686:	d011      	beq.n	80096ac <_puts_r+0x84>
 8009688:	250a      	movs	r5, #10
 800968a:	e011      	b.n	80096b0 <_puts_r+0x88>
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <_puts_r+0xd4>)
 800968e:	429c      	cmp	r4, r3
 8009690:	d101      	bne.n	8009696 <_puts_r+0x6e>
 8009692:	68ac      	ldr	r4, [r5, #8]
 8009694:	e7da      	b.n	800964c <_puts_r+0x24>
 8009696:	4b1a      	ldr	r3, [pc, #104]	; (8009700 <_puts_r+0xd8>)
 8009698:	429c      	cmp	r4, r3
 800969a:	bf08      	it	eq
 800969c:	68ec      	ldreq	r4, [r5, #12]
 800969e:	e7d5      	b.n	800964c <_puts_r+0x24>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f8a8 	bl	80097f8 <__swsetup_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0dd      	beq.n	8009668 <_puts_r+0x40>
 80096ac:	f04f 35ff 	mov.w	r5, #4294967295
 80096b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096b2:	07da      	lsls	r2, r3, #31
 80096b4:	d405      	bmi.n	80096c2 <_puts_r+0x9a>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	059b      	lsls	r3, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_puts_r+0x9a>
 80096bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096be:	f000 fac2 	bl	8009c46 <__retarget_lock_release_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da04      	bge.n	80096d4 <_puts_r+0xac>
 80096ca:	69a2      	ldr	r2, [r4, #24]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dc06      	bgt.n	80096de <_puts_r+0xb6>
 80096d0:	290a      	cmp	r1, #10
 80096d2:	d004      	beq.n	80096de <_puts_r+0xb6>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	7019      	strb	r1, [r3, #0]
 80096dc:	e7c5      	b.n	800966a <_puts_r+0x42>
 80096de:	4622      	mov	r2, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 f837 	bl	8009754 <__swbuf_r>
 80096e6:	3001      	adds	r0, #1
 80096e8:	d1bf      	bne.n	800966a <_puts_r+0x42>
 80096ea:	e7df      	b.n	80096ac <_puts_r+0x84>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	250a      	movs	r5, #10
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	6022      	str	r2, [r4, #0]
 80096f4:	701d      	strb	r5, [r3, #0]
 80096f6:	e7db      	b.n	80096b0 <_puts_r+0x88>
 80096f8:	0800b0a8 	.word	0x0800b0a8
 80096fc:	0800b0c8 	.word	0x0800b0c8
 8009700:	0800b088 	.word	0x0800b088

08009704 <puts>:
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <puts+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f7ff bf8d 	b.w	8009628 <_puts_r>
 800970e:	bf00      	nop
 8009710:	20000014 	.word	0x20000014

08009714 <siprintf>:
 8009714:	b40e      	push	{r1, r2, r3}
 8009716:	b500      	push	{lr}
 8009718:	b09c      	sub	sp, #112	; 0x70
 800971a:	ab1d      	add	r3, sp, #116	; 0x74
 800971c:	9002      	str	r0, [sp, #8]
 800971e:	9006      	str	r0, [sp, #24]
 8009720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009724:	4809      	ldr	r0, [pc, #36]	; (800974c <siprintf+0x38>)
 8009726:	9107      	str	r1, [sp, #28]
 8009728:	9104      	str	r1, [sp, #16]
 800972a:	4909      	ldr	r1, [pc, #36]	; (8009750 <siprintf+0x3c>)
 800972c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009730:	9105      	str	r1, [sp, #20]
 8009732:	6800      	ldr	r0, [r0, #0]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	a902      	add	r1, sp, #8
 8009738:	f000 fbf0 	bl	8009f1c <_svfiprintf_r>
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	b01c      	add	sp, #112	; 0x70
 8009744:	f85d eb04 	ldr.w	lr, [sp], #4
 8009748:	b003      	add	sp, #12
 800974a:	4770      	bx	lr
 800974c:	20000014 	.word	0x20000014
 8009750:	ffff0208 	.word	0xffff0208

08009754 <__swbuf_r>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	460e      	mov	r6, r1
 8009758:	4614      	mov	r4, r2
 800975a:	4605      	mov	r5, r0
 800975c:	b118      	cbz	r0, 8009766 <__swbuf_r+0x12>
 800975e:	6983      	ldr	r3, [r0, #24]
 8009760:	b90b      	cbnz	r3, 8009766 <__swbuf_r+0x12>
 8009762:	f000 f9d1 	bl	8009b08 <__sinit>
 8009766:	4b21      	ldr	r3, [pc, #132]	; (80097ec <__swbuf_r+0x98>)
 8009768:	429c      	cmp	r4, r3
 800976a:	d12b      	bne.n	80097c4 <__swbuf_r+0x70>
 800976c:	686c      	ldr	r4, [r5, #4]
 800976e:	69a3      	ldr	r3, [r4, #24]
 8009770:	60a3      	str	r3, [r4, #8]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	071a      	lsls	r2, r3, #28
 8009776:	d52f      	bpl.n	80097d8 <__swbuf_r+0x84>
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	b36b      	cbz	r3, 80097d8 <__swbuf_r+0x84>
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	6820      	ldr	r0, [r4, #0]
 8009780:	1ac0      	subs	r0, r0, r3
 8009782:	6963      	ldr	r3, [r4, #20]
 8009784:	b2f6      	uxtb	r6, r6
 8009786:	4283      	cmp	r3, r0
 8009788:	4637      	mov	r7, r6
 800978a:	dc04      	bgt.n	8009796 <__swbuf_r+0x42>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f926 	bl	80099e0 <_fflush_r>
 8009794:	bb30      	cbnz	r0, 80097e4 <__swbuf_r+0x90>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	3b01      	subs	r3, #1
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	701e      	strb	r6, [r3, #0]
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	3001      	adds	r0, #1
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d004      	beq.n	80097b6 <__swbuf_r+0x62>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	07db      	lsls	r3, r3, #31
 80097b0:	d506      	bpl.n	80097c0 <__swbuf_r+0x6c>
 80097b2:	2e0a      	cmp	r6, #10
 80097b4:	d104      	bne.n	80097c0 <__swbuf_r+0x6c>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 f911 	bl	80099e0 <_fflush_r>
 80097be:	b988      	cbnz	r0, 80097e4 <__swbuf_r+0x90>
 80097c0:	4638      	mov	r0, r7
 80097c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <__swbuf_r+0x9c>)
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d101      	bne.n	80097ce <__swbuf_r+0x7a>
 80097ca:	68ac      	ldr	r4, [r5, #8]
 80097cc:	e7cf      	b.n	800976e <__swbuf_r+0x1a>
 80097ce:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <__swbuf_r+0xa0>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	bf08      	it	eq
 80097d4:	68ec      	ldreq	r4, [r5, #12]
 80097d6:	e7ca      	b.n	800976e <__swbuf_r+0x1a>
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f80c 	bl	80097f8 <__swsetup_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0cb      	beq.n	800977c <__swbuf_r+0x28>
 80097e4:	f04f 37ff 	mov.w	r7, #4294967295
 80097e8:	e7ea      	b.n	80097c0 <__swbuf_r+0x6c>
 80097ea:	bf00      	nop
 80097ec:	0800b0a8 	.word	0x0800b0a8
 80097f0:	0800b0c8 	.word	0x0800b0c8
 80097f4:	0800b088 	.word	0x0800b088

080097f8 <__swsetup_r>:
 80097f8:	4b32      	ldr	r3, [pc, #200]	; (80098c4 <__swsetup_r+0xcc>)
 80097fa:	b570      	push	{r4, r5, r6, lr}
 80097fc:	681d      	ldr	r5, [r3, #0]
 80097fe:	4606      	mov	r6, r0
 8009800:	460c      	mov	r4, r1
 8009802:	b125      	cbz	r5, 800980e <__swsetup_r+0x16>
 8009804:	69ab      	ldr	r3, [r5, #24]
 8009806:	b913      	cbnz	r3, 800980e <__swsetup_r+0x16>
 8009808:	4628      	mov	r0, r5
 800980a:	f000 f97d 	bl	8009b08 <__sinit>
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <__swsetup_r+0xd0>)
 8009810:	429c      	cmp	r4, r3
 8009812:	d10f      	bne.n	8009834 <__swsetup_r+0x3c>
 8009814:	686c      	ldr	r4, [r5, #4]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	d42c      	bmi.n	800987a <__swsetup_r+0x82>
 8009820:	06dd      	lsls	r5, r3, #27
 8009822:	d411      	bmi.n	8009848 <__swsetup_r+0x50>
 8009824:	2309      	movs	r3, #9
 8009826:	6033      	str	r3, [r6, #0]
 8009828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e03e      	b.n	80098b2 <__swsetup_r+0xba>
 8009834:	4b25      	ldr	r3, [pc, #148]	; (80098cc <__swsetup_r+0xd4>)
 8009836:	429c      	cmp	r4, r3
 8009838:	d101      	bne.n	800983e <__swsetup_r+0x46>
 800983a:	68ac      	ldr	r4, [r5, #8]
 800983c:	e7eb      	b.n	8009816 <__swsetup_r+0x1e>
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <__swsetup_r+0xd8>)
 8009840:	429c      	cmp	r4, r3
 8009842:	bf08      	it	eq
 8009844:	68ec      	ldreq	r4, [r5, #12]
 8009846:	e7e6      	b.n	8009816 <__swsetup_r+0x1e>
 8009848:	0758      	lsls	r0, r3, #29
 800984a:	d512      	bpl.n	8009872 <__swsetup_r+0x7a>
 800984c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800984e:	b141      	cbz	r1, 8009862 <__swsetup_r+0x6a>
 8009850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <__swsetup_r+0x66>
 8009858:	4630      	mov	r0, r6
 800985a:	f000 fa59 	bl	8009d10 <_free_r>
 800985e:	2300      	movs	r3, #0
 8009860:	6363      	str	r3, [r4, #52]	; 0x34
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	2300      	movs	r3, #0
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f043 0308 	orr.w	r3, r3, #8
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	b94b      	cbnz	r3, 8009892 <__swsetup_r+0x9a>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009888:	d003      	beq.n	8009892 <__swsetup_r+0x9a>
 800988a:	4621      	mov	r1, r4
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f9ff 	bl	8009c90 <__smakebuf_r>
 8009892:	89a0      	ldrh	r0, [r4, #12]
 8009894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009898:	f010 0301 	ands.w	r3, r0, #1
 800989c:	d00a      	beq.n	80098b4 <__swsetup_r+0xbc>
 800989e:	2300      	movs	r3, #0
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	6963      	ldr	r3, [r4, #20]
 80098a4:	425b      	negs	r3, r3
 80098a6:	61a3      	str	r3, [r4, #24]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	b943      	cbnz	r3, 80098be <__swsetup_r+0xc6>
 80098ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b0:	d1ba      	bne.n	8009828 <__swsetup_r+0x30>
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0781      	lsls	r1, r0, #30
 80098b6:	bf58      	it	pl
 80098b8:	6963      	ldrpl	r3, [r4, #20]
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	e7f4      	b.n	80098a8 <__swsetup_r+0xb0>
 80098be:	2000      	movs	r0, #0
 80098c0:	e7f7      	b.n	80098b2 <__swsetup_r+0xba>
 80098c2:	bf00      	nop
 80098c4:	20000014 	.word	0x20000014
 80098c8:	0800b0a8 	.word	0x0800b0a8
 80098cc:	0800b0c8 	.word	0x0800b0c8
 80098d0:	0800b088 	.word	0x0800b088

080098d4 <__sflush_r>:
 80098d4:	898a      	ldrh	r2, [r1, #12]
 80098d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	4605      	mov	r5, r0
 80098dc:	0710      	lsls	r0, r2, #28
 80098de:	460c      	mov	r4, r1
 80098e0:	d458      	bmi.n	8009994 <__sflush_r+0xc0>
 80098e2:	684b      	ldr	r3, [r1, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dc05      	bgt.n	80098f4 <__sflush_r+0x20>
 80098e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dc02      	bgt.n	80098f4 <__sflush_r+0x20>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098f6:	2e00      	cmp	r6, #0
 80098f8:	d0f9      	beq.n	80098ee <__sflush_r+0x1a>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009900:	682f      	ldr	r7, [r5, #0]
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	d032      	beq.n	800996c <__sflush_r+0x98>
 8009906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	075a      	lsls	r2, r3, #29
 800990c:	d505      	bpl.n	800991a <__sflush_r+0x46>
 800990e:	6863      	ldr	r3, [r4, #4]
 8009910:	1ac0      	subs	r0, r0, r3
 8009912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009914:	b10b      	cbz	r3, 800991a <__sflush_r+0x46>
 8009916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009918:	1ac0      	subs	r0, r0, r3
 800991a:	2300      	movs	r3, #0
 800991c:	4602      	mov	r2, r0
 800991e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	4628      	mov	r0, r5
 8009924:	47b0      	blx	r6
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	d106      	bne.n	800993a <__sflush_r+0x66>
 800992c:	6829      	ldr	r1, [r5, #0]
 800992e:	291d      	cmp	r1, #29
 8009930:	d82c      	bhi.n	800998c <__sflush_r+0xb8>
 8009932:	4a2a      	ldr	r2, [pc, #168]	; (80099dc <__sflush_r+0x108>)
 8009934:	40ca      	lsrs	r2, r1
 8009936:	07d6      	lsls	r6, r2, #31
 8009938:	d528      	bpl.n	800998c <__sflush_r+0xb8>
 800993a:	2200      	movs	r2, #0
 800993c:	6062      	str	r2, [r4, #4]
 800993e:	04d9      	lsls	r1, r3, #19
 8009940:	6922      	ldr	r2, [r4, #16]
 8009942:	6022      	str	r2, [r4, #0]
 8009944:	d504      	bpl.n	8009950 <__sflush_r+0x7c>
 8009946:	1c42      	adds	r2, r0, #1
 8009948:	d101      	bne.n	800994e <__sflush_r+0x7a>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	b903      	cbnz	r3, 8009950 <__sflush_r+0x7c>
 800994e:	6560      	str	r0, [r4, #84]	; 0x54
 8009950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009952:	602f      	str	r7, [r5, #0]
 8009954:	2900      	cmp	r1, #0
 8009956:	d0ca      	beq.n	80098ee <__sflush_r+0x1a>
 8009958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995c:	4299      	cmp	r1, r3
 800995e:	d002      	beq.n	8009966 <__sflush_r+0x92>
 8009960:	4628      	mov	r0, r5
 8009962:	f000 f9d5 	bl	8009d10 <_free_r>
 8009966:	2000      	movs	r0, #0
 8009968:	6360      	str	r0, [r4, #52]	; 0x34
 800996a:	e7c1      	b.n	80098f0 <__sflush_r+0x1c>
 800996c:	6a21      	ldr	r1, [r4, #32]
 800996e:	2301      	movs	r3, #1
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	1c41      	adds	r1, r0, #1
 8009976:	d1c7      	bne.n	8009908 <__sflush_r+0x34>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c4      	beq.n	8009908 <__sflush_r+0x34>
 800997e:	2b1d      	cmp	r3, #29
 8009980:	d001      	beq.n	8009986 <__sflush_r+0xb2>
 8009982:	2b16      	cmp	r3, #22
 8009984:	d101      	bne.n	800998a <__sflush_r+0xb6>
 8009986:	602f      	str	r7, [r5, #0]
 8009988:	e7b1      	b.n	80098ee <__sflush_r+0x1a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	e7ad      	b.n	80098f0 <__sflush_r+0x1c>
 8009994:	690f      	ldr	r7, [r1, #16]
 8009996:	2f00      	cmp	r7, #0
 8009998:	d0a9      	beq.n	80098ee <__sflush_r+0x1a>
 800999a:	0793      	lsls	r3, r2, #30
 800999c:	680e      	ldr	r6, [r1, #0]
 800999e:	bf08      	it	eq
 80099a0:	694b      	ldreq	r3, [r1, #20]
 80099a2:	600f      	str	r7, [r1, #0]
 80099a4:	bf18      	it	ne
 80099a6:	2300      	movne	r3, #0
 80099a8:	eba6 0807 	sub.w	r8, r6, r7
 80099ac:	608b      	str	r3, [r1, #8]
 80099ae:	f1b8 0f00 	cmp.w	r8, #0
 80099b2:	dd9c      	ble.n	80098ee <__sflush_r+0x1a>
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099b8:	4643      	mov	r3, r8
 80099ba:	463a      	mov	r2, r7
 80099bc:	4628      	mov	r0, r5
 80099be:	47b0      	blx	r6
 80099c0:	2800      	cmp	r0, #0
 80099c2:	dc06      	bgt.n	80099d2 <__sflush_r+0xfe>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	e78e      	b.n	80098f0 <__sflush_r+0x1c>
 80099d2:	4407      	add	r7, r0
 80099d4:	eba8 0800 	sub.w	r8, r8, r0
 80099d8:	e7e9      	b.n	80099ae <__sflush_r+0xda>
 80099da:	bf00      	nop
 80099dc:	20400001 	.word	0x20400001

080099e0 <_fflush_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	690b      	ldr	r3, [r1, #16]
 80099e4:	4605      	mov	r5, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	b913      	cbnz	r3, 80099f0 <_fflush_r+0x10>
 80099ea:	2500      	movs	r5, #0
 80099ec:	4628      	mov	r0, r5
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	b118      	cbz	r0, 80099fa <_fflush_r+0x1a>
 80099f2:	6983      	ldr	r3, [r0, #24]
 80099f4:	b90b      	cbnz	r3, 80099fa <_fflush_r+0x1a>
 80099f6:	f000 f887 	bl	8009b08 <__sinit>
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <_fflush_r+0x6c>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	d11b      	bne.n	8009a38 <_fflush_r+0x58>
 8009a00:	686c      	ldr	r4, [r5, #4]
 8009a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0ef      	beq.n	80099ea <_fflush_r+0xa>
 8009a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a0c:	07d0      	lsls	r0, r2, #31
 8009a0e:	d404      	bmi.n	8009a1a <_fflush_r+0x3a>
 8009a10:	0599      	lsls	r1, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_fflush_r+0x3a>
 8009a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a16:	f000 f915 	bl	8009c44 <__retarget_lock_acquire_recursive>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f7ff ff59 	bl	80098d4 <__sflush_r>
 8009a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	4605      	mov	r5, r0
 8009a28:	d4e0      	bmi.n	80099ec <_fflush_r+0xc>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d4dd      	bmi.n	80099ec <_fflush_r+0xc>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 f908 	bl	8009c46 <__retarget_lock_release_recursive>
 8009a36:	e7d9      	b.n	80099ec <_fflush_r+0xc>
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <_fflush_r+0x70>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d101      	bne.n	8009a42 <_fflush_r+0x62>
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	e7df      	b.n	8009a02 <_fflush_r+0x22>
 8009a42:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <_fflush_r+0x74>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	bf08      	it	eq
 8009a48:	68ec      	ldreq	r4, [r5, #12]
 8009a4a:	e7da      	b.n	8009a02 <_fflush_r+0x22>
 8009a4c:	0800b0a8 	.word	0x0800b0a8
 8009a50:	0800b0c8 	.word	0x0800b0c8
 8009a54:	0800b088 	.word	0x0800b088

08009a58 <std>:
 8009a58:	2300      	movs	r3, #0
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a66:	6083      	str	r3, [r0, #8]
 8009a68:	8181      	strh	r1, [r0, #12]
 8009a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a6c:	81c2      	strh	r2, [r0, #14]
 8009a6e:	6183      	str	r3, [r0, #24]
 8009a70:	4619      	mov	r1, r3
 8009a72:	2208      	movs	r2, #8
 8009a74:	305c      	adds	r0, #92	; 0x5c
 8009a76:	f7ff fdb7 	bl	80095e8 <memset>
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <std+0x38>)
 8009a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <std+0x3c>)
 8009a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <std+0x40>)
 8009a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <std+0x44>)
 8009a88:	6224      	str	r4, [r4, #32]
 8009a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800a719 	.word	0x0800a719
 8009a94:	0800a73b 	.word	0x0800a73b
 8009a98:	0800a773 	.word	0x0800a773
 8009a9c:	0800a797 	.word	0x0800a797

08009aa0 <_cleanup_r>:
 8009aa0:	4901      	ldr	r1, [pc, #4]	; (8009aa8 <_cleanup_r+0x8>)
 8009aa2:	f000 b8af 	b.w	8009c04 <_fwalk_reent>
 8009aa6:	bf00      	nop
 8009aa8:	080099e1 	.word	0x080099e1

08009aac <__sfmoreglue>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	1e4a      	subs	r2, r1, #1
 8009ab0:	2568      	movs	r5, #104	; 0x68
 8009ab2:	4355      	muls	r5, r2
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009aba:	f000 f979 	bl	8009db0 <_malloc_r>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	b140      	cbz	r0, 8009ad4 <__sfmoreglue+0x28>
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ac8:	300c      	adds	r0, #12
 8009aca:	60a0      	str	r0, [r4, #8]
 8009acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ad0:	f7ff fd8a 	bl	80095e8 <memset>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}

08009ad8 <__sfp_lock_acquire>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__sfp_lock_acquire+0x8>)
 8009ada:	f000 b8b3 	b.w	8009c44 <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20001930 	.word	0x20001930

08009ae4 <__sfp_lock_release>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__sfp_lock_release+0x8>)
 8009ae6:	f000 b8ae 	b.w	8009c46 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	20001930 	.word	0x20001930

08009af0 <__sinit_lock_acquire>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__sinit_lock_acquire+0x8>)
 8009af2:	f000 b8a7 	b.w	8009c44 <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	2000192b 	.word	0x2000192b

08009afc <__sinit_lock_release>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sinit_lock_release+0x8>)
 8009afe:	f000 b8a2 	b.w	8009c46 <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	2000192b 	.word	0x2000192b

08009b08 <__sinit>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	f7ff fff0 	bl	8009af0 <__sinit_lock_acquire>
 8009b10:	69a3      	ldr	r3, [r4, #24]
 8009b12:	b11b      	cbz	r3, 8009b1c <__sinit+0x14>
 8009b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b18:	f7ff bff0 	b.w	8009afc <__sinit_lock_release>
 8009b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b20:	6523      	str	r3, [r4, #80]	; 0x50
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <__sinit+0x68>)
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <__sinit+0x6c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	bf04      	itt	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	61a3      	streq	r3, [r4, #24]
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f820 	bl	8009b78 <__sfp>
 8009b38:	6060      	str	r0, [r4, #4]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f81c 	bl	8009b78 <__sfp>
 8009b40:	60a0      	str	r0, [r4, #8]
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f818 	bl	8009b78 <__sfp>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	60e0      	str	r0, [r4, #12]
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	6860      	ldr	r0, [r4, #4]
 8009b50:	f7ff ff82 	bl	8009a58 <std>
 8009b54:	68a0      	ldr	r0, [r4, #8]
 8009b56:	2201      	movs	r2, #1
 8009b58:	2109      	movs	r1, #9
 8009b5a:	f7ff ff7d 	bl	8009a58 <std>
 8009b5e:	68e0      	ldr	r0, [r4, #12]
 8009b60:	2202      	movs	r2, #2
 8009b62:	2112      	movs	r1, #18
 8009b64:	f7ff ff78 	bl	8009a58 <std>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	61a3      	str	r3, [r4, #24]
 8009b6c:	e7d2      	b.n	8009b14 <__sinit+0xc>
 8009b6e:	bf00      	nop
 8009b70:	0800b084 	.word	0x0800b084
 8009b74:	08009aa1 	.word	0x08009aa1

08009b78 <__sfp>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	f7ff ffac 	bl	8009ad8 <__sfp_lock_acquire>
 8009b80:	4b1e      	ldr	r3, [pc, #120]	; (8009bfc <__sfp+0x84>)
 8009b82:	681e      	ldr	r6, [r3, #0]
 8009b84:	69b3      	ldr	r3, [r6, #24]
 8009b86:	b913      	cbnz	r3, 8009b8e <__sfp+0x16>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7ff ffbd 	bl	8009b08 <__sinit>
 8009b8e:	3648      	adds	r6, #72	; 0x48
 8009b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	d503      	bpl.n	8009ba0 <__sfp+0x28>
 8009b98:	6833      	ldr	r3, [r6, #0]
 8009b9a:	b30b      	cbz	r3, 8009be0 <__sfp+0x68>
 8009b9c:	6836      	ldr	r6, [r6, #0]
 8009b9e:	e7f7      	b.n	8009b90 <__sfp+0x18>
 8009ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ba4:	b9d5      	cbnz	r5, 8009bdc <__sfp+0x64>
 8009ba6:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <__sfp+0x88>)
 8009ba8:	60e3      	str	r3, [r4, #12]
 8009baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bae:	6665      	str	r5, [r4, #100]	; 0x64
 8009bb0:	f000 f847 	bl	8009c42 <__retarget_lock_init_recursive>
 8009bb4:	f7ff ff96 	bl	8009ae4 <__sfp_lock_release>
 8009bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bc0:	6025      	str	r5, [r4, #0]
 8009bc2:	61a5      	str	r5, [r4, #24]
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bcc:	f7ff fd0c 	bl	80095e8 <memset>
 8009bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bd8:	4620      	mov	r0, r4
 8009bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bdc:	3468      	adds	r4, #104	; 0x68
 8009bde:	e7d9      	b.n	8009b94 <__sfp+0x1c>
 8009be0:	2104      	movs	r1, #4
 8009be2:	4638      	mov	r0, r7
 8009be4:	f7ff ff62 	bl	8009aac <__sfmoreglue>
 8009be8:	4604      	mov	r4, r0
 8009bea:	6030      	str	r0, [r6, #0]
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1d5      	bne.n	8009b9c <__sfp+0x24>
 8009bf0:	f7ff ff78 	bl	8009ae4 <__sfp_lock_release>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	e7ee      	b.n	8009bd8 <__sfp+0x60>
 8009bfa:	bf00      	nop
 8009bfc:	0800b084 	.word	0x0800b084
 8009c00:	ffff0001 	.word	0xffff0001

08009c04 <_fwalk_reent>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4688      	mov	r8, r1
 8009c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c10:	2700      	movs	r7, #0
 8009c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c16:	f1b9 0901 	subs.w	r9, r9, #1
 8009c1a:	d505      	bpl.n	8009c28 <_fwalk_reent+0x24>
 8009c1c:	6824      	ldr	r4, [r4, #0]
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	d1f7      	bne.n	8009c12 <_fwalk_reent+0xe>
 8009c22:	4638      	mov	r0, r7
 8009c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c28:	89ab      	ldrh	r3, [r5, #12]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d907      	bls.n	8009c3e <_fwalk_reent+0x3a>
 8009c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c32:	3301      	adds	r3, #1
 8009c34:	d003      	beq.n	8009c3e <_fwalk_reent+0x3a>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	47c0      	blx	r8
 8009c3c:	4307      	orrs	r7, r0
 8009c3e:	3568      	adds	r5, #104	; 0x68
 8009c40:	e7e9      	b.n	8009c16 <_fwalk_reent+0x12>

08009c42 <__retarget_lock_init_recursive>:
 8009c42:	4770      	bx	lr

08009c44 <__retarget_lock_acquire_recursive>:
 8009c44:	4770      	bx	lr

08009c46 <__retarget_lock_release_recursive>:
 8009c46:	4770      	bx	lr

08009c48 <__swhatbuf_r>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	460e      	mov	r6, r1
 8009c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c50:	2900      	cmp	r1, #0
 8009c52:	b096      	sub	sp, #88	; 0x58
 8009c54:	4614      	mov	r4, r2
 8009c56:	461d      	mov	r5, r3
 8009c58:	da07      	bge.n	8009c6a <__swhatbuf_r+0x22>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	89b3      	ldrh	r3, [r6, #12]
 8009c60:	061a      	lsls	r2, r3, #24
 8009c62:	d410      	bmi.n	8009c86 <__swhatbuf_r+0x3e>
 8009c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c68:	e00e      	b.n	8009c88 <__swhatbuf_r+0x40>
 8009c6a:	466a      	mov	r2, sp
 8009c6c:	f000 fdba 	bl	800a7e4 <_fstat_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dbf2      	blt.n	8009c5a <__swhatbuf_r+0x12>
 8009c74:	9a01      	ldr	r2, [sp, #4]
 8009c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c7e:	425a      	negs	r2, r3
 8009c80:	415a      	adcs	r2, r3
 8009c82:	602a      	str	r2, [r5, #0]
 8009c84:	e7ee      	b.n	8009c64 <__swhatbuf_r+0x1c>
 8009c86:	2340      	movs	r3, #64	; 0x40
 8009c88:	2000      	movs	r0, #0
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	b016      	add	sp, #88	; 0x58
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}

08009c90 <__smakebuf_r>:
 8009c90:	898b      	ldrh	r3, [r1, #12]
 8009c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c94:	079d      	lsls	r5, r3, #30
 8009c96:	4606      	mov	r6, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	d507      	bpl.n	8009cac <__smakebuf_r+0x1c>
 8009c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	6163      	str	r3, [r4, #20]
 8009ca8:	b002      	add	sp, #8
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	ab01      	add	r3, sp, #4
 8009cae:	466a      	mov	r2, sp
 8009cb0:	f7ff ffca 	bl	8009c48 <__swhatbuf_r>
 8009cb4:	9900      	ldr	r1, [sp, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f000 f879 	bl	8009db0 <_malloc_r>
 8009cbe:	b948      	cbnz	r0, 8009cd4 <__smakebuf_r+0x44>
 8009cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc4:	059a      	lsls	r2, r3, #22
 8009cc6:	d4ef      	bmi.n	8009ca8 <__smakebuf_r+0x18>
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	f043 0302 	orr.w	r3, r3, #2
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	e7e3      	b.n	8009c9c <__smakebuf_r+0xc>
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <__smakebuf_r+0x7c>)
 8009cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	6020      	str	r0, [r4, #0]
 8009cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	6163      	str	r3, [r4, #20]
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	6120      	str	r0, [r4, #16]
 8009cea:	b15b      	cbz	r3, 8009d04 <__smakebuf_r+0x74>
 8009cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f000 fd89 	bl	800a808 <_isatty_r>
 8009cf6:	b128      	cbz	r0, 8009d04 <__smakebuf_r+0x74>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	f043 0301 	orr.w	r3, r3, #1
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	89a0      	ldrh	r0, [r4, #12]
 8009d06:	4305      	orrs	r5, r0
 8009d08:	81a5      	strh	r5, [r4, #12]
 8009d0a:	e7cd      	b.n	8009ca8 <__smakebuf_r+0x18>
 8009d0c:	08009aa1 	.word	0x08009aa1

08009d10 <_free_r>:
 8009d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d12:	2900      	cmp	r1, #0
 8009d14:	d048      	beq.n	8009da8 <_free_r+0x98>
 8009d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d1a:	9001      	str	r0, [sp, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8009d22:	bfb8      	it	lt
 8009d24:	18e4      	addlt	r4, r4, r3
 8009d26:	f000 fdab 	bl	800a880 <__malloc_lock>
 8009d2a:	4a20      	ldr	r2, [pc, #128]	; (8009dac <_free_r+0x9c>)
 8009d2c:	9801      	ldr	r0, [sp, #4]
 8009d2e:	6813      	ldr	r3, [r2, #0]
 8009d30:	4615      	mov	r5, r2
 8009d32:	b933      	cbnz	r3, 8009d42 <_free_r+0x32>
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	6014      	str	r4, [r2, #0]
 8009d38:	b003      	add	sp, #12
 8009d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d3e:	f000 bda5 	b.w	800a88c <__malloc_unlock>
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	d90b      	bls.n	8009d5e <_free_r+0x4e>
 8009d46:	6821      	ldr	r1, [r4, #0]
 8009d48:	1862      	adds	r2, r4, r1
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	bf04      	itt	eq
 8009d4e:	681a      	ldreq	r2, [r3, #0]
 8009d50:	685b      	ldreq	r3, [r3, #4]
 8009d52:	6063      	str	r3, [r4, #4]
 8009d54:	bf04      	itt	eq
 8009d56:	1852      	addeq	r2, r2, r1
 8009d58:	6022      	streq	r2, [r4, #0]
 8009d5a:	602c      	str	r4, [r5, #0]
 8009d5c:	e7ec      	b.n	8009d38 <_free_r+0x28>
 8009d5e:	461a      	mov	r2, r3
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	b10b      	cbz	r3, 8009d68 <_free_r+0x58>
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	d9fa      	bls.n	8009d5e <_free_r+0x4e>
 8009d68:	6811      	ldr	r1, [r2, #0]
 8009d6a:	1855      	adds	r5, r2, r1
 8009d6c:	42a5      	cmp	r5, r4
 8009d6e:	d10b      	bne.n	8009d88 <_free_r+0x78>
 8009d70:	6824      	ldr	r4, [r4, #0]
 8009d72:	4421      	add	r1, r4
 8009d74:	1854      	adds	r4, r2, r1
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	d1dd      	bne.n	8009d38 <_free_r+0x28>
 8009d7c:	681c      	ldr	r4, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	6053      	str	r3, [r2, #4]
 8009d82:	4421      	add	r1, r4
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	e7d7      	b.n	8009d38 <_free_r+0x28>
 8009d88:	d902      	bls.n	8009d90 <_free_r+0x80>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	e7d3      	b.n	8009d38 <_free_r+0x28>
 8009d90:	6825      	ldr	r5, [r4, #0]
 8009d92:	1961      	adds	r1, r4, r5
 8009d94:	428b      	cmp	r3, r1
 8009d96:	bf04      	itt	eq
 8009d98:	6819      	ldreq	r1, [r3, #0]
 8009d9a:	685b      	ldreq	r3, [r3, #4]
 8009d9c:	6063      	str	r3, [r4, #4]
 8009d9e:	bf04      	itt	eq
 8009da0:	1949      	addeq	r1, r1, r5
 8009da2:	6021      	streq	r1, [r4, #0]
 8009da4:	6054      	str	r4, [r2, #4]
 8009da6:	e7c7      	b.n	8009d38 <_free_r+0x28>
 8009da8:	b003      	add	sp, #12
 8009daa:	bd30      	pop	{r4, r5, pc}
 8009dac:	200014d0 	.word	0x200014d0

08009db0 <_malloc_r>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	1ccd      	adds	r5, r1, #3
 8009db4:	f025 0503 	bic.w	r5, r5, #3
 8009db8:	3508      	adds	r5, #8
 8009dba:	2d0c      	cmp	r5, #12
 8009dbc:	bf38      	it	cc
 8009dbe:	250c      	movcc	r5, #12
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	db01      	blt.n	8009dca <_malloc_r+0x1a>
 8009dc6:	42a9      	cmp	r1, r5
 8009dc8:	d903      	bls.n	8009dd2 <_malloc_r+0x22>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	2000      	movs	r0, #0
 8009dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd2:	f000 fd55 	bl	800a880 <__malloc_lock>
 8009dd6:	4921      	ldr	r1, [pc, #132]	; (8009e5c <_malloc_r+0xac>)
 8009dd8:	680a      	ldr	r2, [r1, #0]
 8009dda:	4614      	mov	r4, r2
 8009ddc:	b99c      	cbnz	r4, 8009e06 <_malloc_r+0x56>
 8009dde:	4f20      	ldr	r7, [pc, #128]	; (8009e60 <_malloc_r+0xb0>)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	b923      	cbnz	r3, 8009dee <_malloc_r+0x3e>
 8009de4:	4621      	mov	r1, r4
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 fc86 	bl	800a6f8 <_sbrk_r>
 8009dec:	6038      	str	r0, [r7, #0]
 8009dee:	4629      	mov	r1, r5
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 fc81 	bl	800a6f8 <_sbrk_r>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d123      	bne.n	8009e42 <_malloc_r+0x92>
 8009dfa:	230c      	movs	r3, #12
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f000 fd44 	bl	800a88c <__malloc_unlock>
 8009e04:	e7e3      	b.n	8009dce <_malloc_r+0x1e>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	1b5b      	subs	r3, r3, r5
 8009e0a:	d417      	bmi.n	8009e3c <_malloc_r+0x8c>
 8009e0c:	2b0b      	cmp	r3, #11
 8009e0e:	d903      	bls.n	8009e18 <_malloc_r+0x68>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	441c      	add	r4, r3
 8009e14:	6025      	str	r5, [r4, #0]
 8009e16:	e004      	b.n	8009e22 <_malloc_r+0x72>
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	42a2      	cmp	r2, r4
 8009e1c:	bf0c      	ite	eq
 8009e1e:	600b      	streq	r3, [r1, #0]
 8009e20:	6053      	strne	r3, [r2, #4]
 8009e22:	4630      	mov	r0, r6
 8009e24:	f000 fd32 	bl	800a88c <__malloc_unlock>
 8009e28:	f104 000b 	add.w	r0, r4, #11
 8009e2c:	1d23      	adds	r3, r4, #4
 8009e2e:	f020 0007 	bic.w	r0, r0, #7
 8009e32:	1ac2      	subs	r2, r0, r3
 8009e34:	d0cc      	beq.n	8009dd0 <_malloc_r+0x20>
 8009e36:	1a1b      	subs	r3, r3, r0
 8009e38:	50a3      	str	r3, [r4, r2]
 8009e3a:	e7c9      	b.n	8009dd0 <_malloc_r+0x20>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	6864      	ldr	r4, [r4, #4]
 8009e40:	e7cc      	b.n	8009ddc <_malloc_r+0x2c>
 8009e42:	1cc4      	adds	r4, r0, #3
 8009e44:	f024 0403 	bic.w	r4, r4, #3
 8009e48:	42a0      	cmp	r0, r4
 8009e4a:	d0e3      	beq.n	8009e14 <_malloc_r+0x64>
 8009e4c:	1a21      	subs	r1, r4, r0
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f000 fc52 	bl	800a6f8 <_sbrk_r>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d1dd      	bne.n	8009e14 <_malloc_r+0x64>
 8009e58:	e7cf      	b.n	8009dfa <_malloc_r+0x4a>
 8009e5a:	bf00      	nop
 8009e5c:	200014d0 	.word	0x200014d0
 8009e60:	200014d4 	.word	0x200014d4

08009e64 <__ssputs_r>:
 8009e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e68:	688e      	ldr	r6, [r1, #8]
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	4690      	mov	r8, r2
 8009e72:	461f      	mov	r7, r3
 8009e74:	d838      	bhi.n	8009ee8 <__ssputs_r+0x84>
 8009e76:	898a      	ldrh	r2, [r1, #12]
 8009e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e7c:	d032      	beq.n	8009ee4 <__ssputs_r+0x80>
 8009e7e:	6825      	ldr	r5, [r4, #0]
 8009e80:	6909      	ldr	r1, [r1, #16]
 8009e82:	eba5 0901 	sub.w	r9, r5, r1
 8009e86:	6965      	ldr	r5, [r4, #20]
 8009e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e90:	3301      	adds	r3, #1
 8009e92:	444b      	add	r3, r9
 8009e94:	106d      	asrs	r5, r5, #1
 8009e96:	429d      	cmp	r5, r3
 8009e98:	bf38      	it	cc
 8009e9a:	461d      	movcc	r5, r3
 8009e9c:	0553      	lsls	r3, r2, #21
 8009e9e:	d531      	bpl.n	8009f04 <__ssputs_r+0xa0>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7ff ff85 	bl	8009db0 <_malloc_r>
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	b950      	cbnz	r0, 8009ec0 <__ssputs_r+0x5c>
 8009eaa:	230c      	movs	r3, #12
 8009eac:	f8ca 3000 	str.w	r3, [sl]
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	6921      	ldr	r1, [r4, #16]
 8009ec2:	464a      	mov	r2, r9
 8009ec4:	f7ff fb82 	bl	80095cc <memcpy>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	6126      	str	r6, [r4, #16]
 8009ed6:	6165      	str	r5, [r4, #20]
 8009ed8:	444e      	add	r6, r9
 8009eda:	eba5 0509 	sub.w	r5, r5, r9
 8009ede:	6026      	str	r6, [r4, #0]
 8009ee0:	60a5      	str	r5, [r4, #8]
 8009ee2:	463e      	mov	r6, r7
 8009ee4:	42be      	cmp	r6, r7
 8009ee6:	d900      	bls.n	8009eea <__ssputs_r+0x86>
 8009ee8:	463e      	mov	r6, r7
 8009eea:	4632      	mov	r2, r6
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	4641      	mov	r1, r8
 8009ef0:	f000 fcac 	bl	800a84c <memmove>
 8009ef4:	68a3      	ldr	r3, [r4, #8]
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	1b9b      	subs	r3, r3, r6
 8009efa:	4432      	add	r2, r6
 8009efc:	60a3      	str	r3, [r4, #8]
 8009efe:	6022      	str	r2, [r4, #0]
 8009f00:	2000      	movs	r0, #0
 8009f02:	e7db      	b.n	8009ebc <__ssputs_r+0x58>
 8009f04:	462a      	mov	r2, r5
 8009f06:	f000 fcc7 	bl	800a898 <_realloc_r>
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1e1      	bne.n	8009ed4 <__ssputs_r+0x70>
 8009f10:	6921      	ldr	r1, [r4, #16]
 8009f12:	4650      	mov	r0, sl
 8009f14:	f7ff fefc 	bl	8009d10 <_free_r>
 8009f18:	e7c7      	b.n	8009eaa <__ssputs_r+0x46>
	...

08009f1c <_svfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4698      	mov	r8, r3
 8009f22:	898b      	ldrh	r3, [r1, #12]
 8009f24:	061b      	lsls	r3, r3, #24
 8009f26:	b09d      	sub	sp, #116	; 0x74
 8009f28:	4607      	mov	r7, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	4614      	mov	r4, r2
 8009f2e:	d50e      	bpl.n	8009f4e <_svfiprintf_r+0x32>
 8009f30:	690b      	ldr	r3, [r1, #16]
 8009f32:	b963      	cbnz	r3, 8009f4e <_svfiprintf_r+0x32>
 8009f34:	2140      	movs	r1, #64	; 0x40
 8009f36:	f7ff ff3b 	bl	8009db0 <_malloc_r>
 8009f3a:	6028      	str	r0, [r5, #0]
 8009f3c:	6128      	str	r0, [r5, #16]
 8009f3e:	b920      	cbnz	r0, 8009f4a <_svfiprintf_r+0x2e>
 8009f40:	230c      	movs	r3, #12
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	e0d1      	b.n	800a0ee <_svfiprintf_r+0x1d2>
 8009f4a:	2340      	movs	r3, #64	; 0x40
 8009f4c:	616b      	str	r3, [r5, #20]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9309      	str	r3, [sp, #36]	; 0x24
 8009f52:	2320      	movs	r3, #32
 8009f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5c:	2330      	movs	r3, #48	; 0x30
 8009f5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a108 <_svfiprintf_r+0x1ec>
 8009f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f66:	f04f 0901 	mov.w	r9, #1
 8009f6a:	4623      	mov	r3, r4
 8009f6c:	469a      	mov	sl, r3
 8009f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f72:	b10a      	cbz	r2, 8009f78 <_svfiprintf_r+0x5c>
 8009f74:	2a25      	cmp	r2, #37	; 0x25
 8009f76:	d1f9      	bne.n	8009f6c <_svfiprintf_r+0x50>
 8009f78:	ebba 0b04 	subs.w	fp, sl, r4
 8009f7c:	d00b      	beq.n	8009f96 <_svfiprintf_r+0x7a>
 8009f7e:	465b      	mov	r3, fp
 8009f80:	4622      	mov	r2, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	4638      	mov	r0, r7
 8009f86:	f7ff ff6d 	bl	8009e64 <__ssputs_r>
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f000 80aa 	beq.w	800a0e4 <_svfiprintf_r+0x1c8>
 8009f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f92:	445a      	add	r2, fp
 8009f94:	9209      	str	r2, [sp, #36]	; 0x24
 8009f96:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80a2 	beq.w	800a0e4 <_svfiprintf_r+0x1c8>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009faa:	f10a 0a01 	add.w	sl, sl, #1
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	9307      	str	r3, [sp, #28]
 8009fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb8:	4654      	mov	r4, sl
 8009fba:	2205      	movs	r2, #5
 8009fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc0:	4851      	ldr	r0, [pc, #324]	; (800a108 <_svfiprintf_r+0x1ec>)
 8009fc2:	f7f6 f945 	bl	8000250 <memchr>
 8009fc6:	9a04      	ldr	r2, [sp, #16]
 8009fc8:	b9d8      	cbnz	r0, 800a002 <_svfiprintf_r+0xe6>
 8009fca:	06d0      	lsls	r0, r2, #27
 8009fcc:	bf44      	itt	mi
 8009fce:	2320      	movmi	r3, #32
 8009fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd4:	0711      	lsls	r1, r2, #28
 8009fd6:	bf44      	itt	mi
 8009fd8:	232b      	movmi	r3, #43	; 0x2b
 8009fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fde:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe4:	d015      	beq.n	800a012 <_svfiprintf_r+0xf6>
 8009fe6:	9a07      	ldr	r2, [sp, #28]
 8009fe8:	4654      	mov	r4, sl
 8009fea:	2000      	movs	r0, #0
 8009fec:	f04f 0c0a 	mov.w	ip, #10
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff6:	3b30      	subs	r3, #48	; 0x30
 8009ff8:	2b09      	cmp	r3, #9
 8009ffa:	d94e      	bls.n	800a09a <_svfiprintf_r+0x17e>
 8009ffc:	b1b0      	cbz	r0, 800a02c <_svfiprintf_r+0x110>
 8009ffe:	9207      	str	r2, [sp, #28]
 800a000:	e014      	b.n	800a02c <_svfiprintf_r+0x110>
 800a002:	eba0 0308 	sub.w	r3, r0, r8
 800a006:	fa09 f303 	lsl.w	r3, r9, r3
 800a00a:	4313      	orrs	r3, r2
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	46a2      	mov	sl, r4
 800a010:	e7d2      	b.n	8009fb8 <_svfiprintf_r+0x9c>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	1d19      	adds	r1, r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	9103      	str	r1, [sp, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfbb      	ittet	lt
 800a01e:	425b      	neglt	r3, r3
 800a020:	f042 0202 	orrlt.w	r2, r2, #2
 800a024:	9307      	strge	r3, [sp, #28]
 800a026:	9307      	strlt	r3, [sp, #28]
 800a028:	bfb8      	it	lt
 800a02a:	9204      	strlt	r2, [sp, #16]
 800a02c:	7823      	ldrb	r3, [r4, #0]
 800a02e:	2b2e      	cmp	r3, #46	; 0x2e
 800a030:	d10c      	bne.n	800a04c <_svfiprintf_r+0x130>
 800a032:	7863      	ldrb	r3, [r4, #1]
 800a034:	2b2a      	cmp	r3, #42	; 0x2a
 800a036:	d135      	bne.n	800a0a4 <_svfiprintf_r+0x188>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	1d1a      	adds	r2, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9203      	str	r2, [sp, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfb8      	it	lt
 800a044:	f04f 33ff 	movlt.w	r3, #4294967295
 800a048:	3402      	adds	r4, #2
 800a04a:	9305      	str	r3, [sp, #20]
 800a04c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a118 <_svfiprintf_r+0x1fc>
 800a050:	7821      	ldrb	r1, [r4, #0]
 800a052:	2203      	movs	r2, #3
 800a054:	4650      	mov	r0, sl
 800a056:	f7f6 f8fb 	bl	8000250 <memchr>
 800a05a:	b140      	cbz	r0, 800a06e <_svfiprintf_r+0x152>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	eba0 000a 	sub.w	r0, r0, sl
 800a062:	fa03 f000 	lsl.w	r0, r3, r0
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	4303      	orrs	r3, r0
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4826      	ldr	r0, [pc, #152]	; (800a10c <_svfiprintf_r+0x1f0>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8e9 	bl	8000250 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d038      	beq.n	800a0f4 <_svfiprintf_r+0x1d8>
 800a082:	4b23      	ldr	r3, [pc, #140]	; (800a110 <_svfiprintf_r+0x1f4>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_svfiprintf_r+0x1b2>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	4433      	add	r3, r6
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	e767      	b.n	8009f6a <_svfiprintf_r+0x4e>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a5      	b.n	8009ff0 <_svfiprintf_r+0xd4>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	; 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_svfiprintf_r+0x1a8>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c5      	beq.n	800a04c <_svfiprintf_r+0x130>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c3      	b.n	800a04c <_svfiprintf_r+0x130>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_svfiprintf_r+0x194>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <_svfiprintf_r+0x1f8>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f3af 8000 	nop.w
 800a0de:	1c42      	adds	r2, r0, #1
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	d1d6      	bne.n	800a092 <_svfiprintf_r+0x176>
 800a0e4:	89ab      	ldrh	r3, [r5, #12]
 800a0e6:	065b      	lsls	r3, r3, #25
 800a0e8:	f53f af2c 	bmi.w	8009f44 <_svfiprintf_r+0x28>
 800a0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ee:	b01d      	add	sp, #116	; 0x74
 800a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4b06      	ldr	r3, [pc, #24]	; (800a114 <_svfiprintf_r+0x1f8>)
 800a0fc:	a904      	add	r1, sp, #16
 800a0fe:	4638      	mov	r0, r7
 800a100:	f000 f9d4 	bl	800a4ac <_printf_i>
 800a104:	e7eb      	b.n	800a0de <_svfiprintf_r+0x1c2>
 800a106:	bf00      	nop
 800a108:	0800b0e8 	.word	0x0800b0e8
 800a10c:	0800b0f2 	.word	0x0800b0f2
 800a110:	00000000 	.word	0x00000000
 800a114:	08009e65 	.word	0x08009e65
 800a118:	0800b0ee 	.word	0x0800b0ee

0800a11c <__sfputc_r>:
 800a11c:	6893      	ldr	r3, [r2, #8]
 800a11e:	3b01      	subs	r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	b410      	push	{r4}
 800a124:	6093      	str	r3, [r2, #8]
 800a126:	da08      	bge.n	800a13a <__sfputc_r+0x1e>
 800a128:	6994      	ldr	r4, [r2, #24]
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	db01      	blt.n	800a132 <__sfputc_r+0x16>
 800a12e:	290a      	cmp	r1, #10
 800a130:	d103      	bne.n	800a13a <__sfputc_r+0x1e>
 800a132:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a136:	f7ff bb0d 	b.w	8009754 <__swbuf_r>
 800a13a:	6813      	ldr	r3, [r2, #0]
 800a13c:	1c58      	adds	r0, r3, #1
 800a13e:	6010      	str	r0, [r2, #0]
 800a140:	7019      	strb	r1, [r3, #0]
 800a142:	4608      	mov	r0, r1
 800a144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <__sfputs_r>:
 800a14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14c:	4606      	mov	r6, r0
 800a14e:	460f      	mov	r7, r1
 800a150:	4614      	mov	r4, r2
 800a152:	18d5      	adds	r5, r2, r3
 800a154:	42ac      	cmp	r4, r5
 800a156:	d101      	bne.n	800a15c <__sfputs_r+0x12>
 800a158:	2000      	movs	r0, #0
 800a15a:	e007      	b.n	800a16c <__sfputs_r+0x22>
 800a15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a160:	463a      	mov	r2, r7
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff ffda 	bl	800a11c <__sfputc_r>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d1f3      	bne.n	800a154 <__sfputs_r+0xa>
 800a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a170 <_vfiprintf_r>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	460d      	mov	r5, r1
 800a176:	b09d      	sub	sp, #116	; 0x74
 800a178:	4614      	mov	r4, r2
 800a17a:	4698      	mov	r8, r3
 800a17c:	4606      	mov	r6, r0
 800a17e:	b118      	cbz	r0, 800a188 <_vfiprintf_r+0x18>
 800a180:	6983      	ldr	r3, [r0, #24]
 800a182:	b90b      	cbnz	r3, 800a188 <_vfiprintf_r+0x18>
 800a184:	f7ff fcc0 	bl	8009b08 <__sinit>
 800a188:	4b89      	ldr	r3, [pc, #548]	; (800a3b0 <_vfiprintf_r+0x240>)
 800a18a:	429d      	cmp	r5, r3
 800a18c:	d11b      	bne.n	800a1c6 <_vfiprintf_r+0x56>
 800a18e:	6875      	ldr	r5, [r6, #4]
 800a190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a192:	07d9      	lsls	r1, r3, #31
 800a194:	d405      	bmi.n	800a1a2 <_vfiprintf_r+0x32>
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	059a      	lsls	r2, r3, #22
 800a19a:	d402      	bmi.n	800a1a2 <_vfiprintf_r+0x32>
 800a19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a19e:	f7ff fd51 	bl	8009c44 <__retarget_lock_acquire_recursive>
 800a1a2:	89ab      	ldrh	r3, [r5, #12]
 800a1a4:	071b      	lsls	r3, r3, #28
 800a1a6:	d501      	bpl.n	800a1ac <_vfiprintf_r+0x3c>
 800a1a8:	692b      	ldr	r3, [r5, #16]
 800a1aa:	b9eb      	cbnz	r3, 800a1e8 <_vfiprintf_r+0x78>
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff fb22 	bl	80097f8 <__swsetup_r>
 800a1b4:	b1c0      	cbz	r0, 800a1e8 <_vfiprintf_r+0x78>
 800a1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1b8:	07dc      	lsls	r4, r3, #31
 800a1ba:	d50e      	bpl.n	800a1da <_vfiprintf_r+0x6a>
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	b01d      	add	sp, #116	; 0x74
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	4b7b      	ldr	r3, [pc, #492]	; (800a3b4 <_vfiprintf_r+0x244>)
 800a1c8:	429d      	cmp	r5, r3
 800a1ca:	d101      	bne.n	800a1d0 <_vfiprintf_r+0x60>
 800a1cc:	68b5      	ldr	r5, [r6, #8]
 800a1ce:	e7df      	b.n	800a190 <_vfiprintf_r+0x20>
 800a1d0:	4b79      	ldr	r3, [pc, #484]	; (800a3b8 <_vfiprintf_r+0x248>)
 800a1d2:	429d      	cmp	r5, r3
 800a1d4:	bf08      	it	eq
 800a1d6:	68f5      	ldreq	r5, [r6, #12]
 800a1d8:	e7da      	b.n	800a190 <_vfiprintf_r+0x20>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	0598      	lsls	r0, r3, #22
 800a1de:	d4ed      	bmi.n	800a1bc <_vfiprintf_r+0x4c>
 800a1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e2:	f7ff fd30 	bl	8009c46 <__retarget_lock_release_recursive>
 800a1e6:	e7e9      	b.n	800a1bc <_vfiprintf_r+0x4c>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f6:	2330      	movs	r3, #48	; 0x30
 800a1f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3bc <_vfiprintf_r+0x24c>
 800a1fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a200:	f04f 0901 	mov.w	r9, #1
 800a204:	4623      	mov	r3, r4
 800a206:	469a      	mov	sl, r3
 800a208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20c:	b10a      	cbz	r2, 800a212 <_vfiprintf_r+0xa2>
 800a20e:	2a25      	cmp	r2, #37	; 0x25
 800a210:	d1f9      	bne.n	800a206 <_vfiprintf_r+0x96>
 800a212:	ebba 0b04 	subs.w	fp, sl, r4
 800a216:	d00b      	beq.n	800a230 <_vfiprintf_r+0xc0>
 800a218:	465b      	mov	r3, fp
 800a21a:	4622      	mov	r2, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff ff93 	bl	800a14a <__sfputs_r>
 800a224:	3001      	adds	r0, #1
 800a226:	f000 80aa 	beq.w	800a37e <_vfiprintf_r+0x20e>
 800a22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a22c:	445a      	add	r2, fp
 800a22e:	9209      	str	r2, [sp, #36]	; 0x24
 800a230:	f89a 3000 	ldrb.w	r3, [sl]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80a2 	beq.w	800a37e <_vfiprintf_r+0x20e>
 800a23a:	2300      	movs	r3, #0
 800a23c:	f04f 32ff 	mov.w	r2, #4294967295
 800a240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a244:	f10a 0a01 	add.w	sl, sl, #1
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	9307      	str	r3, [sp, #28]
 800a24c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a250:	931a      	str	r3, [sp, #104]	; 0x68
 800a252:	4654      	mov	r4, sl
 800a254:	2205      	movs	r2, #5
 800a256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25a:	4858      	ldr	r0, [pc, #352]	; (800a3bc <_vfiprintf_r+0x24c>)
 800a25c:	f7f5 fff8 	bl	8000250 <memchr>
 800a260:	9a04      	ldr	r2, [sp, #16]
 800a262:	b9d8      	cbnz	r0, 800a29c <_vfiprintf_r+0x12c>
 800a264:	06d1      	lsls	r1, r2, #27
 800a266:	bf44      	itt	mi
 800a268:	2320      	movmi	r3, #32
 800a26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26e:	0713      	lsls	r3, r2, #28
 800a270:	bf44      	itt	mi
 800a272:	232b      	movmi	r3, #43	; 0x2b
 800a274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a278:	f89a 3000 	ldrb.w	r3, [sl]
 800a27c:	2b2a      	cmp	r3, #42	; 0x2a
 800a27e:	d015      	beq.n	800a2ac <_vfiprintf_r+0x13c>
 800a280:	9a07      	ldr	r2, [sp, #28]
 800a282:	4654      	mov	r4, sl
 800a284:	2000      	movs	r0, #0
 800a286:	f04f 0c0a 	mov.w	ip, #10
 800a28a:	4621      	mov	r1, r4
 800a28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a290:	3b30      	subs	r3, #48	; 0x30
 800a292:	2b09      	cmp	r3, #9
 800a294:	d94e      	bls.n	800a334 <_vfiprintf_r+0x1c4>
 800a296:	b1b0      	cbz	r0, 800a2c6 <_vfiprintf_r+0x156>
 800a298:	9207      	str	r2, [sp, #28]
 800a29a:	e014      	b.n	800a2c6 <_vfiprintf_r+0x156>
 800a29c:	eba0 0308 	sub.w	r3, r0, r8
 800a2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	9304      	str	r3, [sp, #16]
 800a2a8:	46a2      	mov	sl, r4
 800a2aa:	e7d2      	b.n	800a252 <_vfiprintf_r+0xe2>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	1d19      	adds	r1, r3, #4
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	9103      	str	r1, [sp, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfbb      	ittet	lt
 800a2b8:	425b      	neglt	r3, r3
 800a2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a2be:	9307      	strge	r3, [sp, #28]
 800a2c0:	9307      	strlt	r3, [sp, #28]
 800a2c2:	bfb8      	it	lt
 800a2c4:	9204      	strlt	r2, [sp, #16]
 800a2c6:	7823      	ldrb	r3, [r4, #0]
 800a2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ca:	d10c      	bne.n	800a2e6 <_vfiprintf_r+0x176>
 800a2cc:	7863      	ldrb	r3, [r4, #1]
 800a2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d0:	d135      	bne.n	800a33e <_vfiprintf_r+0x1ce>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	1d1a      	adds	r2, r3, #4
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	9203      	str	r2, [sp, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfb8      	it	lt
 800a2de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e2:	3402      	adds	r4, #2
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3cc <_vfiprintf_r+0x25c>
 800a2ea:	7821      	ldrb	r1, [r4, #0]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	f7f5 ffae 	bl	8000250 <memchr>
 800a2f4:	b140      	cbz	r0, 800a308 <_vfiprintf_r+0x198>
 800a2f6:	2340      	movs	r3, #64	; 0x40
 800a2f8:	eba0 000a 	sub.w	r0, r0, sl
 800a2fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	4303      	orrs	r3, r0
 800a304:	3401      	adds	r4, #1
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30c:	482c      	ldr	r0, [pc, #176]	; (800a3c0 <_vfiprintf_r+0x250>)
 800a30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a312:	2206      	movs	r2, #6
 800a314:	f7f5 ff9c 	bl	8000250 <memchr>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d03f      	beq.n	800a39c <_vfiprintf_r+0x22c>
 800a31c:	4b29      	ldr	r3, [pc, #164]	; (800a3c4 <_vfiprintf_r+0x254>)
 800a31e:	bb1b      	cbnz	r3, 800a368 <_vfiprintf_r+0x1f8>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	3307      	adds	r3, #7
 800a324:	f023 0307 	bic.w	r3, r3, #7
 800a328:	3308      	adds	r3, #8
 800a32a:	9303      	str	r3, [sp, #12]
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	443b      	add	r3, r7
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	e767      	b.n	800a204 <_vfiprintf_r+0x94>
 800a334:	fb0c 3202 	mla	r2, ip, r2, r3
 800a338:	460c      	mov	r4, r1
 800a33a:	2001      	movs	r0, #1
 800a33c:	e7a5      	b.n	800a28a <_vfiprintf_r+0x11a>
 800a33e:	2300      	movs	r3, #0
 800a340:	3401      	adds	r4, #1
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	4619      	mov	r1, r3
 800a346:	f04f 0c0a 	mov.w	ip, #10
 800a34a:	4620      	mov	r0, r4
 800a34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a350:	3a30      	subs	r2, #48	; 0x30
 800a352:	2a09      	cmp	r2, #9
 800a354:	d903      	bls.n	800a35e <_vfiprintf_r+0x1ee>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0c5      	beq.n	800a2e6 <_vfiprintf_r+0x176>
 800a35a:	9105      	str	r1, [sp, #20]
 800a35c:	e7c3      	b.n	800a2e6 <_vfiprintf_r+0x176>
 800a35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a362:	4604      	mov	r4, r0
 800a364:	2301      	movs	r3, #1
 800a366:	e7f0      	b.n	800a34a <_vfiprintf_r+0x1da>
 800a368:	ab03      	add	r3, sp, #12
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	462a      	mov	r2, r5
 800a36e:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <_vfiprintf_r+0x258>)
 800a370:	a904      	add	r1, sp, #16
 800a372:	4630      	mov	r0, r6
 800a374:	f3af 8000 	nop.w
 800a378:	4607      	mov	r7, r0
 800a37a:	1c78      	adds	r0, r7, #1
 800a37c:	d1d6      	bne.n	800a32c <_vfiprintf_r+0x1bc>
 800a37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a380:	07d9      	lsls	r1, r3, #31
 800a382:	d405      	bmi.n	800a390 <_vfiprintf_r+0x220>
 800a384:	89ab      	ldrh	r3, [r5, #12]
 800a386:	059a      	lsls	r2, r3, #22
 800a388:	d402      	bmi.n	800a390 <_vfiprintf_r+0x220>
 800a38a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a38c:	f7ff fc5b 	bl	8009c46 <__retarget_lock_release_recursive>
 800a390:	89ab      	ldrh	r3, [r5, #12]
 800a392:	065b      	lsls	r3, r3, #25
 800a394:	f53f af12 	bmi.w	800a1bc <_vfiprintf_r+0x4c>
 800a398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a39a:	e711      	b.n	800a1c0 <_vfiprintf_r+0x50>
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	462a      	mov	r2, r5
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <_vfiprintf_r+0x258>)
 800a3a4:	a904      	add	r1, sp, #16
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f000 f880 	bl	800a4ac <_printf_i>
 800a3ac:	e7e4      	b.n	800a378 <_vfiprintf_r+0x208>
 800a3ae:	bf00      	nop
 800a3b0:	0800b0a8 	.word	0x0800b0a8
 800a3b4:	0800b0c8 	.word	0x0800b0c8
 800a3b8:	0800b088 	.word	0x0800b088
 800a3bc:	0800b0e8 	.word	0x0800b0e8
 800a3c0:	0800b0f2 	.word	0x0800b0f2
 800a3c4:	00000000 	.word	0x00000000
 800a3c8:	0800a14b 	.word	0x0800a14b
 800a3cc:	0800b0ee 	.word	0x0800b0ee

0800a3d0 <_printf_common>:
 800a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	4616      	mov	r6, r2
 800a3d6:	4699      	mov	r9, r3
 800a3d8:	688a      	ldr	r2, [r1, #8]
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bfb8      	it	lt
 800a3e4:	4613      	movlt	r3, r2
 800a3e6:	6033      	str	r3, [r6, #0]
 800a3e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	b10a      	cbz	r2, 800a3f6 <_printf_common+0x26>
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	6033      	str	r3, [r6, #0]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	0699      	lsls	r1, r3, #26
 800a3fa:	bf42      	ittt	mi
 800a3fc:	6833      	ldrmi	r3, [r6, #0]
 800a3fe:	3302      	addmi	r3, #2
 800a400:	6033      	strmi	r3, [r6, #0]
 800a402:	6825      	ldr	r5, [r4, #0]
 800a404:	f015 0506 	ands.w	r5, r5, #6
 800a408:	d106      	bne.n	800a418 <_printf_common+0x48>
 800a40a:	f104 0a19 	add.w	sl, r4, #25
 800a40e:	68e3      	ldr	r3, [r4, #12]
 800a410:	6832      	ldr	r2, [r6, #0]
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	42ab      	cmp	r3, r5
 800a416:	dc26      	bgt.n	800a466 <_printf_common+0x96>
 800a418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a41c:	1e13      	subs	r3, r2, #0
 800a41e:	6822      	ldr	r2, [r4, #0]
 800a420:	bf18      	it	ne
 800a422:	2301      	movne	r3, #1
 800a424:	0692      	lsls	r2, r2, #26
 800a426:	d42b      	bmi.n	800a480 <_printf_common+0xb0>
 800a428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a42c:	4649      	mov	r1, r9
 800a42e:	4638      	mov	r0, r7
 800a430:	47c0      	blx	r8
 800a432:	3001      	adds	r0, #1
 800a434:	d01e      	beq.n	800a474 <_printf_common+0xa4>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	68e5      	ldr	r5, [r4, #12]
 800a43a:	6832      	ldr	r2, [r6, #0]
 800a43c:	f003 0306 	and.w	r3, r3, #6
 800a440:	2b04      	cmp	r3, #4
 800a442:	bf08      	it	eq
 800a444:	1aad      	subeq	r5, r5, r2
 800a446:	68a3      	ldr	r3, [r4, #8]
 800a448:	6922      	ldr	r2, [r4, #16]
 800a44a:	bf0c      	ite	eq
 800a44c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a450:	2500      	movne	r5, #0
 800a452:	4293      	cmp	r3, r2
 800a454:	bfc4      	itt	gt
 800a456:	1a9b      	subgt	r3, r3, r2
 800a458:	18ed      	addgt	r5, r5, r3
 800a45a:	2600      	movs	r6, #0
 800a45c:	341a      	adds	r4, #26
 800a45e:	42b5      	cmp	r5, r6
 800a460:	d11a      	bne.n	800a498 <_printf_common+0xc8>
 800a462:	2000      	movs	r0, #0
 800a464:	e008      	b.n	800a478 <_printf_common+0xa8>
 800a466:	2301      	movs	r3, #1
 800a468:	4652      	mov	r2, sl
 800a46a:	4649      	mov	r1, r9
 800a46c:	4638      	mov	r0, r7
 800a46e:	47c0      	blx	r8
 800a470:	3001      	adds	r0, #1
 800a472:	d103      	bne.n	800a47c <_printf_common+0xac>
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47c:	3501      	adds	r5, #1
 800a47e:	e7c6      	b.n	800a40e <_printf_common+0x3e>
 800a480:	18e1      	adds	r1, r4, r3
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	2030      	movs	r0, #48	; 0x30
 800a486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a48a:	4422      	add	r2, r4
 800a48c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a494:	3302      	adds	r3, #2
 800a496:	e7c7      	b.n	800a428 <_printf_common+0x58>
 800a498:	2301      	movs	r3, #1
 800a49a:	4622      	mov	r2, r4
 800a49c:	4649      	mov	r1, r9
 800a49e:	4638      	mov	r0, r7
 800a4a0:	47c0      	blx	r8
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	d0e6      	beq.n	800a474 <_printf_common+0xa4>
 800a4a6:	3601      	adds	r6, #1
 800a4a8:	e7d9      	b.n	800a45e <_printf_common+0x8e>
	...

0800a4ac <_printf_i>:
 800a4ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	4691      	mov	r9, r2
 800a4b4:	7e27      	ldrb	r7, [r4, #24]
 800a4b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4b8:	2f78      	cmp	r7, #120	; 0x78
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	469a      	mov	sl, r3
 800a4be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4c2:	d807      	bhi.n	800a4d4 <_printf_i+0x28>
 800a4c4:	2f62      	cmp	r7, #98	; 0x62
 800a4c6:	d80a      	bhi.n	800a4de <_printf_i+0x32>
 800a4c8:	2f00      	cmp	r7, #0
 800a4ca:	f000 80d8 	beq.w	800a67e <_printf_i+0x1d2>
 800a4ce:	2f58      	cmp	r7, #88	; 0x58
 800a4d0:	f000 80a3 	beq.w	800a61a <_printf_i+0x16e>
 800a4d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4dc:	e03a      	b.n	800a554 <_printf_i+0xa8>
 800a4de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4e2:	2b15      	cmp	r3, #21
 800a4e4:	d8f6      	bhi.n	800a4d4 <_printf_i+0x28>
 800a4e6:	a001      	add	r0, pc, #4	; (adr r0, 800a4ec <_printf_i+0x40>)
 800a4e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a4ec:	0800a545 	.word	0x0800a545
 800a4f0:	0800a559 	.word	0x0800a559
 800a4f4:	0800a4d5 	.word	0x0800a4d5
 800a4f8:	0800a4d5 	.word	0x0800a4d5
 800a4fc:	0800a4d5 	.word	0x0800a4d5
 800a500:	0800a4d5 	.word	0x0800a4d5
 800a504:	0800a559 	.word	0x0800a559
 800a508:	0800a4d5 	.word	0x0800a4d5
 800a50c:	0800a4d5 	.word	0x0800a4d5
 800a510:	0800a4d5 	.word	0x0800a4d5
 800a514:	0800a4d5 	.word	0x0800a4d5
 800a518:	0800a665 	.word	0x0800a665
 800a51c:	0800a589 	.word	0x0800a589
 800a520:	0800a647 	.word	0x0800a647
 800a524:	0800a4d5 	.word	0x0800a4d5
 800a528:	0800a4d5 	.word	0x0800a4d5
 800a52c:	0800a687 	.word	0x0800a687
 800a530:	0800a4d5 	.word	0x0800a4d5
 800a534:	0800a589 	.word	0x0800a589
 800a538:	0800a4d5 	.word	0x0800a4d5
 800a53c:	0800a4d5 	.word	0x0800a4d5
 800a540:	0800a64f 	.word	0x0800a64f
 800a544:	680b      	ldr	r3, [r1, #0]
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	600a      	str	r2, [r1, #0]
 800a54c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a554:	2301      	movs	r3, #1
 800a556:	e0a3      	b.n	800a6a0 <_printf_i+0x1f4>
 800a558:	6825      	ldr	r5, [r4, #0]
 800a55a:	6808      	ldr	r0, [r1, #0]
 800a55c:	062e      	lsls	r6, r5, #24
 800a55e:	f100 0304 	add.w	r3, r0, #4
 800a562:	d50a      	bpl.n	800a57a <_printf_i+0xce>
 800a564:	6805      	ldr	r5, [r0, #0]
 800a566:	600b      	str	r3, [r1, #0]
 800a568:	2d00      	cmp	r5, #0
 800a56a:	da03      	bge.n	800a574 <_printf_i+0xc8>
 800a56c:	232d      	movs	r3, #45	; 0x2d
 800a56e:	426d      	negs	r5, r5
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a574:	485e      	ldr	r0, [pc, #376]	; (800a6f0 <_printf_i+0x244>)
 800a576:	230a      	movs	r3, #10
 800a578:	e019      	b.n	800a5ae <_printf_i+0x102>
 800a57a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a57e:	6805      	ldr	r5, [r0, #0]
 800a580:	600b      	str	r3, [r1, #0]
 800a582:	bf18      	it	ne
 800a584:	b22d      	sxthne	r5, r5
 800a586:	e7ef      	b.n	800a568 <_printf_i+0xbc>
 800a588:	680b      	ldr	r3, [r1, #0]
 800a58a:	6825      	ldr	r5, [r4, #0]
 800a58c:	1d18      	adds	r0, r3, #4
 800a58e:	6008      	str	r0, [r1, #0]
 800a590:	0628      	lsls	r0, r5, #24
 800a592:	d501      	bpl.n	800a598 <_printf_i+0xec>
 800a594:	681d      	ldr	r5, [r3, #0]
 800a596:	e002      	b.n	800a59e <_printf_i+0xf2>
 800a598:	0669      	lsls	r1, r5, #25
 800a59a:	d5fb      	bpl.n	800a594 <_printf_i+0xe8>
 800a59c:	881d      	ldrh	r5, [r3, #0]
 800a59e:	4854      	ldr	r0, [pc, #336]	; (800a6f0 <_printf_i+0x244>)
 800a5a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2308      	moveq	r3, #8
 800a5a6:	230a      	movne	r3, #10
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5ae:	6866      	ldr	r6, [r4, #4]
 800a5b0:	60a6      	str	r6, [r4, #8]
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	bfa2      	ittt	ge
 800a5b6:	6821      	ldrge	r1, [r4, #0]
 800a5b8:	f021 0104 	bicge.w	r1, r1, #4
 800a5bc:	6021      	strge	r1, [r4, #0]
 800a5be:	b90d      	cbnz	r5, 800a5c4 <_printf_i+0x118>
 800a5c0:	2e00      	cmp	r6, #0
 800a5c2:	d04d      	beq.n	800a660 <_printf_i+0x1b4>
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a5ce:	5dc7      	ldrb	r7, [r0, r7]
 800a5d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5d4:	462f      	mov	r7, r5
 800a5d6:	42bb      	cmp	r3, r7
 800a5d8:	460d      	mov	r5, r1
 800a5da:	d9f4      	bls.n	800a5c6 <_printf_i+0x11a>
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d10b      	bne.n	800a5f8 <_printf_i+0x14c>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	07df      	lsls	r7, r3, #31
 800a5e4:	d508      	bpl.n	800a5f8 <_printf_i+0x14c>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	6861      	ldr	r1, [r4, #4]
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	bfde      	ittt	le
 800a5ee:	2330      	movle	r3, #48	; 0x30
 800a5f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5f8:	1b92      	subs	r2, r2, r6
 800a5fa:	6122      	str	r2, [r4, #16]
 800a5fc:	f8cd a000 	str.w	sl, [sp]
 800a600:	464b      	mov	r3, r9
 800a602:	aa03      	add	r2, sp, #12
 800a604:	4621      	mov	r1, r4
 800a606:	4640      	mov	r0, r8
 800a608:	f7ff fee2 	bl	800a3d0 <_printf_common>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d14c      	bne.n	800a6aa <_printf_i+0x1fe>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	b004      	add	sp, #16
 800a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61a:	4835      	ldr	r0, [pc, #212]	; (800a6f0 <_printf_i+0x244>)
 800a61c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	680e      	ldr	r6, [r1, #0]
 800a624:	061f      	lsls	r7, r3, #24
 800a626:	f856 5b04 	ldr.w	r5, [r6], #4
 800a62a:	600e      	str	r6, [r1, #0]
 800a62c:	d514      	bpl.n	800a658 <_printf_i+0x1ac>
 800a62e:	07d9      	lsls	r1, r3, #31
 800a630:	bf44      	itt	mi
 800a632:	f043 0320 	orrmi.w	r3, r3, #32
 800a636:	6023      	strmi	r3, [r4, #0]
 800a638:	b91d      	cbnz	r5, 800a642 <_printf_i+0x196>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	f023 0320 	bic.w	r3, r3, #32
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	2310      	movs	r3, #16
 800a644:	e7b0      	b.n	800a5a8 <_printf_i+0xfc>
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	f043 0320 	orr.w	r3, r3, #32
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	2378      	movs	r3, #120	; 0x78
 800a650:	4828      	ldr	r0, [pc, #160]	; (800a6f4 <_printf_i+0x248>)
 800a652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a656:	e7e3      	b.n	800a620 <_printf_i+0x174>
 800a658:	065e      	lsls	r6, r3, #25
 800a65a:	bf48      	it	mi
 800a65c:	b2ad      	uxthmi	r5, r5
 800a65e:	e7e6      	b.n	800a62e <_printf_i+0x182>
 800a660:	4616      	mov	r6, r2
 800a662:	e7bb      	b.n	800a5dc <_printf_i+0x130>
 800a664:	680b      	ldr	r3, [r1, #0]
 800a666:	6826      	ldr	r6, [r4, #0]
 800a668:	6960      	ldr	r0, [r4, #20]
 800a66a:	1d1d      	adds	r5, r3, #4
 800a66c:	600d      	str	r5, [r1, #0]
 800a66e:	0635      	lsls	r5, r6, #24
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	d501      	bpl.n	800a678 <_printf_i+0x1cc>
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	e002      	b.n	800a67e <_printf_i+0x1d2>
 800a678:	0671      	lsls	r1, r6, #25
 800a67a:	d5fb      	bpl.n	800a674 <_printf_i+0x1c8>
 800a67c:	8018      	strh	r0, [r3, #0]
 800a67e:	2300      	movs	r3, #0
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	4616      	mov	r6, r2
 800a684:	e7ba      	b.n	800a5fc <_printf_i+0x150>
 800a686:	680b      	ldr	r3, [r1, #0]
 800a688:	1d1a      	adds	r2, r3, #4
 800a68a:	600a      	str	r2, [r1, #0]
 800a68c:	681e      	ldr	r6, [r3, #0]
 800a68e:	6862      	ldr	r2, [r4, #4]
 800a690:	2100      	movs	r1, #0
 800a692:	4630      	mov	r0, r6
 800a694:	f7f5 fddc 	bl	8000250 <memchr>
 800a698:	b108      	cbz	r0, 800a69e <_printf_i+0x1f2>
 800a69a:	1b80      	subs	r0, r0, r6
 800a69c:	6060      	str	r0, [r4, #4]
 800a69e:	6863      	ldr	r3, [r4, #4]
 800a6a0:	6123      	str	r3, [r4, #16]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6a8:	e7a8      	b.n	800a5fc <_printf_i+0x150>
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	47d0      	blx	sl
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d0ab      	beq.n	800a610 <_printf_i+0x164>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	079b      	lsls	r3, r3, #30
 800a6bc:	d413      	bmi.n	800a6e6 <_printf_i+0x23a>
 800a6be:	68e0      	ldr	r0, [r4, #12]
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	4298      	cmp	r0, r3
 800a6c4:	bfb8      	it	lt
 800a6c6:	4618      	movlt	r0, r3
 800a6c8:	e7a4      	b.n	800a614 <_printf_i+0x168>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	47d0      	blx	sl
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d09b      	beq.n	800a610 <_printf_i+0x164>
 800a6d8:	3501      	adds	r5, #1
 800a6da:	68e3      	ldr	r3, [r4, #12]
 800a6dc:	9903      	ldr	r1, [sp, #12]
 800a6de:	1a5b      	subs	r3, r3, r1
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	dcf2      	bgt.n	800a6ca <_printf_i+0x21e>
 800a6e4:	e7eb      	b.n	800a6be <_printf_i+0x212>
 800a6e6:	2500      	movs	r5, #0
 800a6e8:	f104 0619 	add.w	r6, r4, #25
 800a6ec:	e7f5      	b.n	800a6da <_printf_i+0x22e>
 800a6ee:	bf00      	nop
 800a6f0:	0800b0f9 	.word	0x0800b0f9
 800a6f4:	0800b10a 	.word	0x0800b10a

0800a6f8 <_sbrk_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d06      	ldr	r5, [pc, #24]	; (800a714 <_sbrk_r+0x1c>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	602b      	str	r3, [r5, #0]
 800a704:	f7f6 ff80 	bl	8001608 <_sbrk>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_sbrk_r+0x1a>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_sbrk_r+0x1a>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20001934 	.word	0x20001934

0800a718 <__sread>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	f000 f8e0 	bl	800a8e4 <_read_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	bfab      	itete	ge
 800a728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a72a:	89a3      	ldrhlt	r3, [r4, #12]
 800a72c:	181b      	addge	r3, r3, r0
 800a72e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a732:	bfac      	ite	ge
 800a734:	6563      	strge	r3, [r4, #84]	; 0x54
 800a736:	81a3      	strhlt	r3, [r4, #12]
 800a738:	bd10      	pop	{r4, pc}

0800a73a <__swrite>:
 800a73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73e:	461f      	mov	r7, r3
 800a740:	898b      	ldrh	r3, [r1, #12]
 800a742:	05db      	lsls	r3, r3, #23
 800a744:	4605      	mov	r5, r0
 800a746:	460c      	mov	r4, r1
 800a748:	4616      	mov	r6, r2
 800a74a:	d505      	bpl.n	800a758 <__swrite+0x1e>
 800a74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a750:	2302      	movs	r3, #2
 800a752:	2200      	movs	r2, #0
 800a754:	f000 f868 	bl	800a828 <_lseek_r>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a75e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	4632      	mov	r2, r6
 800a766:	463b      	mov	r3, r7
 800a768:	4628      	mov	r0, r5
 800a76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	f000 b817 	b.w	800a7a0 <_write_r>

0800a772 <__sseek>:
 800a772:	b510      	push	{r4, lr}
 800a774:	460c      	mov	r4, r1
 800a776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77a:	f000 f855 	bl	800a828 <_lseek_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	bf15      	itete	ne
 800a784:	6560      	strne	r0, [r4, #84]	; 0x54
 800a786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a78a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a78e:	81a3      	strheq	r3, [r4, #12]
 800a790:	bf18      	it	ne
 800a792:	81a3      	strhne	r3, [r4, #12]
 800a794:	bd10      	pop	{r4, pc}

0800a796 <__sclose>:
 800a796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79a:	f000 b813 	b.w	800a7c4 <_close_r>
	...

0800a7a0 <_write_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_write_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f7 fb1a 	bl	8001de8 <_write>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_write_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_write_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20001934 	.word	0x20001934

0800a7c4 <_close_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_close_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f6 fee5 	bl	800159e <_close>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_close_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_close_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20001934 	.word	0x20001934

0800a7e4 <_fstat_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_fstat_r+0x20>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	f7f6 fee0 	bl	80015b6 <_fstat>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d102      	bne.n	800a800 <_fstat_r+0x1c>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	b103      	cbz	r3, 800a800 <_fstat_r+0x1c>
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	bf00      	nop
 800a804:	20001934 	.word	0x20001934

0800a808 <_isatty_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d06      	ldr	r5, [pc, #24]	; (800a824 <_isatty_r+0x1c>)
 800a80c:	2300      	movs	r3, #0
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f6 fedf 	bl	80015d6 <_isatty>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_isatty_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_isatty_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20001934 	.word	0x20001934

0800a828 <_lseek_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d07      	ldr	r5, [pc, #28]	; (800a848 <_lseek_r+0x20>)
 800a82c:	4604      	mov	r4, r0
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	2200      	movs	r2, #0
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f7f6 fed8 	bl	80015ec <_lseek>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_lseek_r+0x1e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_lseek_r+0x1e>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20001934 	.word	0x20001934

0800a84c <memmove>:
 800a84c:	4288      	cmp	r0, r1
 800a84e:	b510      	push	{r4, lr}
 800a850:	eb01 0402 	add.w	r4, r1, r2
 800a854:	d902      	bls.n	800a85c <memmove+0x10>
 800a856:	4284      	cmp	r4, r0
 800a858:	4623      	mov	r3, r4
 800a85a:	d807      	bhi.n	800a86c <memmove+0x20>
 800a85c:	1e43      	subs	r3, r0, #1
 800a85e:	42a1      	cmp	r1, r4
 800a860:	d008      	beq.n	800a874 <memmove+0x28>
 800a862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a86a:	e7f8      	b.n	800a85e <memmove+0x12>
 800a86c:	4402      	add	r2, r0
 800a86e:	4601      	mov	r1, r0
 800a870:	428a      	cmp	r2, r1
 800a872:	d100      	bne.n	800a876 <memmove+0x2a>
 800a874:	bd10      	pop	{r4, pc}
 800a876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a87e:	e7f7      	b.n	800a870 <memmove+0x24>

0800a880 <__malloc_lock>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__malloc_lock+0x8>)
 800a882:	f7ff b9df 	b.w	8009c44 <__retarget_lock_acquire_recursive>
 800a886:	bf00      	nop
 800a888:	2000192c 	.word	0x2000192c

0800a88c <__malloc_unlock>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__malloc_unlock+0x8>)
 800a88e:	f7ff b9da 	b.w	8009c46 <__retarget_lock_release_recursive>
 800a892:	bf00      	nop
 800a894:	2000192c 	.word	0x2000192c

0800a898 <_realloc_r>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	4607      	mov	r7, r0
 800a89c:	4614      	mov	r4, r2
 800a89e:	460e      	mov	r6, r1
 800a8a0:	b921      	cbnz	r1, 800a8ac <_realloc_r+0x14>
 800a8a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	f7ff ba82 	b.w	8009db0 <_malloc_r>
 800a8ac:	b922      	cbnz	r2, 800a8b8 <_realloc_r+0x20>
 800a8ae:	f7ff fa2f 	bl	8009d10 <_free_r>
 800a8b2:	4625      	mov	r5, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	f000 f826 	bl	800a908 <_malloc_usable_size_r>
 800a8bc:	42a0      	cmp	r0, r4
 800a8be:	d20f      	bcs.n	800a8e0 <_realloc_r+0x48>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff fa74 	bl	8009db0 <_malloc_r>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0f2      	beq.n	800a8b4 <_realloc_r+0x1c>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	f7fe fe7b 	bl	80095cc <memcpy>
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7ff fa19 	bl	8009d10 <_free_r>
 800a8de:	e7e9      	b.n	800a8b4 <_realloc_r+0x1c>
 800a8e0:	4635      	mov	r5, r6
 800a8e2:	e7e7      	b.n	800a8b4 <_realloc_r+0x1c>

0800a8e4 <_read_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_read_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f6 fe36 	bl	8001564 <_read>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_read_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_read_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20001934 	.word	0x20001934

0800a908 <_malloc_usable_size_r>:
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f18      	subs	r0, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfbc      	itt	lt
 800a912:	580b      	ldrlt	r3, [r1, r0]
 800a914:	18c0      	addlt	r0, r0, r3
 800a916:	4770      	bx	lr

0800a918 <_init>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	bf00      	nop
 800a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91e:	bc08      	pop	{r3}
 800a920:	469e      	mov	lr, r3
 800a922:	4770      	bx	lr

0800a924 <_fini>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	bf00      	nop
 800a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92a:	bc08      	pop	{r3}
 800a92c:	469e      	mov	lr, r3
 800a92e:	4770      	bx	lr
