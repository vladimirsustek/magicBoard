
magicBoard_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097dc  080097dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e4  080097e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080097ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000070  0800985c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800985c  00020500  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ebc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab1  00000000  00000000  00044f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00049a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  0004b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e3b0  00000000  00000000  0004d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a48  00000000  00000000  0007b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113435  00000000  00000000  0009ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b2375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e48  00000000  00000000  001b23c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080096bc 	.word	0x080096bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080096bc 	.word	0x080096bc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ADC1_Init+0x98>)
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_ADC1_Init+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_ADC1_Init+0x98>)
 800063a:	f001 fbf5 	bl	8001e28 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 fdf2 	bl	800122c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000648:	230c      	movs	r3, #12
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_ADC1_Init+0x98>)
 800065a:	f001 fc29 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000664:	f000 fde2 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000a0 	.word	0x200000a0
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2c      	ldr	r2, [pc, #176]	; (800074c <HAL_ADC_MspInit+0xd0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d152      	bne.n	8000744 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <HAL_ADC_MspInit+0xd4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <HAL_ADC_MspInit+0xd8>)
 80006e2:	f002 ff9d 	bl	8003620 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <HAL_ADC_MspInit+0xe0>)
 80006ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000704:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800070c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000714:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800072a:	f001 ff93 	bl	8002654 <HAL_DMA_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000734:	f000 fd7a 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_MspInit+0xdc>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012000 	.word	0x40012000
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800
 8000758:	200000e8 	.word	0x200000e8
 800075c:	40026410 	.word	0x40026410

08000760 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_DAC_Init+0x4c>)
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <MX_DAC_Init+0x50>)
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_DAC_Init+0x4c>)
 8000776:	f001 fefc 	bl	8002572 <HAL_DAC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000780:	f000 fd54 	bl	800122c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_DAC_Init+0x4c>)
 8000794:	f001 ff0f 	bl	80025b6 <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800079e:	f000 fd45 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000148 	.word	0x20000148
 80007b0:	40007400 	.word	0x40007400

080007b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <HAL_DAC_MspInit+0x74>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d123      	bne.n	800081e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_DAC_MspInit+0x78>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080a:	2303      	movs	r3, #3
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_DAC_MspInit+0x7c>)
 800081a:	f002 ff01 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40007400 	.word	0x40007400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_DMA_Init+0x60>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_DMA_Init+0x60>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_DMA_Init+0x60>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_DMA_Init+0x60>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_DMA_Init+0x60>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_DMA_Init+0x60>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	200e      	movs	r0, #14
 8000870:	f001 fe49 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000874:	200e      	movs	r0, #14
 8000876:	f001 fe62 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2038      	movs	r0, #56	; 0x38
 8000880:	f001 fe41 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000884:	2038      	movs	r0, #56	; 0x38
 8000886:	f001 fe5a 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ETH_Init+0x78>)
 800089e:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <MX_ETH_Init+0x7c>)
 80008a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_ETH_Init+0x78>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ETH_Init+0x78>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ETH_Init+0x78>)
 80008b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ETH_Init+0x78>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_ETH_Init+0x80>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ETH_Init+0x80>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_ETH_Init+0x80>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_ETH_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_ETH_Init+0x78>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_ETH_Init+0x80>)
 80008e6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_ETH_Init+0x78>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_ETH_Init+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_ETH_Init+0x78>)
 80008f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008fa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_ETH_Init+0x78>)
 80008fe:	f002 fa25 	bl	8002d4c <HAL_ETH_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000908:	f000 fc90 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000015c 	.word	0x2000015c
 8000914:	40028000 	.word	0x40028000
 8000918:	2000008c 	.word	0x2000008c

0800091c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <HAL_ETH_MspInit+0x158>)
 800093a:	4293      	cmp	r3, r2
 800093c:	f040 8096 	bne.w	8000a6c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a46      	ldr	r2, [pc, #280]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800095e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
 8000994:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a34      	ldr	r2, [pc, #208]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e8:	2332      	movs	r3, #50	; 0x32
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <HAL_ETH_MspInit+0x160>)
 8000a04:	f002 fe0c 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a08:	2386      	movs	r3, #134	; 0x86
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a18:	230b      	movs	r3, #11
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4817      	ldr	r0, [pc, #92]	; (8000a80 <HAL_ETH_MspInit+0x164>)
 8000a24:	f002 fdfc 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3a:	230b      	movs	r3, #11
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <HAL_ETH_MspInit+0x168>)
 8000a46:	f002 fdeb 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <HAL_ETH_MspInit+0x16c>)
 8000a68:	f002 fdda 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40028000 	.word	0x40028000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800

08000a8c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b9f      	ldr	r3, [pc, #636]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a9e      	ldr	r2, [pc, #632]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b9c      	ldr	r3, [pc, #624]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b99      	ldr	r3, [pc, #612]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a98      	ldr	r2, [pc, #608]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b96      	ldr	r3, [pc, #600]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b93      	ldr	r3, [pc, #588]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b90      	ldr	r3, [pc, #576]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a8c      	ldr	r2, [pc, #560]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b81      	ldr	r3, [pc, #516]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a80      	ldr	r2, [pc, #512]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b7e      	ldr	r3, [pc, #504]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a7a      	ldr	r2, [pc, #488]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	4b75      	ldr	r3, [pc, #468]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a74      	ldr	r2, [pc, #464]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <MX_GPIO_Init+0x294>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	486f      	ldr	r0, [pc, #444]	; (8000d24 <MX_GPIO_Init+0x298>)
 8000b68:	f002 ff1e 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_NCS2_Pin|SPI3_NCS1_Pin|NRF2_PWR_Pin|NRF1_PWR_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f240 3106 	movw	r1, #774	; 0x306
 8000b72:	486d      	ldr	r0, [pc, #436]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000b74:	f002 ff18 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7e:	486b      	ldr	r0, [pc, #428]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000b80:	f002 ff12 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP_RST_Pin|RDA_PWR_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f248 0101 	movw	r1, #32769	; 0x8001
 8000b8a:	4868      	ldr	r0, [pc, #416]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000b8c:	f002 ff0c 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b96:	4864      	ldr	r0, [pc, #400]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000b98:	f002 ff06 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_2, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f640 0104 	movw	r1, #2052	; 0x804
 8000ba2:	4863      	ldr	r0, [pc, #396]	; (8000d30 <MX_GPIO_Init+0x2a4>)
 8000ba4:	f002 ff00 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|EEPROM_CS_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	210c      	movs	r1, #12
 8000bac:	4861      	ldr	r0, [pc, #388]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000bae:	f002 fefb 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	485f      	ldr	r0, [pc, #380]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000bb8:	f002 fef6 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	485d      	ldr	r0, [pc, #372]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000bc2:	f002 fef1 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4856      	ldr	r0, [pc, #344]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000bde:	f002 fd1f 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF1_CE_Pin;
 8000be2:	2310      	movs	r3, #16
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF1_CE_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	484a      	ldr	r0, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x298>)
 8000bfa:	f002 fd11 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SPI3_NCS2_Pin|SPI3_NCS1_Pin|LD3_Pin|LD2_Pin
 8000bfe:	f244 3386 	movw	r3, #17286	; 0x4386
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
                          |NRF2_PWR_Pin|NRF1_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4844      	ldr	r0, [pc, #272]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000c18:	f002 fd02 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_IO0_Pin|ESP_IO2_Pin;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000c32:	f002 fcf5 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin|ESP_RST_Pin|RDA_PWR_Pin;
 8000c36:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4837      	ldr	r0, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x2a0>)
 8000c50:	f002 fce6 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF2_IRQ_Pin|NRF1_IRQ_Pin;
 8000c54:	f248 0340 	movw	r3, #32832	; 0x8040
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	482f      	ldr	r0, [pc, #188]	; (8000d28 <MX_GPIO_Init+0x29c>)
 8000c6a:	f002 fcd9 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_2;
 8000c6e:	f640 0304 	movw	r3, #2052	; 0x804
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <MX_GPIO_Init+0x2a4>)
 8000c88:	f002 fcca 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|EEPROM_CS_Pin|USB_PowerSwitchOn_Pin;
 8000c8c:	234c      	movs	r3, #76	; 0x4c
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000ca4:	f002 fcbc 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <MX_GPIO_Init+0x2a8>)
 8000cbc:	f002 fcb0 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF2_CE_Pin;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF2_CE_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x2ac>)
 8000cd8:	f002 fca2 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cdc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cee:	230a      	movs	r3, #10
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <MX_GPIO_Init+0x2b0>)
 8000cfa:	f002 fc91 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <MX_GPIO_Init+0x2b0>)
 8000d14:	f002 fc84 	bl	8003620 <HAL_GPIO_Init>

}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	; 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021400 	.word	0x40021400
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40021800 	.word	0x40021800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_I2C2_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_I2C2_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d7c:	f002 fe2e 	bl	80039dc <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 fa51 	bl	800122c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000d8e:	f002 feb5 	bl	8003afc <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 fa48 	bl	800122c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C2_Init+0x74>)
 8000da0:	f002 fef7 	bl	8003b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 fa3f 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001f0 	.word	0x200001f0
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	20303e5d 	.word	0x20303e5d

08000dc0 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C4_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C4_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dfc:	f002 fdee 	bl	80039dc <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 fa11 	bl	800122c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e0e:	f002 fe75 	bl	8003afc <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 fa08 	bl	800122c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e20:	f002 feb7 	bl	8003b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f9ff 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001a4 	.word	0x200001a4
 8000e38:	40006000 	.word	0x40006000
 8000e3c:	20303e5d 	.word	0x20303e5d

08000e40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0b0      	sub	sp, #192	; 0xc0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2290      	movs	r2, #144	; 0x90
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fa93 	bl	800838c <memset>
  if(i2cHandle->Instance==I2C2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13e      	bne.n	8000eee <HAL_I2C_MspInit+0xae>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e74:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fbe3 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e8c:	f000 f9ce 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ea8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482d      	ldr	r0, [pc, #180]	; (8000f84 <HAL_I2C_MspInit+0x144>)
 8000ed0:	f002 fba6 	bl	8003620 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000eec:	e042      	b.n	8000f74 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <HAL_I2C_MspInit+0x148>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d13d      	bne.n	8000f74 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fb9f 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8000f14:	f000 f98a 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <HAL_I2C_MspInit+0x14c>)
 8000f58:	f002 fb62 	bl	8003620 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	bf00      	nop
 8000f76:	37c0      	adds	r7, #192	; 0xc0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40006000 	.word	0x40006000
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0a4      	sub	sp, #144	; 0x90
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t nrf1_tx[33];
  uint8_t nrf1_rx[33] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f9e:	221d      	movs	r2, #29
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 f9f2 	bl	800838c <memset>
  uint8_t nrf2_tx[33];
  uint8_t nrf2_rx[33] = {0};
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	221d      	movs	r2, #29
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f007 f9ea 	bl	800838c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f000 feb5 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f8c4 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fd64 	bl	8000a8c <MX_GPIO_Init>
  MX_ETH_Init();
 8000fc4:	f7ff fc68 	bl	8000898 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fc8:	f000 fd56 	bl	8001a78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fcc:	f000 fe7a 	bl	8001cc4 <MX_USB_OTG_FS_USB_Init>
  MX_DAC_Init();
 8000fd0:	f7ff fbc6 	bl	8000760 <MX_DAC_Init>
  MX_SPI3_Init();
 8000fd4:	f000 f930 	bl	8001238 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fd8:	f000 fb38 	bl	800164c <MX_TIM3_Init>
  MX_DMA_Init();
 8000fdc:	f7ff fc2a 	bl	8000834 <MX_DMA_Init>
  MX_UART7_Init();
 8000fe0:	f000 fd1a 	bl	8001a18 <MX_UART7_Init>
  MX_TIM2_Init();
 8000fe4:	f000 fab0 	bl	8001548 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000fe8:	f7ff feaa 	bl	8000d40 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000fec:	f7ff fee8 	bl	8000dc0 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000ff0:	f7ff faf2 	bl	80005d8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000ff4:	f000 fbac 	bl	8001750 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  NRF_powerDown();
 8000ff8:	f006 fd05 	bl	8007a06 <NRF_powerDown>
  NRF_powerDown_B();
 8000ffc:	f006 ffac 	bl	8007f58 <NRF_powerDown_B>

  HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f000 feec 	bl	8001de0 <HAL_Delay>

  NRF_powerUp();
 8001008:	f006 fcf7 	bl	80079fa <NRF_powerUp>
  NRF_powerUp_B();
 800100c:	f006 ff9e 	bl	8007f4c <NRF_powerUp_B>

  HAL_Delay(500);
 8001010:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001014:	f000 fee4 	bl	8001de0 <HAL_Delay>

  printf("NRF1: 0x%02lx\n", NRF_powerCycle(HAL_Delay));
 8001018:	4845      	ldr	r0, [pc, #276]	; (8001130 <main+0x1a0>)
 800101a:	f006 fd56 	bl	8007aca <NRF_powerCycle>
 800101e:	4603      	mov	r3, r0
 8001020:	4619      	mov	r1, r3
 8001022:	4844      	ldr	r0, [pc, #272]	; (8001134 <main+0x1a4>)
 8001024:	f007 f9ba 	bl	800839c <iprintf>
  printf("NRF2: 0x%02lx\n", NRF_powerCycle_B(HAL_Delay));
 8001028:	4841      	ldr	r0, [pc, #260]	; (8001130 <main+0x1a0>)
 800102a:	f006 fff7 	bl	800801c <NRF_powerCycle_B>
 800102e:	4603      	mov	r3, r0
 8001030:	4619      	mov	r1, r3
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <main+0x1a8>)
 8001034:	f007 f9b2 	bl	800839c <iprintf>

  NRF_configure(true);
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fad1 	bl	80075e0 <NRF_configure>
  NRF_configure_B(false);
 800103e:	2000      	movs	r0, #0
 8001040:	f006 fd72 	bl	8007b28 <NRF_configure_B>

  while(1)
  {
	  sprintf((char*)nrf1_tx, "%032ld", HAL_GetTick());
 8001044:	f000 fec0 	bl	8001dc8 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800104e:	493b      	ldr	r1, [pc, #236]	; (800113c <main+0x1ac>)
 8001050:	4618      	mov	r0, r3
 8001052:	f007 fa31 	bl	80084b8 <siprintf>
	  sprintf((char*)nrf2_tx, "%032ld", 0x7FFFFFFF - HAL_GetTick());
 8001056:	f000 feb7 	bl	8001dc8 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001066:	461a      	mov	r2, r3
 8001068:	4934      	ldr	r1, [pc, #208]	; (800113c <main+0x1ac>)
 800106a:	f007 fa25 	bl	80084b8 <siprintf>

	  NRF_setW_TX_PAYLOAD(nrf1_tx, 32);
 800106e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001072:	2120      	movs	r1, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fc4d 	bl	8007914 <NRF_setW_TX_PAYLOAD>
	  NRF_set_W_ACK_PAYLOAD_B(0, nrf2_tx, 32);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2220      	movs	r2, #32
 8001080:	4619      	mov	r1, r3
 8001082:	2000      	movs	r0, #0
 8001084:	f006 ff14 	bl	8007eb0 <NRF_set_W_ACK_PAYLOAD_B>

	  NRF_CEactivate_B();
 8001088:	f006 ff54 	bl	8007f34 <NRF_CEactivate_B>
	  NRF_CEactivate();
 800108c:	f006 fca9 	bl	80079e2 <NRF_CEactivate>
	  HAL_Delay(5);
 8001090:	2005      	movs	r0, #5
 8001092:	f000 fea5 	bl	8001de0 <HAL_Delay>
	  NRF_CEdeactivate_B();
 8001096:	f006 ff53 	bl	8007f40 <NRF_CEdeactivate_B>
	  NRF_CEdeactivate();
 800109a:	f006 fca8 	bl	80079ee <NRF_CEdeactivate>

	  if(NRF_getIRQ())
 800109e:	f006 fc99 	bl	80079d4 <NRF_getIRQ>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <main+0x124>
	  {
		  printf("NRF1 IRQ\n");
 80010a8:	4825      	ldr	r0, [pc, #148]	; (8001140 <main+0x1b0>)
 80010aa:	f007 f9fd 	bl	80084a8 <puts>
		  HAL_Delay(50);
 80010ae:	2032      	movs	r0, #50	; 0x32
 80010b0:	f000 fe96 	bl	8001de0 <HAL_Delay>
	  }

	  if(NRF_getIRQ_B())
 80010b4:	f006 ff37 	bl	8007f26 <NRF_getIRQ_B>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <main+0x13a>
	  {
		  printf("NRF2 IRQ\n");
 80010be:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0x1b4>)
 80010c0:	f007 f9f2 	bl	80084a8 <puts>
		  HAL_Delay(50);
 80010c4:	2032      	movs	r0, #50	; 0x32
 80010c6:	f000 fe8b 	bl	8001de0 <HAL_Delay>
	  }

	  uint8_t lng1 = NRF_postProcess(0, nrf1_rx);
 80010ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ce:	4619      	mov	r1, r3
 80010d0:	2000      	movs	r0, #0
 80010d2:	f006 fc9e 	bl	8007a12 <NRF_postProcess>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  uint8_t lng2 = NRF_postProcess_B(0, nrf2_rx);
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f006 ff3f 	bl	8007f64 <NRF_postProcess_B>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e


	  if(lng1 && lng1 != (uint8_t)(-1))
 80010ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <main+0x17c>
 80010f4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d007      	beq.n	800110c <main+0x17c>
	  {
		  printf("%s\n", nrf1_rx);
 80010fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001100:	4618      	mov	r0, r3
 8001102:	f007 f9d1 	bl	80084a8 <puts>
		  HAL_Delay(50);
 8001106:	2032      	movs	r0, #50	; 0x32
 8001108:	f000 fe6a 	bl	8001de0 <HAL_Delay>
	  }
	  if(lng2 && lng2 != (uint8_t)(-1))
 800110c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <main+0x194>
 8001114:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d003      	beq.n	8001124 <main+0x194>
	  {
		  printf("%s\n", nrf2_rx);
 800111c:	463b      	mov	r3, r7
 800111e:	4618      	mov	r0, r3
 8001120:	f007 f9c2 	bl	80084a8 <puts>
	  }

	  HAL_Delay(500);
 8001124:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001128:	f000 fe5a 	bl	8001de0 <HAL_Delay>
  {
 800112c:	e78a      	b.n	8001044 <main+0xb4>
 800112e:	bf00      	nop
 8001130:	08001de1 	.word	0x08001de1
 8001134:	080096d4 	.word	0x080096d4
 8001138:	080096e4 	.word	0x080096e4
 800113c:	080096f4 	.word	0x080096f4
 8001140:	080096fc 	.word	0x080096fc
 8001144:	08009708 	.word	0x08009708

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2234      	movs	r2, #52	; 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f007 f918 	bl	800838c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800116c:	f002 fd5e 	bl	8003c2c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <SystemClock_Config+0xdc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <SystemClock_Config+0xdc>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <SystemClock_Config+0xdc>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <SystemClock_Config+0xe0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <SystemClock_Config+0xe0>)
 8001192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <SystemClock_Config+0xe0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	2302      	movs	r3, #2
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b8:	2304      	movs	r3, #4
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fd8b 	bl	8003cec <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011dc:	f000 f826 	bl	800122c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011e0:	f002 fd34 	bl	8003c4c <HAL_PWREx_EnableOverDrive>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011ea:	f000 f81f 	bl	800122c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2103      	movs	r1, #3
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f81c 	bl	8004248 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001216:	f000 f809 	bl	800122c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_SPI3_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_SPI3_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_SPI3_Init+0x74>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_SPI3_Init+0x74>)
 8001252:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001256:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_SPI3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_SPI3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI3_Init+0x74>)
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI3_Init+0x74>)
 800126e:	2210      	movs	r2, #16
 8001270:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI3_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI3_Init+0x74>)
 8001286:	2207      	movs	r2, #7
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI3_Init+0x74>)
 8001292:	2208      	movs	r2, #8
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_SPI3_Init+0x74>)
 8001298:	f003 fe00 	bl	8004e9c <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f7ff ffc3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000023c 	.word	0x2000023c
 80012b0:	40003c00 	.word	0x40003c00

080012b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_SPI_MspInit+0x7c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d128      	bne.n	8001328 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001306:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001318:	2306      	movs	r3, #6
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x84>)
 8001324:	f002 f97c 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40003c00 	.word	0x40003c00
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x44>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x44>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x44>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x44>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x44>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 fce6 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA1_Stream3_IRQHandler+0x10>)
 80013de:	f001 fa79 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000048c 	.word	0x2000048c

080013ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <DMA2_Stream0_IRQHandler+0x10>)
 80013f2:	f001 fa6f 	bl	80028d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000e8 	.word	0x200000e8

08001400 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <UART7_IRQHandler+0x10>)
 8001406:	f005 f92d 	bl	8006664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000384 	.word	0x20000384

08001414 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
	}

return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_close>:
	}
	return len;
}

int _close(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	605a      	str	r2, [r3, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f006 ff18 	bl	800831c <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20080000 	.word	0x20080000
 8001518:	00000400 	.word	0x00000400
 800151c:	20000094 	.word	0x20000094
 8001520:	20000500 	.word	0x20000500

08001524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <MX_TIM2_Init+0x100>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <MX_TIM2_Init+0x100>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <MX_TIM2_Init+0x100>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <MX_TIM2_Init+0x100>)
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_TIM2_Init+0x100>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_TIM2_Init+0x100>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a2:	4829      	ldr	r0, [pc, #164]	; (8001648 <MX_TIM2_Init+0x100>)
 80015a4:	f004 f8c0 	bl	8005728 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015ae:	f7ff fe3d 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015bc:	4619      	mov	r1, r3
 80015be:	4822      	ldr	r0, [pc, #136]	; (8001648 <MX_TIM2_Init+0x100>)
 80015c0:	f004 fa7e 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015ca:	f7ff fe2f 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <MX_TIM2_Init+0x100>)
 80015d0:	f004 f901 	bl	80057d6 <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015da:	f7ff fe27 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <MX_TIM2_Init+0x100>)
 80015ee:	f004 fec9 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015f8:	f7ff fe18 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_TIM2_Init+0x100>)
 8001614:	f004 f940 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800161e:	f7ff fe05 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM2_Init+0x100>)
 800162a:	f004 f935 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001634:	f7ff fdfa 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM2_Init+0x100>)
 800163a:	f000 f931 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000338 	.word	0x20000338

0800164c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MX_TIM3_Init+0xfc>)
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <MX_TIM3_Init+0x100>)
 8001682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <MX_TIM3_Init+0xfc>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MX_TIM3_Init+0xfc>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MX_TIM3_Init+0xfc>)
 8001692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <MX_TIM3_Init+0xfc>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_TIM3_Init+0xfc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a4:	4828      	ldr	r0, [pc, #160]	; (8001748 <MX_TIM3_Init+0xfc>)
 80016a6:	f004 f83f 	bl	8005728 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016b0:	f7ff fdbc 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	4619      	mov	r1, r3
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <MX_TIM3_Init+0xfc>)
 80016c2:	f004 f9fd 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016cc:	f7ff fdae 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d0:	481d      	ldr	r0, [pc, #116]	; (8001748 <MX_TIM3_Init+0xfc>)
 80016d2:	f004 f880 	bl	80057d6 <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016dc:	f7ff fda6 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4816      	ldr	r0, [pc, #88]	; (8001748 <MX_TIM3_Init+0xfc>)
 80016f0:	f004 fe48 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016fa:	f7ff fd97 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fe:	2360      	movs	r3, #96	; 0x60
 8001700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <MX_TIM3_Init+0xfc>)
 8001716:	f004 f8bf 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001720:	f7ff fd84 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001724:	463b      	mov	r3, r7
 8001726:	2204      	movs	r2, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <MX_TIM3_Init+0xfc>)
 800172c:	f004 f8b4 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001736:	f7ff fd79 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <MX_TIM3_Init+0xfc>)
 800173c:	f000 f8b0 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001740:	bf00      	nop
 8001742:	3738      	adds	r7, #56	; 0x38
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002a0 	.word	0x200002a0
 800174c:	40000400 	.word	0x40000400

08001750 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <MX_TIM9_Init+0xbc>)
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <MX_TIM9_Init+0xc0>)
 800177a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <MX_TIM9_Init+0xbc>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <MX_TIM9_Init+0xbc>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <MX_TIM9_Init+0xbc>)
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <MX_TIM9_Init+0xbc>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM9_Init+0xbc>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <MX_TIM9_Init+0xbc>)
 800179e:	f003 ffc3 	bl	8005728 <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f7ff fd40 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4619      	mov	r1, r3
 80017b8:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM9_Init+0xbc>)
 80017ba:	f004 f981 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80017c4:	f7ff fd32 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80017c8:	4810      	ldr	r0, [pc, #64]	; (800180c <MX_TIM9_Init+0xbc>)
 80017ca:	f004 f804 	bl	80057d6 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80017d4:	f7ff fd2a 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d8:	2360      	movs	r3, #96	; 0x60
 80017da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM9_Init+0xbc>)
 80017f0:	f004 f852 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80017fa:	f7ff fd17 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM9_Init+0xbc>)
 8001800:	f000 f84e 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200002ec 	.word	0x200002ec
 8001810:	40014000 	.word	0x40014000

08001814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800183e:	e022      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_TIM_Base_MspInit+0x88>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40000400 	.word	0x40000400
 800189c:	40014000 	.word	0x40014000

080018a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d139      	bne.n	8001936 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001904:	2301      	movs	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	483c      	ldr	r0, [pc, #240]	; (8001a00 <HAL_TIM_MspPostInit+0x160>)
 8001910:	f001 fe86 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001914:	2308      	movs	r3, #8
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001924:	2301      	movs	r3, #1
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4835      	ldr	r0, [pc, #212]	; (8001a04 <HAL_TIM_MspPostInit+0x164>)
 8001930:	f001 fe76 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001934:	e05e      	b.n	80019f4 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <HAL_TIM_MspPostInit+0x168>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d138      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001980:	2302      	movs	r3, #2
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4820      	ldr	r0, [pc, #128]	; (8001a0c <HAL_TIM_MspPostInit+0x16c>)
 800198c:	f001 fe48 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001990:	2310      	movs	r3, #16
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <HAL_TIM_MspPostInit+0x164>)
 80019ac:	f001 fe38 	bl	8003620 <HAL_GPIO_Init>
}
 80019b0:	e020      	b.n	80019f4 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM9)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_TIM_MspPostInit+0x170>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11b      	bne.n	80019f4 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_TIM_MspPostInit+0x15c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d4:	2320      	movs	r3, #32
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_TIM_MspPostInit+0x174>)
 80019f0:	f001 fe16 	bl	8003620 <HAL_GPIO_Init>
}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40014000 	.word	0x40014000
 8001a14:	40021000 	.word	0x40021000

08001a18 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_UART7_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_UART7_Init+0x58>)
 8001a5c:	f004 fd20 	bl	80064a0 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a66:	f7ff fbe1 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000384 	.word	0x20000384
 8001a74:	40007800 	.word	0x40007800

08001a78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <MX_USART3_UART_Init+0x5c>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART3_UART_Init+0x58>)
 8001abc:	f004 fcf0 	bl	80064a0 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ac6:	f7ff fbb1 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000408 	.word	0x20000408
 8001ad4:	40004800 	.word	0x40004800

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0b0      	sub	sp, #192	; 0xc0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2290      	movs	r2, #144	; 0x90
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fc47 	bl	800838c <memset>
  if(uartHandle->Instance==UART7)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <HAL_UART_MspInit+0x1a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d173      	bne.n	8001bf0 <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fd98 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b22:	f7ff fb83 	bl	800122c <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b26:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001b70:	2308      	movs	r3, #8
 8001b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4841      	ldr	r0, [pc, #260]	; (8001c84 <HAL_UART_MspInit+0x1ac>)
 8001b7e:	f001 fd4f 	bl	8003620 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_UART_MspInit+0x1b4>)
 8001b86:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001b8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001bc2:	4831      	ldr	r0, [pc, #196]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bc4:	f000 fd46 	bl	8002654 <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001bce:	f7ff fb2d 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bd6:	671a      	str	r2, [r3, #112]	; 0x70
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_UART_MspInit+0x1b0>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2052      	movs	r0, #82	; 0x52
 8001be4:	f000 fc8f 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001be8:	2052      	movs	r0, #82	; 0x52
 8001bea:	f000 fca8 	bl	800253e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bee:	e041      	b.n	8001c74 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_UART_MspInit+0x1b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d13c      	bne.n	8001c74 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fd1f 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001c14:	f7ff fb0a 	bl	800122c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_UART_MspInit+0x1a8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c62:	2307      	movs	r3, #7
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_UART_MspInit+0x1bc>)
 8001c70:	f001 fcd6 	bl	8003620 <HAL_GPIO_Init>
}
 8001c74:	bf00      	nop
 8001c76:	37c0      	adds	r7, #192	; 0xc0
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40007800 	.word	0x40007800
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	2000048c 	.word	0x2000048c
 8001c8c:	40026058 	.word	0x40026058
 8001c90:	40004800 	.word	0x40004800
 8001c94:	40020c00 	.word	0x40020c00

08001c98 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <_write+0x28>)
 8001cb0:	f004 fc44 	bl	800653c <HAL_UART_Transmit>
	return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000408 	.word	0x20000408

08001cc4 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cfe:	f7ff fc11 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f006 fb11 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff f943 	bl	8000f90 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d18:	080097ec 	.word	0x080097ec
  ldr r2, =_sbss
 8001d1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d20:	20000500 	.word	0x20000500

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>

08001d26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	f000 fbe0 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 f805 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d36:	f7ff fb01 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x54>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_InitTick+0x58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fbfb 	bl	800255a <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 fbc3 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_InitTick+0x5c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	200004ec 	.word	0x200004ec

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200004ec 	.word	0x200004ec

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e031      	b.n	8001ea2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fc18 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_ADC_Init+0x84>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f970 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	e001      	b.n	8001e98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	ffffeefd 	.word	0xffffeefd

08001eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e136      	b.n	800213a <HAL_ADC_ConfigChannel+0x28a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d93a      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ee4:	d035      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68d9      	ldr	r1, [r3, #12]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2a:	e035      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4403      	add	r3, r0
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f50:	e022      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	400a      	ands	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4403      	add	r3, r0
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d824      	bhi.n	8001fea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b05      	subs	r3, #5
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe8:	e04c      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d824      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b23      	subs	r3, #35	; 0x23
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	400a      	ands	r2, r1
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	; 0x23
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
 800203a:	e023      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b41      	subs	r3, #65	; 0x41
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b41      	subs	r3, #65	; 0x41
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10f      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d10b      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x23a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d122      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002100:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x2a4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_ADC_ConfigChannel+0x2a8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	10000012 	.word	0x10000012
 800214c:	40012000 	.word	0x40012000
 8002150:	40012300 	.word	0x40012300
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	4b78      	ldr	r3, [pc, #480]	; (8002348 <ADC_Init+0x1ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a77      	ldr	r2, [pc, #476]	; (8002348 <ADC_Init+0x1ec>)
 800216a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800216e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <ADC_Init+0x1ec>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4973      	ldr	r1, [pc, #460]	; (8002348 <ADC_Init+0x1ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <ADC_Init+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	4313      	orrs	r3, r2
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00
 8002394:	05fa0000 	.word	0x05fa0000

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff29 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff3e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff31 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e014      	b.n	80025ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe f90d 	bl	80007b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	795b      	ldrb	r3, [r3, #5]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_DAC_ConfigChannel+0x18>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e03c      	b.n	8002648 <HAL_DAC_ConfigChannel+0x92>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6819      	ldr	r1, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	22c0      	movs	r2, #192	; 0xc0
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43da      	mvns	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	400a      	ands	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fbb2 	bl	8001dc8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e099      	b.n	80027a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002690:	e00f      	b.n	80026b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002692:	f7ff fb99 	bl	8001dc8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b05      	cmp	r3, #5
 800269e:	d908      	bls.n	80026b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e078      	b.n	80027a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e8      	bne.n	8002692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_DMA_Init+0x158>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2b04      	cmp	r3, #4
 800270a:	d107      	bne.n	800271c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	4313      	orrs	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0307 	bic.w	r3, r3, #7
 8002732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b04      	cmp	r3, #4
 8002744:	d117      	bne.n	8002776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa7b 	bl	8002c54 <DMA_CheckFifoParam>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002772:	2301      	movs	r3, #1
 8002774:	e016      	b.n	80027a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa32 	bl	8002be8 <DMA_CalcBaseAndBitshift>
 8002784:	4603      	mov	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	223f      	movs	r2, #63	; 0x3f
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	e010803f 	.word	0xe010803f

080027b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027be:	f7ff fb03 	bl	8001dc8 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d008      	beq.n	80027e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e052      	b.n	8002888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0216 	bic.w	r2, r2, #22
 80027f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_DMA_Abort+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0208 	bic.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	e013      	b.n	800285c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002834:	f7ff fac8 	bl	8001dc8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b05      	cmp	r3, #5
 8002840:	d90c      	bls.n	800285c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e015      	b.n	8002888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e4      	bne.n	8002834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	223f      	movs	r2, #63	; 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00c      	b.n	80028c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2205      	movs	r2, #5
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028e0:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_DMA_IRQHandler+0x258>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a92      	ldr	r2, [pc, #584]	; (8002b30 <HAL_DMA_IRQHandler+0x25c>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2208      	movs	r2, #8
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2208      	movs	r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2204      	movs	r2, #4
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2204      	movs	r2, #4
 800299a:	409a      	lsls	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2210      	movs	r2, #16
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d043      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03c      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2210      	movs	r2, #16
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d024      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e01f      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
 8002a14:	e016      	b.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0208 	bic.w	r2, r2, #8
 8002a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2220      	movs	r2, #32
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 808e 	beq.w	8002b72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8086 	beq.w	8002b72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d136      	bne.n	8002aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0216 	bic.w	r2, r2, #22
 8002a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_DMA_IRQHandler+0x1da>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	223f      	movs	r2, #63	; 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d07d      	beq.n	8002bde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
        }
        return;
 8002aea:	e078      	b.n	8002bde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d030      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
 8002b18:	e02b      	b.n	8002b72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d027      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e022      	b.n	8002b72 <HAL_DMA_IRQHandler+0x29e>
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0210 	bic.w	r2, r2, #16
 8002b50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d032      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d022      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2205      	movs	r2, #5
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d307      	bcc.n	8002bba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f2      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x2ca>
 8002bb8:	e000      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bde:	bf00      	nop
    }
  }
}
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop

08002be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3b10      	subs	r3, #16
 8002bf8:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <DMA_CalcBaseAndBitshift+0x60>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <DMA_CalcBaseAndBitshift+0x64>)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d908      	bls.n	8002c28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <DMA_CalcBaseAndBitshift+0x68>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	1d1a      	adds	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58
 8002c26:	e006      	b.n	8002c36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <DMA_CalcBaseAndBitshift+0x68>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	0800973c 	.word	0x0800973c
 8002c50:	fffffc00 	.word	0xfffffc00

08002c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11f      	bne.n	8002cae <DMA_CheckFifoParam+0x5a>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d856      	bhi.n	8002d22 <DMA_CheckFifoParam+0xce>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <DMA_CheckFifoParam+0x28>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c9f 	.word	0x08002c9f
 8002c84:	08002c8d 	.word	0x08002c8d
 8002c88:	08002d23 	.word	0x08002d23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d046      	beq.n	8002d26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e043      	b.n	8002d26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca6:	d140      	bne.n	8002d2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e03d      	b.n	8002d2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb6:	d121      	bne.n	8002cfc <DMA_CheckFifoParam+0xa8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d837      	bhi.n	8002d2e <DMA_CheckFifoParam+0xda>
 8002cbe:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x70>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002cdb 	.word	0x08002cdb
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002ced 	.word	0x08002ced
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd8:	e030      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d025      	beq.n	8002d32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cea:	e022      	b.n	8002d32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cf4:	d11f      	bne.n	8002d36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cfa:	e01c      	b.n	8002d36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d903      	bls.n	8002d0a <DMA_CheckFifoParam+0xb6>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d003      	beq.n	8002d10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d08:	e018      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0e:	e015      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e00b      	b.n	8002d3a <DMA_CheckFifoParam+0xe6>
      break;
 8002d22:	bf00      	nop
 8002d24:	e00a      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e008      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e006      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e004      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
      break;
 8002d3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop

08002d4c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002d5c:	4ba9      	ldr	r3, [pc, #676]	; (8003004 <HAL_ETH_Init+0x2b8>)
 8002d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e181      	b.n	8003076 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fdc8 	bl	800091c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b9e      	ldr	r3, [pc, #632]	; (8003008 <HAL_ETH_Init+0x2bc>)
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	4a9d      	ldr	r2, [pc, #628]	; (8003008 <HAL_ETH_Init+0x2bc>)
 8002d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d96:	6453      	str	r3, [r2, #68]	; 0x44
 8002d98:	4b9b      	ldr	r3, [pc, #620]	; (8003008 <HAL_ETH_Init+0x2bc>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002da4:	4b99      	ldr	r3, [pc, #612]	; (800300c <HAL_ETH_Init+0x2c0>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a98      	ldr	r2, [pc, #608]	; (800300c <HAL_ETH_Init+0x2c0>)
 8002daa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002db0:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_ETH_Init+0x2c0>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4994      	ldr	r1, [pc, #592]	; (800300c <HAL_ETH_Init+0x2c0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd6:	f7fe fff7 	bl	8001dc8 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002ddc:	e011      	b.n	8002e02 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002dde:	f7fe fff3 	bl	8001dc8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dec:	d909      	bls.n	8002e02 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e139      	b.n	8003076 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e4      	bne.n	8002dde <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f023 031c 	bic.w	r3, r3, #28
 8002e22:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e24:	f001 fbde 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8002e28:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_ETH_Init+0x2c4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d908      	bls.n	8002e44 <HAL_ETH_Init+0xf8>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4a77      	ldr	r2, [pc, #476]	; (8003014 <HAL_ETH_Init+0x2c8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d804      	bhi.n	8002e44 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e027      	b.n	8002e94 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4a73      	ldr	r2, [pc, #460]	; (8003014 <HAL_ETH_Init+0x2c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d908      	bls.n	8002e5e <HAL_ETH_Init+0x112>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4a6d      	ldr	r2, [pc, #436]	; (8003004 <HAL_ETH_Init+0x2b8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d204      	bcs.n	8002e5e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f043 030c 	orr.w	r3, r3, #12
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e01a      	b.n	8002e94 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4a68      	ldr	r2, [pc, #416]	; (8003004 <HAL_ETH_Init+0x2b8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d303      	bcc.n	8002e6e <HAL_ETH_Init+0x122>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	; (8003018 <HAL_ETH_Init+0x2cc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d911      	bls.n	8002e92 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_ETH_Init+0x2cc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d908      	bls.n	8002e88 <HAL_ETH_Init+0x13c>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4a68      	ldr	r2, [pc, #416]	; (800301c <HAL_ETH_Init+0x2d0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d804      	bhi.n	8002e88 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e005      	b.n	8002e94 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e000      	b.n	8002e94 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e92:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f954 	bl	8003150 <HAL_ETH_WritePHYRegister>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002eb2:	6939      	ldr	r1, [r7, #16]
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f9b1 	bl	800321c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0d7      	b.n	8003076 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002ec6:	20ff      	movs	r0, #255	; 0xff
 8002ec8:	f7fe ff8a 	bl	8001de0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a5 	beq.w	8003020 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe ff77 	bl	8001dc8 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f8cb 	bl	8003080 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002eea:	f7fe ff6d 	bl	8001dc8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d90f      	bls.n	8002f1c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f00:	6939      	ldr	r1, [r7, #16]
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f98a 	bl	800321c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0ac      	b.n	8003076 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0da      	beq.n	8002edc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f90f 	bl	8003150 <HAL_ETH_WritePHYRegister>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f3c:	6939      	ldr	r1, [r7, #16]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f96c 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e092      	b.n	8003076 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe ff3a 	bl	8001dc8 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f88e 	bl	8003080 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002f64:	f7fe ff30 	bl	8001dc8 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90f      	bls.n	8002f96 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f7a:	6939      	ldr	r1, [r7, #16]
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f94d 	bl	800321c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e06f      	b.n	8003076 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0da      	beq.n	8002f56 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f869 	bl	8003080 <HAL_ETH_ReadPHYRegister>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fb8:	6939      	ldr	r1, [r7, #16]
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f92e 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e054      	b.n	8003076 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	e002      	b.n	8002fe6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	e035      	b.n	8003064 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e030      	b.n	8003064 <HAL_ETH_Init+0x318>
 8003002:	bf00      	nop
 8003004:	03938700 	.word	0x03938700
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	01312cff 	.word	0x01312cff
 8003014:	02160ebf 	.word	0x02160ebf
 8003018:	05f5e0ff 	.word	0x05f5e0ff
 800301c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003030:	4313      	orrs	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f889 	bl	8003150 <HAL_ETH_WritePHYRegister>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f8e6 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e00c      	b.n	8003076 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800305c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003060:	f7fe febe 	bl	8001de0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003064:	6939      	ldr	r1, [r7, #16]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8d8 	bl	800321c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop

08003080 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	460b      	mov	r3, r1
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b82      	cmp	r3, #130	; 0x82
 80030a0:	d101      	bne.n	80030a6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e050      	b.n	8003148 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2282      	movs	r2, #130	; 0x82
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 031c 	and.w	r3, r3, #28
 80030bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8a1b      	ldrh	r3, [r3, #16]
 80030c2:	02db      	lsls	r3, r3, #11
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	019b      	lsls	r3, r3, #6
 80030d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0302 	bic.w	r3, r3, #2
 80030e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80030f2:	f7fe fe69 	bl	8001dc8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030f8:	e015      	b.n	8003126 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80030fa:	f7fe fe65 	bl	8001dc8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d309      	bcc.n	800311e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e014      	b.n	8003148 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e4      	bne.n	80030fa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	460b      	mov	r3, r1
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b42      	cmp	r3, #66	; 0x42
 8003170:	d101      	bne.n	8003176 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	e04e      	b.n	8003214 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2242      	movs	r2, #66	; 0x42
 800317a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 031c 	and.w	r3, r3, #28
 800318c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8a1b      	ldrh	r3, [r3, #16]
 8003192:	02db      	lsls	r3, r3, #11
 8003194:	b29b      	uxth	r3, r3
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	019b      	lsls	r3, r3, #6
 80031a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80031cc:	f7fe fdfc 	bl	8001dc8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031d2:	e015      	b.n	8003200 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80031d4:	f7fe fdf8 	bl	8001dc8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d309      	bcc.n	80031f8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00d      	b.n	8003214 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e4      	bne.n	80031d4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0b0      	sub	sp, #192	; 0xc0
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003238:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003240:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800324a:	2300      	movs	r3, #0
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
 8003268:	e001      	b.n	800326e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800326e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003278:	2300      	movs	r3, #0
 800327a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80032f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f4:	4bab      	ldr	r3, [pc, #684]	; (80035a4 <ETH_MACDMAConfig+0x388>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80032fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003300:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003304:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003308:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800330e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003312:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003316:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800331c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003320:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003324:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003328:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800332c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003330:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003344:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003350:	2001      	movs	r0, #1
 8003352:	f7fe fd45 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800335e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003360:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003364:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003368:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800336a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800336e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003374:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800337a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800337c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003380:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003384:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800338c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800338e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800339a:	2001      	movs	r0, #1
 800339c:	f7fe fd20 	bl	8001de0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80033bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80033c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033d0:	4013      	ands	r3, r2
 80033d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80033dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80033e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80033e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80033e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80033ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80033ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80033f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80033f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80033f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800340c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003418:	2001      	movs	r0, #1
 800341a:	f7fe fce1 	bl	8001de0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003426:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003428:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800342c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003442:	2001      	movs	r0, #1
 8003444:	f7fe fccc 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003450:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003464:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003476:	2304      	movs	r3, #4
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800347a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800348c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003496:	2300      	movs	r3, #0
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800349a:	2300      	movs	r3, #0
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80034ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <ETH_MACDMAConfig+0x38c>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80034bc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034be:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80034c0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80034c2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80034c4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80034c6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80034c8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80034ca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80034cc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80034ce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80034d0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80034d2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80034d6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80034da:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80034ee:	4413      	add	r3, r2
 80034f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003506:	2001      	movs	r0, #1
 8003508:	f7fe fc6a 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f241 0318 	movw	r3, #4120	; 0x1018
 8003514:	4413      	add	r3, r2
 8003516:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800351a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800351c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003520:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003524:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003528:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800352c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800352e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003530:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003532:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003536:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003544:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003554:	2001      	movs	r0, #1
 8003556:	f7fe fc43 	bl	8001de0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003566:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10d      	bne.n	800358c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f241 031c 	movw	r3, #4124	; 0x101c
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6811      	ldr	r1, [r2, #0]
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <ETH_MACDMAConfig+0x390>)
 8003582:	431a      	orrs	r2, r3
 8003584:	f241 031c 	movw	r3, #4124	; 0x101c
 8003588:	440b      	add	r3, r1
 800358a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	461a      	mov	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f80b 	bl	80035b0 <ETH_MACAddressConfig>
}
 800359a:	bf00      	nop
 800359c:	37c0      	adds	r7, #192	; 0xc0
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	ff20810f 	.word	0xff20810f
 80035a8:	f8de3f23 	.word	0xf8de3f23
 80035ac:	00010040 	.word	0x00010040

080035b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3305      	adds	r3, #5
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3204      	adds	r2, #4
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <ETH_MACAddressConfig+0x68>)
 80035d2:	4413      	add	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3303      	adds	r3, #3
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	061a      	lsls	r2, r3, #24
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3302      	adds	r3, #2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4313      	orrs	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <ETH_MACAddressConfig+0x6c>)
 8003602:	4413      	add	r3, r2
 8003604:	461a      	mov	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	6013      	str	r3, [r2, #0]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40028040 	.word	0x40028040
 800361c:	40028044 	.word	0x40028044

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e175      	b.n	800392c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8164 	bne.w	8003926 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_GPIO_Init+0x56>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80be 	beq.w	8003926 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037c2:	4a61      	ldr	r2, [pc, #388]	; (8003948 <HAL_GPIO_Init+0x328>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_GPIO_Init+0x32c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d037      	beq.n	800385e <HAL_GPIO_Init+0x23e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_GPIO_Init+0x330>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d031      	beq.n	800385a <HAL_GPIO_Init+0x23a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a56      	ldr	r2, [pc, #344]	; (8003954 <HAL_GPIO_Init+0x334>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02b      	beq.n	8003856 <HAL_GPIO_Init+0x236>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a55      	ldr	r2, [pc, #340]	; (8003958 <HAL_GPIO_Init+0x338>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d025      	beq.n	8003852 <HAL_GPIO_Init+0x232>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_GPIO_Init+0x33c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <HAL_GPIO_Init+0x22e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_GPIO_Init+0x340>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x22a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_GPIO_Init+0x344>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x226>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_GPIO_Init+0x348>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x222>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_GPIO_Init+0x34c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x21e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_GPIO_Init+0x350>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x21a>
 8003836:	2309      	movs	r3, #9
 8003838:	e012      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383a:	230a      	movs	r3, #10
 800383c:	e010      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383e:	2308      	movs	r3, #8
 8003840:	e00e      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003842:	2307      	movs	r3, #7
 8003844:	e00c      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003846:	2306      	movs	r3, #6
 8003848:	e00a      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384a:	2305      	movs	r3, #5
 800384c:	e008      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384e:	2304      	movs	r3, #4
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003852:	2303      	movs	r3, #3
 8003854:	e004      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003856:	2302      	movs	r3, #2
 8003858:	e002      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385e:	2300      	movs	r3, #0
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f002 0203 	and.w	r2, r2, #3
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	4093      	lsls	r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <HAL_GPIO_Init+0x328>)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_GPIO_Init+0x354>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038cc:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d2:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f6:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3301      	adds	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	f67f ae86 	bls.w	8003640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40013800 	.word	0x40013800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020400 	.word	0x40020400
 8003954:	40020800 	.word	0x40020800
 8003958:	40020c00 	.word	0x40020c00
 800395c:	40021000 	.word	0x40021000
 8003960:	40021400 	.word	0x40021400
 8003964:	40021800 	.word	0x40021800
 8003968:	40021c00 	.word	0x40021c00
 800396c:	40022000 	.word	0x40022000
 8003970:	40022400 	.word	0x40022400
 8003974:	40013c00 	.word	0x40013c00

08003978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e001      	b.n	800399a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e07f      	b.n	8003aee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fa1c 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	e006      	b.n	8003a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d104      	bne.n	8003a76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_I2C_Init+0x11c>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69d9      	ldr	r1, [r3, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	02008000 	.word	0x02008000

08003afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d138      	bne.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e032      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d139      	bne.n	8003c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e033      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2224      	movs	r2, #36	; 0x24
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c7a:	f7fe f8a5 	bl	8001dc8 <HAL_GetTick>
 8003c7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c80:	e009      	b.n	8003c96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c82:	f7fe f8a1 	bl	8001dc8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c90:	d901      	bls.n	8003c96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e022      	b.n	8003cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d1ee      	bne.n	8003c82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb0:	f7fe f88a 	bl	8001dc8 <HAL_GetTick>
 8003cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cb6:	e009      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cb8:	f7fe f886 	bl	8001dc8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc6:	d901      	bls.n	8003ccc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e007      	b.n	8003cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd8:	d1ee      	bne.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e29b      	b.n	800423a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8087 	beq.w	8003e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d10:	4b96      	ldr	r3, [pc, #600]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1c:	4b93      	ldr	r3, [pc, #588]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
 8003d28:	4b90      	ldr	r3, [pc, #576]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x130>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d168      	bne.n	8003e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e275      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7a>
 8003d58:	4b84      	ldr	r3, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a83      	ldr	r2, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e02e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x9c>
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7e      	ldr	r2, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e01d      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0xc0>
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a72      	ldr	r2, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6e      	ldr	r2, [pc, #440]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fffc 	bl	8001dc8 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fd fff8 	bl	8001dc8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e229      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd ffe8 	bl	8001dc8 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fd ffe4 	bl	8001dc8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e215      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x110>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d069      	beq.n	8003efe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2a:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b4d      	ldr	r3, [pc, #308]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x190>
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1e9      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	493d      	ldr	r1, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e040      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d023      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd ff9a 	bl	8001dc8 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fd ff96 	bl	8001dc8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1c7      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4929      	ldr	r1, [pc, #164]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
 8003eca:	e018      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd ff76 	bl	8001dc8 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fd ff72 	bl	8001dc8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1a3      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d038      	beq.n	8003f7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d019      	beq.n	8003f46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd ff53 	bl	8001dc8 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fd ff4f 	bl	8001dc8 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e180      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x23a>
 8003f44:	e01a      	b.n	8003f7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd ff39 	bl	8001dc8 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fd ff35 	bl	8001dc8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d903      	bls.n	8003f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e166      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
 8003f6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ee      	bne.n	8003f5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a4 	beq.w	80040d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a88      	ldr	r2, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	4b83      	ldr	r3, [pc, #524]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fbe:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fefd 	bl	8001dc8 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd fef9 	bl	8001dc8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e12a      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x31a>
 8003ff8:	4b70      	ldr	r3, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a6f      	ldr	r2, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e02d      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x33c>
 800400e:	4b6b      	ldr	r3, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a6a      	ldr	r2, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x35e>
 8004030:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a61      	ldr	r2, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a5e      	ldr	r2, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 800404a:	4b5c      	ldr	r3, [pc, #368]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fd fead 	bl	8001dc8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fd fea9 	bl	8001dc8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d8      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x386>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fd fe97 	bl	8001dc8 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fe93 	bl	8001dc8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0c2      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80ae 	beq.w	8004238 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040dc:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d06d      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d14b      	bne.n	8004188 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd fe64 	bl	8001dc8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fe60 	bl	8001dc8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e091      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800415a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd fe32 	bl	8001dc8 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fd fe2e 	bl	8001dc8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e05f      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x47c>
 8004186:	e057      	b.n	8004238 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd fe18 	bl	8001dc8 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd fe14 	bl	8001dc8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e045      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x4b0>
 80041ba:	e03d      	b.n	8004238 <HAL_RCC_OscConfig+0x54c>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_RCC_OscConfig+0x558>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d030      	beq.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d129      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d122      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d119      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d10f      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d0      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	4965      	ldr	r1, [pc, #404]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b8      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d040      	beq.n	800436c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d115      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e073      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4936      	ldr	r1, [pc, #216]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433c:	f7fd fd44 	bl	8001dc8 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fd fd40 	bl	8001dc8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e053      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d210      	bcs.n	800439c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4922      	ldr	r1, [pc, #136]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043da:	f000 f821 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1cc>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1d0>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1d4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fca0 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023c00 	.word	0x40023c00
 8004410:	40023800 	.word	0x40023800
 8004414:	08009724 	.word	0x08009724
 8004418:	20000000 	.word	0x20000000
 800441c:	20000004 	.word	0x20000004

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	2300      	movs	r3, #0
 8004432:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004438:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d00d      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x40>
 8004444:	2b08      	cmp	r3, #8
 8004446:	f200 80bd 	bhi.w	80045c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 800444e:	2b04      	cmp	r3, #4
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x3a>
 8004452:	e0b7      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004456:	60bb      	str	r3, [r7, #8]
      break;
 8004458:	e0b7      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800445a:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800445c:	60bb      	str	r3, [r7, #8]
      break;
 800445e:	e0b4      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004460:	4b5d      	ldr	r3, [pc, #372]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004468:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800446a:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04d      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004476:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	461a      	mov	r2, r3
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	ea02 0800 	and.w	r8, r2, r0
 800448e:	ea03 0901 	and.w	r9, r3, r1
 8004492:	4640      	mov	r0, r8
 8004494:	4649      	mov	r1, r9
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	014b      	lsls	r3, r1, #5
 80044a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044a4:	0142      	lsls	r2, r0, #5
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	ebb0 0008 	subs.w	r0, r0, r8
 80044ae:	eb61 0109 	sbc.w	r1, r1, r9
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	018b      	lsls	r3, r1, #6
 80044bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044c0:	0182      	lsls	r2, r0, #6
 80044c2:	1a12      	subs	r2, r2, r0
 80044c4:	eb63 0301 	sbc.w	r3, r3, r1
 80044c8:	f04f 0000 	mov.w	r0, #0
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	00d9      	lsls	r1, r3, #3
 80044d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044d6:	00d0      	lsls	r0, r2, #3
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	eb12 0208 	adds.w	r2, r2, r8
 80044e0:	eb43 0309 	adc.w	r3, r3, r9
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	0259      	lsls	r1, r3, #9
 80044ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044f2:	0250      	lsls	r0, r2, #9
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	461a      	mov	r2, r3
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	f7fb feec 	bl	80002e0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e04a      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	461a      	mov	r2, r3
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	ea02 0400 	and.w	r4, r2, r0
 800452a:	ea03 0501 	and.w	r5, r3, r1
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	014b      	lsls	r3, r1, #5
 800453c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004540:	0142      	lsls	r2, r0, #5
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	1b00      	subs	r0, r0, r4
 8004548:	eb61 0105 	sbc.w	r1, r1, r5
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	018b      	lsls	r3, r1, #6
 8004556:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800455a:	0182      	lsls	r2, r0, #6
 800455c:	1a12      	subs	r2, r2, r0
 800455e:	eb63 0301 	sbc.w	r3, r3, r1
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	00d9      	lsls	r1, r3, #3
 800456c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004570:	00d0      	lsls	r0, r2, #3
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	1912      	adds	r2, r2, r4
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	f04f 0000 	mov.w	r0, #0
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	0299      	lsls	r1, r3, #10
 8004586:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800458a:	0290      	lsls	r0, r2, #10
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	461a      	mov	r2, r3
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	f7fb fea0 	bl	80002e0 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	3301      	adds	r3, #1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	60bb      	str	r3, [r7, #8]
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045c6:	60bb      	str	r3, [r7, #8]
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	68bb      	ldr	r3, [r7, #8]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	007a1200 	.word	0x007a1200

080045e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000000 	.word	0x20000000

080045fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004600:	f7ff fff0 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0a9b      	lsrs	r3, r3, #10
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	08009734 	.word	0x08009734

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004628:	f7ff ffdc 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0b5b      	lsrs	r3, r3, #13
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	08009734 	.word	0x08009734

0800464c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004674:	4b69      	ldr	r3, [pc, #420]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a68      	ldr	r2, [pc, #416]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800467e:	6093      	str	r3, [r2, #8]
 8004680:	4b66      	ldr	r3, [pc, #408]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	4964      	ldr	r1, [pc, #400]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d017      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a6:	4b5d      	ldr	r3, [pc, #372]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	4959      	ldr	r1, [pc, #356]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c4:	d101      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d017      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046e2:	4b4e      	ldr	r3, [pc, #312]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	494a      	ldr	r1, [pc, #296]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004700:	d101      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004702:	2301      	movs	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 808b 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b3a      	ldr	r3, [pc, #232]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a39      	ldr	r2, [pc, #228]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a34      	ldr	r2, [pc, #208]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd fb38 	bl	8001dc8 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fd fb34 	bl	8001dc8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e38f      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d035      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d02e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004798:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ae:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d114      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fd fafc 	bl	8001dc8 <HAL_GetTick>
 80047d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd faf8 	bl	8001dc8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e351      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ee      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004802:	d111      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004812:	400b      	ands	r3, r1
 8004814:	4901      	ldr	r1, [pc, #4]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
 800481a:	e00b      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000
 8004824:	0ffffcff 	.word	0x0ffffcff
 8004828:	4bb3      	ldr	r3, [pc, #716]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4ab2      	ldr	r2, [pc, #712]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004832:	6093      	str	r3, [r2, #8]
 8004834:	4bb0      	ldr	r3, [pc, #704]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	49ad      	ldr	r1, [pc, #692]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004842:	4313      	orrs	r3, r2
 8004844:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004852:	4ba9      	ldr	r3, [pc, #676]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004858:	4aa7      	ldr	r2, [pc, #668]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004862:	4ba5      	ldr	r3, [pc, #660]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004864:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	49a2      	ldr	r1, [pc, #648]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004880:	4b9d      	ldr	r3, [pc, #628]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488e:	499a      	ldr	r1, [pc, #616]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048a2:	4b95      	ldr	r3, [pc, #596]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b0:	4991      	ldr	r1, [pc, #580]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c4:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d2:	4989      	ldr	r1, [pc, #548]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048e6:	4b84      	ldr	r3, [pc, #528]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4980      	ldr	r1, [pc, #512]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004908:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	4978      	ldr	r1, [pc, #480]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492a:	4b73      	ldr	r3, [pc, #460]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f023 020c 	bic.w	r2, r3, #12
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	496f      	ldr	r1, [pc, #444]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800494c:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	4967      	ldr	r1, [pc, #412]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497c:	495e      	ldr	r1, [pc, #376]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	4956      	ldr	r1, [pc, #344]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049d4:	4b48      	ldr	r3, [pc, #288]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	4945      	ldr	r1, [pc, #276]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	493c      	ldr	r1, [pc, #240]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a18:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a26:	4934      	ldr	r1, [pc, #208]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d011      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a48:	492b      	ldr	r1, [pc, #172]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a58:	d101      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	491b      	ldr	r1, [pc, #108]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a9c:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aac:	4912      	ldr	r1, [pc, #72]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad0:	4909      	ldr	r1, [pc, #36]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00f      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	4986      	ldr	r1, [pc, #536]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b10:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b20:	497d      	ldr	r1, [pc, #500]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d006      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80d6 	beq.w	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b3c:	4b76      	ldr	r3, [pc, #472]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a75      	ldr	r2, [pc, #468]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fd f93e 	bl	8001dc8 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b50:	f7fd f93a 	bl	8001dc8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e195      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b62:	4b6d      	ldr	r3, [pc, #436]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d021      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11d      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b90:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b96:	0e1b      	lsrs	r3, r3, #24
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	019a      	lsls	r2, r3, #6
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	071b      	lsls	r3, r3, #28
 8004bb6:	4958      	ldr	r1, [pc, #352]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d129      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bea:	4b4b      	ldr	r3, [pc, #300]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bf8:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	0f1b      	lsrs	r3, r3, #28
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	019a      	lsls	r2, r3, #6
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	493e      	ldr	r1, [pc, #248]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2c:	f023 021f 	bic.w	r2, r3, #31
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4938      	ldr	r1, [pc, #224]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01d      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c58:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	0f1b      	lsrs	r3, r3, #28
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	019a      	lsls	r2, r3, #6
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	071b      	lsls	r3, r3, #28
 8004c7e:	4926      	ldr	r1, [pc, #152]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	071b      	lsls	r3, r3, #28
 8004cae:	491a      	ldr	r1, [pc, #104]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cb6:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fd f881 	bl	8001dc8 <HAL_GetTick>
 8004cc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cca:	f7fd f87d 	bl	8001dc8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e0d8      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 80ce 	bne.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfc:	f7fd f864 	bl	8001dc8 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d02:	e00b      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d04:	f7fd f860 	bl	8001dc8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d904      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0bb      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d1c:	4b5e      	ldr	r3, [pc, #376]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d28:	d0ec      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12a      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d52:	4b51      	ldr	r3, [pc, #324]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d60:	4b4d      	ldr	r3, [pc, #308]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	019a      	lsls	r2, r3, #6
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	4944      	ldr	r1, [pc, #272]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d8e:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	493d      	ldr	r1, [pc, #244]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d022      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbc:	d11d      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	0e1b      	lsrs	r3, r3, #24
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	0f1b      	lsrs	r3, r3, #28
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	019a      	lsls	r2, r3, #6
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	4929      	ldr	r1, [pc, #164]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d028      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e14:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	019a      	lsls	r2, r3, #6
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	071b      	lsls	r3, r3, #28
 8004e3a:	4917      	ldr	r1, [pc, #92]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4911      	ldr	r1, [pc, #68]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fc ffb0 	bl	8001dc8 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e6c:	f7fc ffac 	bl	8001dc8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e007      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8a:	d1ef      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800

08004e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e09d      	b.n	8004fea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ebe:	d009      	beq.n	8004ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61da      	str	r2, [r3, #28]
 8004ec6:	e005      	b.n	8004ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc f9e0 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f14:	d902      	bls.n	8004f1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e002      	b.n	8004f22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f2a:	d007      	beq.n	8004f3c <HAL_SPI_Init+0xa0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	ea42 0103 	orr.w	r1, r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	f003 0204 	and.w	r2, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fb8:	ea42 0103 	orr.w	r1, r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b08a      	sub	sp, #40	; 0x28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005000:	2301      	movs	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x26>
 8005014:	2302      	movs	r3, #2
 8005016:	e1fb      	b.n	8005410 <HAL_SPI_TransmitReceive+0x41e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005020:	f7fc fed2 	bl	8001dc8 <HAL_GetTick>
 8005024:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800502c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800503c:	7efb      	ldrb	r3, [r7, #27]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d00e      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x6e>
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005048:	d106      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x66>
 8005052:	7efb      	ldrb	r3, [r7, #27]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d003      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800505e:	e1cd      	b.n	80053fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x80>
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005078:	e1c0      	b.n	80053fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b04      	cmp	r3, #4
 8005084:	d003      	beq.n	800508e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2205      	movs	r2, #5
 800508a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	887a      	ldrh	r2, [r7, #2]
 800509e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	887a      	ldrh	r2, [r7, #2]
 80050ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d0:	d802      	bhi.n	80050d8 <HAL_SPI_TransmitReceive+0xe6>
 80050d2:	8a3b      	ldrh	r3, [r7, #16]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d908      	bls.n	80050ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	e007      	b.n	80050fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d007      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005120:	d97c      	bls.n	800521c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x13e>
 800512a:	8a7b      	ldrh	r3, [r7, #18]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d169      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005154:	e056      	b.n	8005204 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d11b      	bne.n	800519c <HAL_SPI_TransmitReceive+0x1aa>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_SPI_TransmitReceive+0x1aa>
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	2b01      	cmp	r3, #1
 8005172:	d113      	bne.n	800519c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	881a      	ldrh	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	1c9a      	adds	r2, r3, #2
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d11c      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x1f2>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051e0:	2301      	movs	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051e4:	f7fc fdf0 	bl	8001dc8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d807      	bhi.n	8005204 <HAL_SPI_TransmitReceive+0x212>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d003      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005202:	e0fb      	b.n	80053fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1a3      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x164>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d19d      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x164>
 800521a:	e0df      	b.n	80053dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_SPI_TransmitReceive+0x23a>
 8005224:	8a7b      	ldrh	r3, [r7, #18]
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 80cb 	bne.w	80053c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d912      	bls.n	800525c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	881a      	ldrh	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	1c9a      	adds	r2, r3, #2
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b02      	subs	r3, #2
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800525a:	e0b2      	b.n	80053c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	7812      	ldrb	r2, [r2, #0]
 8005268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005282:	e09e      	b.n	80053c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d134      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x30a>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02f      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x30a>
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d12c      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d912      	bls.n	80052d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d0:	e012      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b01      	cmp	r3, #1
 8005308:	d148      	bne.n	800539c <HAL_SPI_TransmitReceive+0x3aa>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d042      	beq.n	800539c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d923      	bls.n	800536a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	b292      	uxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	1c9a      	adds	r2, r3, #2
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b02      	subs	r3, #2
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d81f      	bhi.n	8005398 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	e016      	b.n	8005398 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f103 020c 	add.w	r2, r3, #12
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800539c:	f7fc fd14 	bl	8001dc8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d803      	bhi.n	80053b4 <HAL_SPI_TransmitReceive+0x3c2>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d102      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x3c8>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053c0:	e01c      	b.n	80053fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f47f af5b 	bne.w	8005284 <HAL_SPI_TransmitReceive+0x292>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f47f af54 	bne.w	8005284 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f937 	bl	8005654 <SPI_EndRxTxTransaction>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60
 80053f8:	e000      	b.n	80053fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800540c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	; 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005428:	f7fc fcce 	bl	8001dc8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	4413      	add	r3, r2
 8005436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005438:	f7fc fcc6 	bl	8001dc8 <HAL_GetTick>
 800543c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800543e:	4b39      	ldr	r3, [pc, #228]	; (8005524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	015b      	lsls	r3, r3, #5
 8005444:	0d1b      	lsrs	r3, r3, #20
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800544e:	e054      	b.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d050      	beq.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005458:	f7fc fcb6 	bl	8001dc8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	429a      	cmp	r2, r3
 8005466:	d902      	bls.n	800546e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d13d      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800547c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005486:	d111      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	d004      	beq.n	800549c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d107      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b4:	d10f      	bne.n	80054d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e017      	b.n	800551a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d19b      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000000 	.word	0x20000000

08005528 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800553a:	f7fc fc45 	bl	8001dc8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	4413      	add	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800554a:	f7fc fc3d 	bl	8001dc8 <HAL_GetTick>
 800554e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005558:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00da      	lsls	r2, r3, #3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	0d1b      	lsrs	r3, r3, #20
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005570:	e060      	b.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005578:	d107      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005588:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d050      	beq.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005592:	f7fc fc19 	bl	8001dc8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559e:	429a      	cmp	r2, r3
 80055a0:	d902      	bls.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d13d      	bne.n	8005624 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c0:	d111      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	d004      	beq.n	80055d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d107      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	d10f      	bne.n	8005610 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e010      	b.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	3b01      	subs	r3, #1
 8005632:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d196      	bne.n	8005572 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000000 	.word	0x20000000

08005654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff5b 	bl	8005528 <SPI_WaitFifoStateUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e046      	b.n	8005716 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <SPI_EndRxTxTransaction+0xcc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <SPI_EndRxTxTransaction+0xd0>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0d5b      	lsrs	r3, r3, #21
 8005694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a6:	d112      	bne.n	80056ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff feb0 	bl	8005418 <SPI_WaitFlagStateUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d016      	beq.n	80056ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e023      	b.n	8005716 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d0f2      	beq.n	80056ce <SPI_EndRxTxTransaction+0x7a>
 80056e8:	e000      	b.n	80056ec <SPI_EndRxTxTransaction+0x98>
        break;
 80056ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff15 	bl	8005528 <SPI_WaitFifoStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e000      	b.n	8005716 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000000 	.word	0x20000000
 8005724:	165e9f81 	.word	0x165e9f81

08005728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e049      	b.n	80057ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc f860 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f000 fa74 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e049      	b.n	800587c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f841 	bl	8005884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fa1d 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e0ff      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b14      	cmp	r3, #20
 80058c2:	f200 80f0 	bhi.w	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005921 	.word	0x08005921
 80058d0:	08005aa7 	.word	0x08005aa7
 80058d4:	08005aa7 	.word	0x08005aa7
 80058d8:	08005aa7 	.word	0x08005aa7
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005aa7 	.word	0x08005aa7
 80058e4:	08005aa7 	.word	0x08005aa7
 80058e8:	08005aa7 	.word	0x08005aa7
 80058ec:	080059a3 	.word	0x080059a3
 80058f0:	08005aa7 	.word	0x08005aa7
 80058f4:	08005aa7 	.word	0x08005aa7
 80058f8:	08005aa7 	.word	0x08005aa7
 80058fc:	080059e3 	.word	0x080059e3
 8005900:	08005aa7 	.word	0x08005aa7
 8005904:	08005aa7 	.word	0x08005aa7
 8005908:	08005aa7 	.word	0x08005aa7
 800590c:	08005a25 	.word	0x08005a25
 8005910:	08005aa7 	.word	0x08005aa7
 8005914:	08005aa7 	.word	0x08005aa7
 8005918:	08005aa7 	.word	0x08005aa7
 800591c:	08005a65 	.word	0x08005a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa34 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e0a5      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa86 	bl	8005e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
      break;
 80059a0:	e084      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fadd 	bl	8005f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0204 	bic.w	r2, r2, #4
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]
      break;
 80059e0:	e064      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fb33 	bl	8006054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	021a      	lsls	r2, r3, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
      break;
 8005a22:	e043      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb6a 	bl	8006104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0204 	bic.w	r2, r2, #4
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a62:	e023      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fb9c 	bl	80061a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aa4:	e002      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop

08005ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_ConfigClockSource+0x1c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0b4      	b.n	8005c46 <HAL_TIM_ConfigClockSource+0x186>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <HAL_TIM_ConfigClockSource+0x190>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b14:	d03e      	beq.n	8005b94 <HAL_TIM_ConfigClockSource+0xd4>
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1a:	f200 8087 	bhi.w	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	f000 8086 	beq.w	8005c32 <HAL_TIM_ConfigClockSource+0x172>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d87f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d01a      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0xa6>
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d87b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d050      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x11a>
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d877      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d03c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0xfa>
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d873      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d058      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x13a>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d86f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d064      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d86b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d060      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d867      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d05c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d05a      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	e062      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f000 fbe5 	bl	8006344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	609a      	str	r2, [r3, #8]
      break;
 8005b92:	e04f      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f000 fbce 	bl	8006344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb6:	609a      	str	r2, [r3, #8]
      break;
 8005bb8:	e03c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fb42 	bl	8006250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2150      	movs	r1, #80	; 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb9b 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e02c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 fb61 	bl	80062ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2160      	movs	r1, #96	; 0x60
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb8b 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e01c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 fb22 	bl	8006250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fb7b 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005c18:	e00c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 fb72 	bl	800630e <TIM_ITRx_SetConfig>
      break;
 8005c2a:	e003      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e000      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	fffeff88 	.word	0xfffeff88

08005c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3b      	ldr	r2, [pc, #236]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3a      	ldr	r2, [pc, #232]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d027      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d023      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <TIM_Base_SetConfig+0x128>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <TIM_Base_SetConfig+0x12c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <TIM_Base_SetConfig+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d103      	bne.n	8005d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	615a      	str	r2, [r3, #20]
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40001800 	.word	0x40001800
 8005d8c:	40001c00 	.word	0x40001c00
 8005d90:	40002000 	.word	0x40002000

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <TIM_OC1_SetConfig+0xd8>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC1_SetConfig+0x64>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <TIM_OC1_SetConfig+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d10c      	bne.n	8005e12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0308 	bic.w	r3, r3, #8
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 0304 	bic.w	r3, r3, #4
 8005e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC1_SetConfig+0x8e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC1_SetConfig+0xe0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d111      	bne.n	8005e46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	fffeff8f 	.word	0xfffeff8f
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <TIM_OC2_SetConfig+0xe4>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC2_SetConfig+0x68>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <TIM_OC2_SetConfig+0xec>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC2_SetConfig+0x94>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <TIM_OC2_SetConfig+0xec>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	feff8fff 	.word	0xfeff8fff
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <TIM_OC3_SetConfig+0xe0>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0x66>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a21      	ldr	r2, [pc, #132]	; (8006050 <TIM_OC3_SetConfig+0xe8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_OC3_SetConfig+0x92>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <TIM_OC3_SetConfig+0xe8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	fffeff8f 	.word	0xfffeff8f
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <TIM_OC4_SetConfig+0xa4>)
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <TIM_OC4_SetConfig+0xa8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <TIM_OC4_SetConfig+0xac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	feff8fff 	.word	0xfeff8fff
 80060fc:	40010000 	.word	0x40010000
 8006100:	40010400 	.word	0x40010400

08006104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b1b      	ldr	r3, [pc, #108]	; (800619c <TIM_OC5_SetConfig+0x98>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <TIM_OC5_SetConfig+0x9c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC5_SetConfig+0x5e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <TIM_OC5_SetConfig+0xa0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d109      	bne.n	8006176 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	fffeff8f 	.word	0xfffeff8f
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <TIM_OC6_SetConfig+0x9c>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	051b      	lsls	r3, r3, #20
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a13      	ldr	r2, [pc, #76]	; (8006248 <TIM_OC6_SetConfig+0xa0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC6_SetConfig+0x60>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <TIM_OC6_SetConfig+0xa4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d109      	bne.n	800621c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	feff8fff 	.word	0xfeff8fff
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400

08006250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f023 0201 	bic.w	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800627a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 030a 	bic.w	r3, r3, #10
 800628c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0210 	bic.w	r2, r3, #16
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	f043 0307 	orr.w	r3, r3, #7
 8006330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	021a      	lsls	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	431a      	orrs	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e06d      	b.n	8006478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a30      	ldr	r2, [pc, #192]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a20      	ldr	r2, [pc, #128]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d022      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640e:	d01d      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d018      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1c      	ldr	r2, [pc, #112]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00e      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d009      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a16      	ldr	r2, [pc, #88]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d10c      	bne.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006452:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40014000 	.word	0x40014000
 800649c:	40001800 	.word	0x40001800

080064a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e040      	b.n	8006534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb fb08 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2224      	movs	r2, #36	; 0x24
 80064cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fbca 	bl	8006c78 <UART_SetConfig>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e022      	b.n	8006534 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fe20 	bl	800713c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800650a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800651a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fea7 	bl	8007280 <UART_CheckIdleState>
 8006532:	4603      	mov	r3, r0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006550:	2b20      	cmp	r3, #32
 8006552:	f040 8081 	bne.w	8006658 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_UART_Transmit+0x26>
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e079      	b.n	800665a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_UART_Transmit+0x38>
 8006570:	2302      	movs	r3, #2
 8006572:	e072      	b.n	800665a <HAL_UART_Transmit+0x11e>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2221      	movs	r2, #33	; 0x21
 8006588:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800658a:	f7fb fc1d 	bl	8001dc8 <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d108      	bne.n	80065bc <HAL_UART_Transmit+0x80>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e003      	b.n	80065c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80065cc:	e02c      	b.n	8006628 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fe9a 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e038      	b.n	800665a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	3302      	adds	r3, #2
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e007      	b.n	8006616 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	3301      	adds	r3, #1
 8006614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1cc      	bne.n	80065ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	2140      	movs	r1, #64	; 0x40
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fe67 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e005      	b.n	800665a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b0ba      	sub	sp, #232	; 0xe8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800668a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800668e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006692:	4013      	ands	r3, r2
 8006694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d115      	bne.n	80066cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00f      	beq.n	80066cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 82a4 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
      }
      return;
 80066ca:	e29e      	b.n	8006c0a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8117 	beq.w	8006904 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066e6:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_UART_IRQHandler+0x298>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 810a 	beq.w	8006904 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d011      	beq.n	8006720 <HAL_UART_IRQHandler+0xbc>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2201      	movs	r2, #1
 800670e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006716:	f043 0201 	orr.w	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_UART_IRQHandler+0xec>
 800672c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2202      	movs	r2, #2
 800673e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_UART_IRQHandler+0x11c>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2204      	movs	r2, #4
 800676e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006776:	f043 0202 	orr.w	r2, r3, #2
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2208      	movs	r2, #8
 80067aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b2:	f043 0208 	orr.w	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <HAL_UART_IRQHandler+0x18a>
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00c      	beq.n	80067ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 820a 	beq.w	8006c0e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	d005      	beq.n	8006846 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800683a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006842:	2b00      	cmp	r3, #0
 8006844:	d04f      	beq.n	80068e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fe27 	bl	800749a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d141      	bne.n	80068de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800688a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800689e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1d9      	bne.n	800685a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d013      	beq.n	80068d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a13      	ldr	r2, [pc, #76]	; (8006900 <HAL_UART_IRQHandler+0x29c>)
 80068b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fb ffe8 	bl	8002890 <HAL_DMA_Abort_IT>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d017      	beq.n	80068f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	e00f      	b.n	80068f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9ae 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	e00b      	b.n	80068f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9aa 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	e007      	b.n	80068f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9a6 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80068f4:	e18b      	b.n	8006c0e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f6:	bf00      	nop
    return;
 80068f8:	e189      	b.n	8006c0e <HAL_UART_IRQHandler+0x5aa>
 80068fa:	bf00      	nop
 80068fc:	04000120 	.word	0x04000120
 8006900:	08007561 	.word	0x08007561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 8144 	bne.w	8006b96 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 813d 	beq.w	8006b96 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8136 	beq.w	8006b96 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	f040 80b2 	bne.w	8006aa6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800694e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 815d 	beq.w	8006c12 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800695e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006962:	429a      	cmp	r2, r3
 8006964:	f080 8155 	bcs.w	8006c12 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800696e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697c:	f000 8085 	beq.w	8006a8a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1da      	bne.n	8006980 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e1      	bne.n	80069ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e3      	bne.n	8006a06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5a:	f023 0310 	bic.w	r3, r3, #16
 8006a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fb fe93 	bl	80027b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8d4 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa4:	e0b5      	b.n	8006c12 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80a7 	beq.w	8006c16 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80a2 	beq.w	8006c16 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
 8006af6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e4      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	623b      	str	r3, [r7, #32]
   return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e3      	bne.n	8006b08 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0310 	bic.w	r3, r3, #16
 8006b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e4      	bne.n	8006b52 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f85c 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b94:	e03f      	b.n	8006c16 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x55c>
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f853 	bl	8006c64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bbe:	e02d      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00e      	beq.n	8006bea <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01c      	beq.n	8006c1a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
    }
    return;
 8006be8:	e017      	b.n	8006c1a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fcc2 	bl	800758c <UART_EndTransmit_IT>
    return;
 8006c08:	e008      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006c0a:	bf00      	nop
 8006c0c:	e006      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006c0e:	bf00      	nop
 8006c10:	e004      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <HAL_UART_IRQHandler+0x5b8>
    return;
 8006c1a:	bf00      	nop
  }

}
 8006c1c:	37e8      	adds	r7, #232	; 0xe8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4ba7      	ldr	r3, [pc, #668]	; (8006f40 <UART_SetConfig+0x2c8>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a95      	ldr	r2, [pc, #596]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d120      	bne.n	8006d36 <UART_SetConfig+0xbe>
 8006cf4:	4b94      	ldr	r3, [pc, #592]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d816      	bhi.n	8006d30 <UART_SetConfig+0xb8>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x90>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d25 	.word	0x08006d25
 8006d10:	08006d1f 	.word	0x08006d1f
 8006d14:	08006d2b 	.word	0x08006d2b
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e14f      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e14c      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d24:	2304      	movs	r3, #4
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e149      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e146      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d30:	2310      	movs	r3, #16
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e143      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a84      	ldr	r2, [pc, #528]	; (8006f4c <UART_SetConfig+0x2d4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d132      	bne.n	8006da6 <UART_SetConfig+0x12e>
 8006d40:	4b81      	ldr	r3, [pc, #516]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d828      	bhi.n	8006da0 <UART_SetConfig+0x128>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0xdc>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006da1 	.word	0x08006da1
 8006d5c:	08006da1 	.word	0x08006da1
 8006d60:	08006da1 	.word	0x08006da1
 8006d64:	08006d95 	.word	0x08006d95
 8006d68:	08006da1 	.word	0x08006da1
 8006d6c:	08006da1 	.word	0x08006da1
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006d8f 	.word	0x08006d8f
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006d9b 	.word	0x08006d9b
 8006d88:	2300      	movs	r3, #0
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e117      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e114      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e111      	b.n	8006fbe <UART_SetConfig+0x346>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e10e      	b.n	8006fbe <UART_SetConfig+0x346>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e10b      	b.n	8006fbe <UART_SetConfig+0x346>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a69      	ldr	r2, [pc, #420]	; (8006f50 <UART_SetConfig+0x2d8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d120      	bne.n	8006df2 <UART_SetConfig+0x17a>
 8006db0:	4b65      	ldr	r3, [pc, #404]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d013      	beq.n	8006de6 <UART_SetConfig+0x16e>
 8006dbe:	2b30      	cmp	r3, #48	; 0x30
 8006dc0:	d814      	bhi.n	8006dec <UART_SetConfig+0x174>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d009      	beq.n	8006dda <UART_SetConfig+0x162>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d810      	bhi.n	8006dec <UART_SetConfig+0x174>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <UART_SetConfig+0x15c>
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d006      	beq.n	8006de0 <UART_SetConfig+0x168>
 8006dd2:	e00b      	b.n	8006dec <UART_SetConfig+0x174>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0f1      	b.n	8006fbe <UART_SetConfig+0x346>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e0ee      	b.n	8006fbe <UART_SetConfig+0x346>
 8006de0:	2304      	movs	r3, #4
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e0eb      	b.n	8006fbe <UART_SetConfig+0x346>
 8006de6:	2308      	movs	r3, #8
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e0e8      	b.n	8006fbe <UART_SetConfig+0x346>
 8006dec:	2310      	movs	r3, #16
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e0e5      	b.n	8006fbe <UART_SetConfig+0x346>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a57      	ldr	r2, [pc, #348]	; (8006f54 <UART_SetConfig+0x2dc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d120      	bne.n	8006e3e <UART_SetConfig+0x1c6>
 8006dfc:	4b52      	ldr	r3, [pc, #328]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d013      	beq.n	8006e32 <UART_SetConfig+0x1ba>
 8006e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e0c:	d814      	bhi.n	8006e38 <UART_SetConfig+0x1c0>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d009      	beq.n	8006e26 <UART_SetConfig+0x1ae>
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d810      	bhi.n	8006e38 <UART_SetConfig+0x1c0>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <UART_SetConfig+0x1a8>
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d006      	beq.n	8006e2c <UART_SetConfig+0x1b4>
 8006e1e:	e00b      	b.n	8006e38 <UART_SetConfig+0x1c0>
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e0cb      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e0c8      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e0c5      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e0c2      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e0bf      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a45      	ldr	r2, [pc, #276]	; (8006f58 <UART_SetConfig+0x2e0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d125      	bne.n	8006e94 <UART_SetConfig+0x21c>
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d017      	beq.n	8006e88 <UART_SetConfig+0x210>
 8006e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5c:	d817      	bhi.n	8006e8e <UART_SetConfig+0x216>
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d00b      	beq.n	8006e7c <UART_SetConfig+0x204>
 8006e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e68:	d811      	bhi.n	8006e8e <UART_SetConfig+0x216>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <UART_SetConfig+0x1fe>
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d006      	beq.n	8006e82 <UART_SetConfig+0x20a>
 8006e74:	e00b      	b.n	8006e8e <UART_SetConfig+0x216>
 8006e76:	2300      	movs	r3, #0
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e0a0      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e09d      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e82:	2304      	movs	r3, #4
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e09a      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e097      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e094      	b.n	8006fbe <UART_SetConfig+0x346>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a30      	ldr	r2, [pc, #192]	; (8006f5c <UART_SetConfig+0x2e4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d125      	bne.n	8006eea <UART_SetConfig+0x272>
 8006e9e:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eac:	d017      	beq.n	8006ede <UART_SetConfig+0x266>
 8006eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb2:	d817      	bhi.n	8006ee4 <UART_SetConfig+0x26c>
 8006eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb8:	d00b      	beq.n	8006ed2 <UART_SetConfig+0x25a>
 8006eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ebe:	d811      	bhi.n	8006ee4 <UART_SetConfig+0x26c>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <UART_SetConfig+0x254>
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d006      	beq.n	8006ed8 <UART_SetConfig+0x260>
 8006eca:	e00b      	b.n	8006ee4 <UART_SetConfig+0x26c>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e075      	b.n	8006fbe <UART_SetConfig+0x346>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e072      	b.n	8006fbe <UART_SetConfig+0x346>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e06f      	b.n	8006fbe <UART_SetConfig+0x346>
 8006ede:	2308      	movs	r3, #8
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e06c      	b.n	8006fbe <UART_SetConfig+0x346>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e069      	b.n	8006fbe <UART_SetConfig+0x346>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <UART_SetConfig+0x2e8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d137      	bne.n	8006f64 <UART_SetConfig+0x2ec>
 8006ef4:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f02:	d017      	beq.n	8006f34 <UART_SetConfig+0x2bc>
 8006f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f08:	d817      	bhi.n	8006f3a <UART_SetConfig+0x2c2>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d00b      	beq.n	8006f28 <UART_SetConfig+0x2b0>
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d811      	bhi.n	8006f3a <UART_SetConfig+0x2c2>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <UART_SetConfig+0x2aa>
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1e:	d006      	beq.n	8006f2e <UART_SetConfig+0x2b6>
 8006f20:	e00b      	b.n	8006f3a <UART_SetConfig+0x2c2>
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e04a      	b.n	8006fbe <UART_SetConfig+0x346>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e047      	b.n	8006fbe <UART_SetConfig+0x346>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e044      	b.n	8006fbe <UART_SetConfig+0x346>
 8006f34:	2308      	movs	r3, #8
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e041      	b.n	8006fbe <UART_SetConfig+0x346>
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	e03e      	b.n	8006fbe <UART_SetConfig+0x346>
 8006f40:	efff69f3 	.word	0xefff69f3
 8006f44:	40011000 	.word	0x40011000
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	40004400 	.word	0x40004400
 8006f50:	40004800 	.word	0x40004800
 8006f54:	40004c00 	.word	0x40004c00
 8006f58:	40005000 	.word	0x40005000
 8006f5c:	40011400 	.word	0x40011400
 8006f60:	40007800 	.word	0x40007800
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a71      	ldr	r2, [pc, #452]	; (8007130 <UART_SetConfig+0x4b8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d125      	bne.n	8006fba <UART_SetConfig+0x342>
 8006f6e:	4b71      	ldr	r3, [pc, #452]	; (8007134 <UART_SetConfig+0x4bc>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f7c:	d017      	beq.n	8006fae <UART_SetConfig+0x336>
 8006f7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f82:	d817      	bhi.n	8006fb4 <UART_SetConfig+0x33c>
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f88:	d00b      	beq.n	8006fa2 <UART_SetConfig+0x32a>
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8e:	d811      	bhi.n	8006fb4 <UART_SetConfig+0x33c>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <UART_SetConfig+0x324>
 8006f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f98:	d006      	beq.n	8006fa8 <UART_SetConfig+0x330>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x33c>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e00d      	b.n	8006fbe <UART_SetConfig+0x346>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e00a      	b.n	8006fbe <UART_SetConfig+0x346>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e007      	b.n	8006fbe <UART_SetConfig+0x346>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e004      	b.n	8006fbe <UART_SetConfig+0x346>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e001      	b.n	8006fbe <UART_SetConfig+0x346>
 8006fba:	2310      	movs	r3, #16
 8006fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc6:	d15a      	bne.n	800707e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006fc8:	7ffb      	ldrb	r3, [r7, #31]
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d827      	bhi.n	800701e <UART_SetConfig+0x3a6>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x35c>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007001 	.word	0x08007001
 8006fdc:	08007009 	.word	0x08007009
 8006fe0:	0800701f 	.word	0x0800701f
 8006fe4:	0800700f 	.word	0x0800700f
 8006fe8:	0800701f 	.word	0x0800701f
 8006fec:	0800701f 	.word	0x0800701f
 8006ff0:	0800701f 	.word	0x0800701f
 8006ff4:	08007017 	.word	0x08007017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fd fb00 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 8006ffc:	61b8      	str	r0, [r7, #24]
        break;
 8006ffe:	e013      	b.n	8007028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007000:	f7fd fb10 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8007004:	61b8      	str	r0, [r7, #24]
        break;
 8007006:	e00f      	b.n	8007028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007008:	4b4b      	ldr	r3, [pc, #300]	; (8007138 <UART_SetConfig+0x4c0>)
 800700a:	61bb      	str	r3, [r7, #24]
        break;
 800700c:	e00c      	b.n	8007028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700e:	f7fd fa07 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8007012:	61b8      	str	r0, [r7, #24]
        break;
 8007014:	e008      	b.n	8007028 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701a:	61bb      	str	r3, [r7, #24]
        break;
 800701c:	e004      	b.n	8007028 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	77bb      	strb	r3, [r7, #30]
        break;
 8007026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d074      	beq.n	8007118 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	005a      	lsls	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d916      	bls.n	8007078 <UART_SetConfig+0x400>
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007050:	d212      	bcs.n	8007078 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f023 030f 	bic.w	r3, r3, #15
 800705a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	b29a      	uxth	r2, r3
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	4313      	orrs	r3, r2
 800706c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	89fa      	ldrh	r2, [r7, #14]
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	e04f      	b.n	8007118 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	77bb      	strb	r3, [r7, #30]
 800707c:	e04c      	b.n	8007118 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800707e:	7ffb      	ldrb	r3, [r7, #31]
 8007080:	2b08      	cmp	r3, #8
 8007082:	d828      	bhi.n	80070d6 <UART_SetConfig+0x45e>
 8007084:	a201      	add	r2, pc, #4	; (adr r2, 800708c <UART_SetConfig+0x414>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070d7 	.word	0x080070d7
 800709c:	080070c7 	.word	0x080070c7
 80070a0:	080070d7 	.word	0x080070d7
 80070a4:	080070d7 	.word	0x080070d7
 80070a8:	080070d7 	.word	0x080070d7
 80070ac:	080070cf 	.word	0x080070cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b0:	f7fd faa4 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 80070b4:	61b8      	str	r0, [r7, #24]
        break;
 80070b6:	e013      	b.n	80070e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b8:	f7fd fab4 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 80070bc:	61b8      	str	r0, [r7, #24]
        break;
 80070be:	e00f      	b.n	80070e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <UART_SetConfig+0x4c0>)
 80070c2:	61bb      	str	r3, [r7, #24]
        break;
 80070c4:	e00c      	b.n	80070e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fd f9ab 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80070ca:	61b8      	str	r0, [r7, #24]
        break;
 80070cc:	e008      	b.n	80070e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d2:	61bb      	str	r3, [r7, #24]
        break;
 80070d4:	e004      	b.n	80070e0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	77bb      	strb	r3, [r7, #30]
        break;
 80070de:	bf00      	nop
    }

    if (pclk != 0U)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d018      	beq.n	8007118 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	085a      	lsrs	r2, r3, #1
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	441a      	add	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d909      	bls.n	8007114 <UART_SetConfig+0x49c>
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007106:	d205      	bcs.n	8007114 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	e001      	b.n	8007118 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007124:	7fbb      	ldrb	r3, [r7, #30]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40007c00 	.word	0x40007c00
 8007134:	40023800 	.word	0x40023800
 8007138:	00f42400 	.word	0x00f42400

0800713c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01a      	beq.n	8007252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723a:	d10a      	bne.n	8007252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	605a      	str	r2, [r3, #4]
  }
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af02      	add	r7, sp, #8
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007290:	f7fa fd9a 	bl	8001dc8 <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d10e      	bne.n	80072c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f82d 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e023      	b.n	800730a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d10e      	bne.n	80072ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f817 	bl	8007312 <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e00d      	b.n	800730a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b09c      	sub	sp, #112	; 0x70
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007322:	e0a5      	b.n	8007470 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	f000 80a1 	beq.w	8007470 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fa fd4b 	bl	8001dc8 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <UART_WaitOnFlagUntilTimeout+0x32>
 800733e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007340:	2b00      	cmp	r3, #0
 8007342:	d13e      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007358:	667b      	str	r3, [r7, #100]	; 0x64
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007364:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e6      	bne.n	8007344 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007396:	64ba      	str	r2, [r7, #72]	; 0x48
 8007398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800739c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e067      	b.n	8007492 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d04f      	beq.n	8007470 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073de:	d147      	bne.n	8007470 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
 800740a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800740e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	613b      	str	r3, [r7, #16]
   return(result);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	66bb      	str	r3, [r7, #104]	; 0x68
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800743c:	623a      	str	r2, [r7, #32]
 800743e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	69f9      	ldr	r1, [r7, #28]
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	61bb      	str	r3, [r7, #24]
   return(result);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e5      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e010      	b.n	8007492 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4013      	ands	r3, r2
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	429a      	cmp	r2, r3
 800748c:	f43f af4a 	beq.w	8007324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3770      	adds	r7, #112	; 0x70
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800749a:	b480      	push	{r7}
 800749c:	b095      	sub	sp, #84	; 0x54
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
 80074c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	f023 0301 	bic.w	r3, r3, #1
 80074ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e5      	bne.n	80074d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	2b01      	cmp	r3, #1
 800750e:	d118      	bne.n	8007542 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	60bb      	str	r3, [r7, #8]
   return(result);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f023 0310 	bic.w	r3, r3, #16
 8007524:	647b      	str	r3, [r7, #68]	; 0x44
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6979      	ldr	r1, [r7, #20]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	613b      	str	r3, [r7, #16]
   return(result);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007554:	bf00      	nop
 8007556:	3754      	adds	r7, #84	; 0x54
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fb5a 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6979      	ldr	r1, [r7, #20]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	613b      	str	r3, [r7, #16]
   return(result);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fb26 	bl	8006c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d8:	bf00      	nop
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <NRF_configure>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure(bool ptx_nprx)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 80075ea:	230f      	movs	r3, #15
 80075ec:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 80075ee:	230e      	movs	r3, #14
 80075f0:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 80075f2:	2301      	movs	r3, #1
 80075f4:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 80075f6:	2301      	movs	r3, #1
 80075f8:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 80075fa:	2303      	movs	r3, #3
 80075fc:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 80075fe:	23ff      	movs	r3, #255	; 0xff
 8007600:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 8007602:	2302      	movs	r3, #2
 8007604:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 8007606:	230e      	movs	r3, #14
 8007608:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 800760a:	2371      	movs	r3, #113	; 0x71
 800760c:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 800760e:	2301      	movs	r3, #1
 8007610:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 8007612:	2306      	movs	r3, #6
 8007614:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 8007616:	4a2b      	ldr	r2, [pc, #172]	; (80076c4 <NRF_configure+0xe4>)
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007620:	6018      	str	r0, [r3, #0]
 8007622:	3304      	adds	r3, #4
 8007624:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 8007626:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <NRF_configure+0xe4>)
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007630:	6018      	str	r0, [r3, #0]
 8007632:	3304      	adds	r3, #4
 8007634:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <NRF_configure+0x66>
	{
		NRF_setCONFIG(config_ptx);
 800763c:	7fbb      	ldrb	r3, [r7, #30]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f84a 	bl	80076d8 <NRF_setCONFIG>
 8007644:	e003      	b.n	800764e <NRF_configure+0x6e>
	}
	else
	{
		NRF_setCONFIG(config_prx);
 8007646:	7ffb      	ldrb	r3, [r7, #31]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f845 	bl	80076d8 <NRF_setCONFIG>
	}

	NRF_setEN_AA(en_aa);
 800764e:	7f7b      	ldrb	r3, [r7, #29]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f84f 	bl	80076f4 <NRF_setEN_AA>
	NRF_setEN_RXADDR(en_rxaddr);
 8007656:	7f3b      	ldrb	r3, [r7, #28]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f859 	bl	8007710 <NRF_setEN_RXADDR>
	NRF_setSETUP_AW(setup_aw);
 800765e:	7efb      	ldrb	r3, [r7, #27]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f863 	bl	800772c <NRF_setSETUP_AW>
	NRF_setSETUP_RETR(setup_retr);
 8007666:	7ebb      	ldrb	r3, [r7, #26]
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f86d 	bl	8007748 <NRF_setSETUP_RETR>
	NRF_setRF_CH(rf_ch);
 800766e:	7e7b      	ldrb	r3, [r7, #25]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f877 	bl	8007764 <NRF_setRF_CH>
	NRF_setRF_SETUP(rf_setup);
 8007676:	7e3b      	ldrb	r3, [r7, #24]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f881 	bl	8007780 <NRF_setRF_SETUP>
	NRF_setSTATUS(status);
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f88b 	bl	800779c <NRF_setSTATUS>
	NRF_setDYNPD(dynpd);
 8007686:	7dbb      	ldrb	r3, [r7, #22]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f8f1 	bl	8007870 <NRF_setDYNPD>
	NRF_setFEATURE(feature);
 800768e:	7d7b      	ldrb	r3, [r7, #21]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f8fb 	bl	800788c <NRF_setFEATURE>

	if(ptx_nprx)
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <NRF_configure+0xc8>
	{
		NRF_setTX_ADDR((uint8_t*)tx_adr, NRF_ADR_MAX);
 800769c:	f107 0308 	add.w	r3, r7, #8
 80076a0:	2105      	movs	r1, #5
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f8b6 	bl	8007814 <NRF_setTX_ADDR>
	}

	NRF_setRX_ADDR_P0((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 80076a8:	f107 0310 	add.w	r3, r7, #16
 80076ac:	2105      	movs	r1, #5
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f882 	bl	80077b8 <NRF_setRX_ADDR_P0>

	NRF_setFLUSH_RX();
 80076b4:	f000 f975 	bl	80079a2 <NRF_setFLUSH_RX>
	NRF_setFLUSH_TX();
 80076b8:	f000 f962 	bl	8007980 <NRF_setFLUSH_TX>
}
 80076bc:	bf00      	nop
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08009714 	.word	0x08009714

080076c8 <NRF_getSTATUS>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
	return nrfport_readByte(STATUS_ADR);
 80076cc:	2007      	movs	r0, #7
 80076ce:	f000 fd1e 	bl	800810e <nrfport_readByte>
 80076d2:	4603      	mov	r3, r0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <NRF_setCONFIG>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG(uint8_t arg)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(CONFIG_ADR, arg);
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	4619      	mov	r1, r3
 80076e6:	2000      	movs	r0, #0
 80076e8:	f000 fcf2 	bl	80080d0 <nrfport_writeByte>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <NRF_setEN_AA>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA(uint8_t arg)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_AA_ADR, arg);
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	4619      	mov	r1, r3
 8007702:	2001      	movs	r0, #1
 8007704:	f000 fce4 	bl	80080d0 <nrfport_writeByte>
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <NRF_setEN_RXADDR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR(uint8_t arg)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_RXADDR_ADR, arg);
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	4619      	mov	r1, r3
 800771e:	2002      	movs	r0, #2
 8007720:	f000 fcd6 	bl	80080d0 <nrfport_writeByte>
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <NRF_setSETUP_AW>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW(uint8_t arg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_AW_ADR, arg);
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	4619      	mov	r1, r3
 800773a:	2003      	movs	r0, #3
 800773c:	f000 fcc8 	bl	80080d0 <nrfport_writeByte>
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <NRF_setSETUP_RETR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR(uint8_t arg)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_RETR_ADR, arg);
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	4619      	mov	r1, r3
 8007756:	2004      	movs	r0, #4
 8007758:	f000 fcba 	bl	80080d0 <nrfport_writeByte>
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <NRF_setRF_CH>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH(uint8_t arg)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_CH_ADR, arg);
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	4619      	mov	r1, r3
 8007772:	2005      	movs	r0, #5
 8007774:	f000 fcac 	bl	80080d0 <nrfport_writeByte>
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <NRF_setRF_SETUP>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP(uint8_t arg)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_SETUP_ADR, arg);
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	4619      	mov	r1, r3
 800778e:	2006      	movs	r0, #6
 8007790:	f000 fc9e 	bl	80080d0 <nrfport_writeByte>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <NRF_setSTATUS>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS(uint8_t arg)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(STATUS_ADR, arg);
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	4619      	mov	r1, r3
 80077aa:	2007      	movs	r0, #7
 80077ac:	f000 fc90 	bl	80080d0 <nrfport_writeByte>
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <NRF_setRX_ADDR_P0>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0(uint8_t* arg, uint32_t lng)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d921      	bls.n	800780c <NRF_setRX_ADDR_P0+0x54>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d81e      	bhi.n	800780c <NRF_setRX_ADDR_P0+0x54>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01b      	beq.n	800780c <NRF_setRX_ADDR_P0+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	2300      	movs	r3, #0
 80077da:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 80077dc:	2300      	movs	r3, #0
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	2300      	movs	r3, #0
 80077e2:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 80077e4:	f107 0310 	add.w	r3, r7, #16
 80077e8:	3301      	adds	r3, #1
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fdbe 	bl	8008370 <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 80077f4:	232a      	movs	r3, #42	; 0x2a
 80077f6:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fc39 	bl	800807c <nrfport_spiTransaction>
 800780a:	e000      	b.n	800780e <NRF_setRX_ADDR_P0+0x56>
		return;
 800780c:	bf00      	nop
}
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <NRF_setTX_ADDR>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR(uint8_t* arg, uint32_t lng)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d921      	bls.n	8007868 <NRF_setTX_ADDR+0x54>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d81e      	bhi.n	8007868 <NRF_setTX_ADDR+0x54>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01b      	beq.n	8007868 <NRF_setTX_ADDR+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	2300      	movs	r3, #0
 8007836:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	2300      	movs	r3, #0
 800783e:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8007840:	f107 0310 	add.w	r3, r7, #16
 8007844:	3301      	adds	r3, #1
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fd90 	bl	8008370 <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 8007850:	2330      	movs	r3, #48	; 0x30
 8007852:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	f107 0310 	add.w	r3, r7, #16
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fc0b 	bl	800807c <nrfport_spiTransaction>
 8007866:	e000      	b.n	800786a <NRF_setTX_ADDR+0x56>
		return;
 8007868:	bf00      	nop
}
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <NRF_setDYNPD>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD(uint8_t arg)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(DYNPD_ADR, arg);
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	4619      	mov	r1, r3
 800787e:	201c      	movs	r0, #28
 8007880:	f000 fc26 	bl	80080d0 <nrfport_writeByte>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <NRF_setFEATURE>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE(uint8_t arg)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(FEATURE_ADR, arg);
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	4619      	mov	r1, r3
 800789a:	201d      	movs	r0, #29
 800789c:	f000 fc18 	bl	80080d0 <nrfport_writeByte>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <NRF_getR_RX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b094      	sub	sp, #80	; 0x50
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d029      	beq.n	800790c <NRF_getR_RX_PAYLOAD+0x64>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d826      	bhi.n	800790c <NRF_getR_RX_PAYLOAD+0x64>

	uint8_t tx[33] = {0};
 80078be:	2300      	movs	r3, #0
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078c6:	221d      	movs	r2, #29
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fd5e 	bl	800838c <memset>
	uint8_t rx[33] = {0};
 80078d0:	2300      	movs	r3, #0
 80078d2:	60bb      	str	r3, [r7, #8]
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	221d      	movs	r2, #29
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fd55 	bl	800838c <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 80078e2:	2361      	movs	r3, #97	; 0x61
 80078e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction(tx, rx, lng + 1);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fbc1 	bl	800807c <nrfport_spiTransaction>
	memcpy(arg, rx + 1, lng);
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	3301      	adds	r3, #1
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fd33 	bl	8008370 <memcpy>
 800790a:	e000      	b.n	800790e <NRF_getR_RX_PAYLOAD+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 800790c:	bf00      	nop
}
 800790e:	3750      	adds	r7, #80	; 0x50
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <NRF_setW_TX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_setW_TX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b094      	sub	sp, #80	; 0x50
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b20      	cmp	r3, #32
 8007922:	d829      	bhi.n	8007978 <NRF_setW_TX_PAYLOAD+0x64>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d026      	beq.n	8007978 <NRF_setW_TX_PAYLOAD+0x64>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 800792a:	2300      	movs	r3, #0
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800792e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007932:	221d      	movs	r2, #29
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fd28 	bl	800838c <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 800793c:	2300      	movs	r3, #0
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	221d      	movs	r2, #29
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fd1f 	bl	800838c <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD;
 800794e:	23a0      	movs	r3, #160	; 0xa0
 8007950:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	memcpy(tx+1, arg, lng);
 8007954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007958:	3301      	adds	r3, #1
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fd06 	bl	8008370 <memcpy>
	nrfport_spiTransaction(tx, rx, lng+1);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	f107 0108 	add.w	r1, r7, #8
 800796c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fb83 	bl	800807c <nrfport_spiTransaction>
 8007976:	e000      	b.n	800797a <NRF_setW_TX_PAYLOAD+0x66>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 8007978:	bf00      	nop
}
 800797a:	3750      	adds	r7, #80	; 0x50
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <NRF_setFLUSH_TX>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 8007986:	23e1      	movs	r3, #225	; 0xe1
 8007988:	71fb      	strb	r3, [r7, #7]
 800798a:	2300      	movs	r3, #0
 800798c:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 800798e:	1db9      	adds	r1, r7, #6
 8007990:	1dfb      	adds	r3, r7, #7
 8007992:	2201      	movs	r2, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fb71 	bl	800807c <nrfport_spiTransaction>
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <NRF_setFLUSH_RX>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX(void)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 80079a8:	23e2      	movs	r3, #226	; 0xe2
 80079aa:	71fb      	strb	r3, [r7, #7]
 80079ac:	2300      	movs	r3, #0
 80079ae:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 80079b0:	1db9      	adds	r1, r7, #6
 80079b2:	1dfb      	adds	r3, r7, #7
 80079b4:	2201      	movs	r2, #1
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fb60 	bl	800807c <nrfport_spiTransaction>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <NRF_getR_RX_PL_WID>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	return nrfport_readByte(CMD_R_RX_PL_WID);
 80079c8:	2060      	movs	r0, #96	; 0x60
 80079ca:	f000 fba0 	bl	800810e <nrfport_readByte>
 80079ce:	4603      	mov	r3, r0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <NRF_getIRQ>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
	return nrfport_getIRQ();
 80079d8:	f000 fbe2 	bl	80081a0 <nrfport_getIRQ>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <NRF_CEactivate>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate(void)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	af00      	add	r7, sp, #0
	nrfport_ceHigh();
 80079e6:	f000 fbab 	bl	8008140 <nrfport_ceHigh>
}
 80079ea:	bf00      	nop
 80079ec:	bd80      	pop	{r7, pc}

080079ee <NRF_CEdeactivate>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate(void)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	af00      	add	r7, sp, #0
	nrfport_ceLow();
 80079f2:	f000 fbb1 	bl	8008158 <nrfport_ceLow>
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}

080079fa <NRF_powerUp>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp(void)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	af00      	add	r7, sp, #0
	nrfport_powerUp();
 80079fe:	f000 fbb7 	bl	8008170 <nrfport_powerUp>
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <NRF_powerDown>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown(void)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	af00      	add	r7, sp, #0
	nrfport_powerDown();
 8007a0a:	f000 fbbd 	bl	8008188 <nrfport_powerDown>
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <NRF_postProcess>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess(uint8_t pipe, uint8_t* rxBuff)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	4603      	mov	r3, r0
 8007a1a:	6039      	str	r1, [r7, #0]
 8007a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 8007a26:	23ff      	movs	r3, #255	; 0xff
 8007a28:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS();
 8007a2a:	f7ff fe4d 	bl	80076c8 <NRF_getSTATUS>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 8007a32:	7b3b      	ldrb	r3, [r7, #12]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <NRF_postProcess+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	f043 0310 	orr.w	r3, r3, #16
 8007a42:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 8007a44:	7b3b      	ldrb	r3, [r7, #12]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <NRF_postProcess+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 8007a56:	7b3b      	ldrb	r3, [r7, #12]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <NRF_postProcess+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	f043 0320 	orr.w	r3, r3, #32
 8007a66:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 8007a68:	23ff      	movs	r3, #255	; 0xff
 8007a6a:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 8007a6c:	7b3b      	ldrb	r3, [r7, #12]
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <NRF_postProcess+0x92>
	{
		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 8007a76:	7b3b      	ldrb	r3, [r7, #12]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 8007a7c:	f003 0306 	and.w	r3, r3, #6
 8007a80:	737b      	strb	r3, [r7, #13]
	  if(rPipe == pipe)
 8007a82:	7b7a      	ldrb	r2, [r7, #13]
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d10c      	bne.n	8007aa4 <NRF_postProcess+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID();
 8007a8a:	f7ff ff9b 	bl	80079c4 <NRF_getR_RX_PL_WID>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD(rxBuff, rxBytes);
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6838      	ldr	r0, [r7, #0]
 8007a98:	f7ff ff06 	bl	80078a8 <NRF_getR_RX_PAYLOAD>
		  wStatus |= (1 << RX_DR);
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa2:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <NRF_postProcess+0xae>
	{
		NRF_setSTATUS(wStatus);
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fe75 	bl	800779c <NRF_setSTATUS>
		if(rStatus & (1 << MAX_RT))
 8007ab2:	7b3b      	ldrb	r3, [r7, #12]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <NRF_postProcess+0xae>
		{
			NRF_setFLUSH_TX();
 8007abc:	f7ff ff60 	bl	8007980 <NRF_setFLUSH_TX>
		}
	}
	return rxBytes;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <NRF_powerCycle>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle(void (*msDelay)(uint32_t))
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown();
 8007ad6:	f7ff ff96 	bl	8007a06 <NRF_powerDown>
	  msDelay(100);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2064      	movs	r0, #100	; 0x64
 8007ade:	4798      	blx	r3
	  NRF_powerUp();
 8007ae0:	f7ff ff8b 	bl	80079fa <NRF_powerUp>
	  msDelay(100);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2064      	movs	r0, #100	; 0x64
 8007ae8:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS();
 8007aea:	f7ff fded 	bl	80076c8 <NRF_getSTATUS>
 8007aee:	4603      	mov	r3, r0
 8007af0:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2064      	movs	r0, #100	; 0x64
 8007afc:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b0e      	cmp	r3, #14
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	bf94      	ite	ls
 8007b10:	2301      	movls	r3, #1
 8007b12:	2300      	movhi	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <NRF_powerCycle+0x20>


	  return (uint32_t)status;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <NRF_configure_B>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure_B(bool ptx_nprx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 8007b32:	230f      	movs	r3, #15
 8007b34:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 8007b36:	230e      	movs	r3, #14
 8007b38:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 8007b3e:	2301      	movs	r3, #1
 8007b40:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 8007b42:	2303      	movs	r3, #3
 8007b44:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 8007b46:	23ff      	movs	r3, #255	; 0xff
 8007b48:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 8007b4e:	230e      	movs	r3, #14
 8007b50:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 8007b52:	2371      	movs	r3, #113	; 0x71
 8007b54:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 8007b56:	2301      	movs	r3, #1
 8007b58:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 8007b5a:	2306      	movs	r3, #6
 8007b5c:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 8007b5e:	4a2b      	ldr	r2, [pc, #172]	; (8007c0c <NRF_configure_B+0xe4>)
 8007b60:	f107 0310 	add.w	r3, r7, #16
 8007b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b68:	6018      	str	r0, [r3, #0]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 8007b6e:	4a27      	ldr	r2, [pc, #156]	; (8007c0c <NRF_configure_B+0xe4>)
 8007b70:	f107 0308 	add.w	r3, r7, #8
 8007b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b78:	6018      	str	r0, [r3, #0]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <NRF_configure_B+0x66>
	{
		NRF_setCONFIG_B(config_ptx);
 8007b84:	7fbb      	ldrb	r3, [r7, #30]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f84a 	bl	8007c20 <NRF_setCONFIG_B>
 8007b8c:	e003      	b.n	8007b96 <NRF_configure_B+0x6e>
	}
	else
	{
		NRF_setCONFIG_B(config_prx);
 8007b8e:	7ffb      	ldrb	r3, [r7, #31]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f845 	bl	8007c20 <NRF_setCONFIG_B>
	}

	NRF_setEN_AA_B(en_aa);
 8007b96:	7f7b      	ldrb	r3, [r7, #29]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f84f 	bl	8007c3c <NRF_setEN_AA_B>
	NRF_setEN_RXADDR_B(en_rxaddr);
 8007b9e:	7f3b      	ldrb	r3, [r7, #28]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f859 	bl	8007c58 <NRF_setEN_RXADDR_B>
	NRF_setSETUP_AW_B(setup_aw);
 8007ba6:	7efb      	ldrb	r3, [r7, #27]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f863 	bl	8007c74 <NRF_setSETUP_AW_B>
	NRF_setSETUP_RETR_B(setup_retr);
 8007bae:	7ebb      	ldrb	r3, [r7, #26]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f86d 	bl	8007c90 <NRF_setSETUP_RETR_B>
	NRF_setRF_CH_B(rf_ch);
 8007bb6:	7e7b      	ldrb	r3, [r7, #25]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f877 	bl	8007cac <NRF_setRF_CH_B>
	NRF_setRF_SETUP_B(rf_setup);
 8007bbe:	7e3b      	ldrb	r3, [r7, #24]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f881 	bl	8007cc8 <NRF_setRF_SETUP_B>
	NRF_setSTATUS_B(status);
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f88b 	bl	8007ce4 <NRF_setSTATUS_B>
	NRF_setDYNPD_B(dynpd);
 8007bce:	7dbb      	ldrb	r3, [r7, #22]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f8f1 	bl	8007db8 <NRF_setDYNPD_B>
	NRF_setFEATURE_B(feature);
 8007bd6:	7d7b      	ldrb	r3, [r7, #21]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 f8fb 	bl	8007dd4 <NRF_setFEATURE_B>

	if(ptx_nprx)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <NRF_configure_B+0xc8>
	{
		NRF_setTX_ADDR_B((uint8_t*)tx_adr, NRF_ADR_MAX);
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	2105      	movs	r1, #5
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f8b6 	bl	8007d5c <NRF_setTX_ADDR_B>
	}

	NRF_setRX_ADDR_P0_B((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	2105      	movs	r1, #5
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f882 	bl	8007d00 <NRF_setRX_ADDR_P0_B>

	NRF_setFLUSH_RX_B();
 8007bfc:	f000 f93f 	bl	8007e7e <NRF_setFLUSH_RX_B>
	NRF_setFLUSH_TX_B();
 8007c00:	f000 f92c 	bl	8007e5c <NRF_setFLUSH_TX_B>
}
 8007c04:	bf00      	nop
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	0800971c 	.word	0x0800971c

08007c10 <NRF_getSTATUS_B>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS_B(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(STATUS_ADR);
 8007c14:	2007      	movs	r0, #7
 8007c16:	f000 fb22 	bl	800825e <nrfport_readByte_B>
 8007c1a:	4603      	mov	r3, r0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <NRF_setCONFIG_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG_B(uint8_t arg)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(CONFIG_ADR, arg);
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f000 faf6 	bl	8008220 <nrfport_writeByte_B>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <NRF_setEN_AA_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA_B(uint8_t arg)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_AA_ADR, arg);
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	f000 fae8 	bl	8008220 <nrfport_writeByte_B>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <NRF_setEN_RXADDR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR_B(uint8_t arg)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_RXADDR_ADR, arg);
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	4619      	mov	r1, r3
 8007c66:	2002      	movs	r0, #2
 8007c68:	f000 fada 	bl	8008220 <nrfport_writeByte_B>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <NRF_setSETUP_AW_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW_B(uint8_t arg)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_AW_ADR, arg);
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4619      	mov	r1, r3
 8007c82:	2003      	movs	r0, #3
 8007c84:	f000 facc 	bl	8008220 <nrfport_writeByte_B>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <NRF_setSETUP_RETR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR_B(uint8_t arg)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_RETR_ADR, arg);
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	2004      	movs	r0, #4
 8007ca0:	f000 fabe 	bl	8008220 <nrfport_writeByte_B>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <NRF_setRF_CH_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH_B(uint8_t arg)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_CH_ADR, arg);
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2005      	movs	r0, #5
 8007cbc:	f000 fab0 	bl	8008220 <nrfport_writeByte_B>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <NRF_setRF_SETUP_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP_B(uint8_t arg)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_SETUP_ADR, arg);
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	2006      	movs	r0, #6
 8007cd8:	f000 faa2 	bl	8008220 <nrfport_writeByte_B>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <NRF_setSTATUS_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS_B(uint8_t arg)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(STATUS_ADR, arg);
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2007      	movs	r0, #7
 8007cf4:	f000 fa94 	bl	8008220 <nrfport_writeByte_B>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <NRF_setRX_ADDR_P0_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0_B(uint8_t* arg, uint32_t lng)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d921      	bls.n	8007d54 <NRF_setRX_ADDR_P0_B+0x54>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d81e      	bhi.n	8007d54 <NRF_setRX_ADDR_P0_B+0x54>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01b      	beq.n	8007d54 <NRF_setRX_ADDR_P0_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	2300      	movs	r3, #0
 8007d22:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8007d2c:	f107 0310 	add.w	r3, r7, #16
 8007d30:	3301      	adds	r3, #1
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fb1a 	bl	8008370 <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 8007d3c:	232a      	movs	r3, #42	; 0x2a
 8007d3e:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	f107 0310 	add.w	r3, r7, #16
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fa3d 	bl	80081cc <nrfport_spiTransaction_B>
 8007d52:	e000      	b.n	8007d56 <NRF_setRX_ADDR_P0_B+0x56>
		return;
 8007d54:	bf00      	nop
}
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <NRF_setTX_ADDR_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR_B(uint8_t* arg, uint32_t lng)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d921      	bls.n	8007db0 <NRF_setTX_ADDR_B+0x54>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	d81e      	bhi.n	8007db0 <NRF_setTX_ADDR_B+0x54>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01b      	beq.n	8007db0 <NRF_setTX_ADDR_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8007d80:	2300      	movs	r3, #0
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	2300      	movs	r3, #0
 8007d86:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8007d88:	f107 0310 	add.w	r3, r7, #16
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 faec 	bl	8008370 <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 8007d98:	2330      	movs	r3, #48	; 0x30
 8007d9a:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fa0f 	bl	80081cc <nrfport_spiTransaction_B>
 8007dae:	e000      	b.n	8007db2 <NRF_setTX_ADDR_B+0x56>
		return;
 8007db0:	bf00      	nop
}
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <NRF_setDYNPD_B>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD_B(uint8_t arg)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(DYNPD_ADR, arg);
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	201c      	movs	r0, #28
 8007dc8:	f000 fa2a 	bl	8008220 <nrfport_writeByte_B>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <NRF_setFEATURE_B>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE_B(uint8_t arg)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(FEATURE_ADR, arg);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4619      	mov	r1, r3
 8007de2:	201d      	movs	r0, #29
 8007de4:	f000 fa1c 	bl	8008220 <nrfport_writeByte_B>
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <NRF_getR_RX_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD_B(uint8_t* arg, uint32_t lng)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b094      	sub	sp, #80	; 0x50
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d029      	beq.n	8007e54 <NRF_getR_RX_PAYLOAD_B+0x64>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d826      	bhi.n	8007e54 <NRF_getR_RX_PAYLOAD_B+0x64>

	uint8_t tx[33] = {0};
 8007e06:	2300      	movs	r3, #0
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e0e:	221d      	movs	r2, #29
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 faba 	bl	800838c <memset>
	uint8_t rx[33] = {0};
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	221d      	movs	r2, #29
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fab1 	bl	800838c <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 8007e2a:	2361      	movs	r3, #97	; 0x61
 8007e2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f9c5 	bl	80081cc <nrfport_spiTransaction_B>
	memcpy(arg, rx + 1, lng);
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	3301      	adds	r3, #1
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fa8f 	bl	8008370 <memcpy>
 8007e52:	e000      	b.n	8007e56 <NRF_getR_RX_PAYLOAD_B+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8007e54:	bf00      	nop
}
 8007e56:	3750      	adds	r7, #80	; 0x50
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <NRF_setFLUSH_TX_B>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX_B(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 8007e62:	23e1      	movs	r3, #225	; 0xe1
 8007e64:	71fb      	strb	r3, [r7, #7]
 8007e66:	2300      	movs	r3, #0
 8007e68:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 8007e6a:	1db9      	adds	r1, r7, #6
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f9ab 	bl	80081cc <nrfport_spiTransaction_B>
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <NRF_setFLUSH_RX_B>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX_B(void)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 8007e84:	23e2      	movs	r3, #226	; 0xe2
 8007e86:	71fb      	strb	r3, [r7, #7]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 8007e8c:	1db9      	adds	r1, r7, #6
 8007e8e:	1dfb      	adds	r3, r7, #7
 8007e90:	2201      	movs	r2, #1
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f99a 	bl	80081cc <nrfport_spiTransaction_B>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <NRF_getR_RX_PL_WID_B>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID_B(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(CMD_R_RX_PL_WID);
 8007ea4:	2060      	movs	r0, #96	; 0x60
 8007ea6:	f000 f9da 	bl	800825e <nrfport_readByte_B>
 8007eaa:	4603      	mov	r3, r0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <NRF_set_W_ACK_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_set_W_ACK_PAYLOAD_B(uint8_t pipe, uint8_t* arg, uint32_t lng)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b096      	sub	sp, #88	; 0x58
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	73fb      	strb	r3, [r7, #15]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d82c      	bhi.n	8007f1e <NRF_set_W_ACK_PAYLOAD_B+0x6e>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d029      	beq.n	8007f1e <NRF_set_W_ACK_PAYLOAD_B+0x6e>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 8007eca:	2300      	movs	r3, #0
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ed2:	221d      	movs	r2, #29
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fa58 	bl	800838c <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	f107 0314 	add.w	r3, r7, #20
 8007ee4:	221d      	movs	r2, #29
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fa4f 	bl	800838c <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD|pipe;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	memcpy(tx+1, arg, lng);
 8007efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007efe:	3301      	adds	r3, #1
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fa33 	bl	8008370 <memcpy>
	nrfport_spiTransaction_B(tx, rx, lng+1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	f107 0110 	add.w	r1, r7, #16
 8007f12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f958 	bl	80081cc <nrfport_spiTransaction_B>
 8007f1c:	e000      	b.n	8007f20 <NRF_set_W_ACK_PAYLOAD_B+0x70>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 8007f1e:	bf00      	nop
}
 8007f20:	3758      	adds	r7, #88	; 0x58
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <NRF_getIRQ_B>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ_B(void)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	af00      	add	r7, sp, #0
	return nrfport_getIRQ_B();
 8007f2a:	f000 f9e1 	bl	80082f0 <nrfport_getIRQ_B>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <NRF_CEactivate_B>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate_B(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
	nrfport_ceHigh_B();
 8007f38:	f000 f9aa 	bl	8008290 <nrfport_ceHigh_B>
}
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <NRF_CEdeactivate_B>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate_B(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
	nrfport_ceLow_B();
 8007f44:	f000 f9b0 	bl	80082a8 <nrfport_ceLow_B>
}
 8007f48:	bf00      	nop
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <NRF_powerUp_B>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp_B(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
	nrfport_powerUp_B();
 8007f50:	f000 f9b6 	bl	80082c0 <nrfport_powerUp_B>
}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <NRF_powerDown_B>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown_B(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
	nrfport_powerDown_B();
 8007f5c:	f000 f9bc 	bl	80082d8 <nrfport_powerDown_B>
}
 8007f60:	bf00      	nop
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <NRF_postProcess_B>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess_B(uint8_t pipe, uint8_t* rxBuff)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 8007f78:	23ff      	movs	r3, #255	; 0xff
 8007f7a:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS_B();
 8007f7c:	f7ff fe48 	bl	8007c10 <NRF_getSTATUS_B>
 8007f80:	4603      	mov	r3, r0
 8007f82:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 8007f84:	7b3b      	ldrb	r3, [r7, #12]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <NRF_postProcess_B+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	f043 0310 	orr.w	r3, r3, #16
 8007f94:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 8007f96:	7b3b      	ldrb	r3, [r7, #12]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <NRF_postProcess_B+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 8007fa8:	7b3b      	ldrb	r3, [r7, #12]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <NRF_postProcess_B+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	f043 0320 	orr.w	r3, r3, #32
 8007fb8:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 8007fba:	23ff      	movs	r3, #255	; 0xff
 8007fbc:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 8007fbe:	7b3b      	ldrb	r3, [r7, #12]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <NRF_postProcess_B+0x92>
	{

		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 8007fc8:	7b3b      	ldrb	r3, [r7, #12]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 8007fce:	f003 0306 	and.w	r3, r3, #6
 8007fd2:	737b      	strb	r3, [r7, #13]
	  if(pipe == rPipe)
 8007fd4:	79fa      	ldrb	r2, [r7, #7]
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d10c      	bne.n	8007ff6 <NRF_postProcess_B+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID_B();
 8007fdc:	f7ff ff60 	bl	8007ea0 <NRF_getR_RX_PL_WID_B>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD_B(rxBuff, rxBytes);
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6838      	ldr	r0, [r7, #0]
 8007fea:	f7ff ff01 	bl	8007df0 <NRF_getR_RX_PAYLOAD_B>
		  wStatus |= (1 << RX_DR);
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff4:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <NRF_postProcess_B+0xae>
	{
		NRF_setSTATUS_B(wStatus);
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fe70 	bl	8007ce4 <NRF_setSTATUS_B>
		if(rStatus & (1 << MAX_RT))
 8008004:	7b3b      	ldrb	r3, [r7, #12]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <NRF_postProcess_B+0xae>
		{
			NRF_setFLUSH_TX_B();
 800800e:	f7ff ff25 	bl	8007e5c <NRF_setFLUSH_TX_B>
		}
	}
	return rxBytes;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <NRF_powerCycle_B>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle_B(void (*msDelay)(uint32_t))
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown_B();
 8008028:	f7ff ff96 	bl	8007f58 <NRF_powerDown_B>
	  msDelay(100);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2064      	movs	r0, #100	; 0x64
 8008030:	4798      	blx	r3
	  NRF_powerUp_B();
 8008032:	f7ff ff8b 	bl	8007f4c <NRF_powerUp_B>
	  msDelay(100);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2064      	movs	r0, #100	; 0x64
 800803a:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS_B();
 800803c:	f7ff fde8 	bl	8007c10 <NRF_getSTATUS_B>
 8008040:	4603      	mov	r3, r0
 8008042:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	2b0e      	cmp	r3, #14
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2da      	uxtb	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b03      	cmp	r3, #3
 8008060:	bf94      	ite	ls
 8008062:	2301      	movls	r3, #1
 8008064:	2300      	movhi	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e5      	bne.n	800803c <NRF_powerCycle_B+0x20>


	  return (uint32_t)status;
 8008070:	7afb      	ldrb	r3, [r7, #11]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <nrfport_spiTransaction>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d017      	beq.n	80080be <nrfport_spiTransaction+0x42>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <nrfport_spiTransaction+0x42>

	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_RESET);
 8008094:	2200      	movs	r2, #0
 8008096:	2104      	movs	r1, #4
 8008098:	480b      	ldr	r0, [pc, #44]	; (80080c8 <nrfport_spiTransaction+0x4c>)
 800809a:	f7fb fc85 	bl	80039a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	9200      	str	r2, [sp, #0]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	4807      	ldr	r0, [pc, #28]	; (80080cc <nrfport_spiTransaction+0x50>)
 80080ae:	f7fc ffa0 	bl	8004ff2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_SET);
 80080b2:	2201      	movs	r2, #1
 80080b4:	2104      	movs	r1, #4
 80080b6:	4804      	ldr	r0, [pc, #16]	; (80080c8 <nrfport_spiTransaction+0x4c>)
 80080b8:	f7fb fc76 	bl	80039a8 <HAL_GPIO_WritePin>
 80080bc:	e000      	b.n	80080c0 <nrfport_spiTransaction+0x44>
	if(NULL == tx || NULL == rx) return;
 80080be:	bf00      	nop
}
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40020400 	.word	0x40020400
 80080cc:	2000023c 	.word	0x2000023c

080080d0 <nrfport_writeByte>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte(uint8_t adr, uint8_t data)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	460a      	mov	r2, r1
 80080da:	71fb      	strb	r3, [r7, #7]
 80080dc:	4613      	mov	r3, r2
 80080de:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 80080e0:	2300      	movs	r3, #0
 80080e2:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 80080e4:	2300      	movs	r3, #0
 80080e6:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	f043 0320 	orr.w	r3, r3, #32
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 80080f2:	79bb      	ldrb	r3, [r7, #6]
 80080f4:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction(tx, rx, WR_BYTE_LNG);
 80080f6:	f107 010c 	add.w	r1, r7, #12
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	2202      	movs	r2, #2
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff ffbb 	bl	800807c <nrfport_spiTransaction>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <nrfport_readByte>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte(uint8_t adr)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	4603      	mov	r3, r0
 8008116:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8008118:	2300      	movs	r3, #0
 800811a:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 800811c:	2300      	movs	r3, #0
 800811e:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction(tx, rx, RD_BYTE_LNG);
 8008124:	f107 010c 	add.w	r1, r7, #12
 8008128:	f107 0308 	add.w	r3, r7, #8
 800812c:	2202      	movs	r2, #2
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff ffa4 	bl	800807c <nrfport_spiTransaction>

	return rx[RD_BYTE_PLD];
 8008134:	7b7b      	ldrb	r3, [r7, #13]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <nrfport_ceHigh>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_SET);
 8008144:	2201      	movs	r2, #1
 8008146:	2110      	movs	r1, #16
 8008148:	4802      	ldr	r0, [pc, #8]	; (8008154 <nrfport_ceHigh+0x14>)
 800814a:	f7fb fc2d 	bl	80039a8 <HAL_GPIO_WritePin>
}
 800814e:	bf00      	nop
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40021400 	.word	0x40021400

08008158 <nrfport_ceLow>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 800815c:	2200      	movs	r2, #0
 800815e:	2110      	movs	r1, #16
 8008160:	4802      	ldr	r0, [pc, #8]	; (800816c <nrfport_ceLow+0x14>)
 8008162:	f7fb fc21 	bl	80039a8 <HAL_GPIO_WritePin>
}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40021400 	.word	0x40021400

08008170 <nrfport_powerUp>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_RESET);
 8008174:	2200      	movs	r2, #0
 8008176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800817a:	4802      	ldr	r0, [pc, #8]	; (8008184 <nrfport_powerUp+0x14>)
 800817c:	f7fb fc14 	bl	80039a8 <HAL_GPIO_WritePin>
}
 8008180:	bf00      	nop
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40020400 	.word	0x40020400

08008188 <nrfport_powerDown>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_SET);
 800818c:	2201      	movs	r2, #1
 800818e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008192:	4802      	ldr	r0, [pc, #8]	; (800819c <nrfport_powerDown+0x14>)
 8008194:	f7fb fc08 	bl	80039a8 <HAL_GPIO_WritePin>
}
 8008198:	bf00      	nop
 800819a:	bd80      	pop	{r7, pc}
 800819c:	40020400 	.word	0x40020400

080081a0 <nrfport_getIRQ>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF1_IRQ_GPIO_Port, NRF1_IRQ_Pin)) ? 1 : 0;
 80081a6:	2140      	movs	r1, #64	; 0x40
 80081a8:	4807      	ldr	r0, [pc, #28]	; (80081c8 <nrfport_getIRQ+0x28>)
 80081aa:	f7fb fbe5 	bl	8003978 <HAL_GPIO_ReadPin>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf0c      	ite	eq
 80081b4:	2301      	moveq	r3, #1
 80081b6:	2300      	movne	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 80081bc:	79fb      	ldrb	r3, [r7, #7]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40020400 	.word	0x40020400

080081cc <nrfport_spiTransaction_B>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction_B(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d017      	beq.n	800820e <nrfport_spiTransaction_B+0x42>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d014      	beq.n	800820e <nrfport_spiTransaction_B+0x42>

	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_RESET);
 80081e4:	2200      	movs	r2, #0
 80081e6:	2102      	movs	r1, #2
 80081e8:	480b      	ldr	r0, [pc, #44]	; (8008218 <nrfport_spiTransaction_B+0x4c>)
 80081ea:	f7fb fbdd 	bl	80039a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	9200      	str	r2, [sp, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	4807      	ldr	r0, [pc, #28]	; (800821c <nrfport_spiTransaction_B+0x50>)
 80081fe:	f7fc fef8 	bl	8004ff2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_SET);
 8008202:	2201      	movs	r2, #1
 8008204:	2102      	movs	r1, #2
 8008206:	4804      	ldr	r0, [pc, #16]	; (8008218 <nrfport_spiTransaction_B+0x4c>)
 8008208:	f7fb fbce 	bl	80039a8 <HAL_GPIO_WritePin>
 800820c:	e000      	b.n	8008210 <nrfport_spiTransaction_B+0x44>
	if(NULL == tx || NULL == rx) return;
 800820e:	bf00      	nop
}
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40020400 	.word	0x40020400
 800821c:	2000023c 	.word	0x2000023c

08008220 <nrfport_writeByte_B>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte_B(uint8_t adr, uint8_t data)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	460a      	mov	r2, r1
 800822a:	71fb      	strb	r3, [r7, #7]
 800822c:	4613      	mov	r3, r2
 800822e:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 8008230:	2300      	movs	r3, #0
 8008232:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 8008234:	2300      	movs	r3, #0
 8008236:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	f043 0320 	orr.w	r3, r3, #32
 800823e:	b2db      	uxtb	r3, r3
 8008240:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 8008242:	79bb      	ldrb	r3, [r7, #6]
 8008244:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 8008246:	f107 010c 	add.w	r1, r7, #12
 800824a:	f107 0308 	add.w	r3, r7, #8
 800824e:	2202      	movs	r2, #2
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff ffbb 	bl	80081cc <nrfport_spiTransaction_B>
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <nrfport_readByte_B>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte_B(uint8_t adr)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	4603      	mov	r3, r0
 8008266:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8008268:	2300      	movs	r3, #0
 800826a:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 800826c:	2300      	movs	r3, #0
 800826e:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 8008274:	f107 010c 	add.w	r1, r7, #12
 8008278:	f107 0308 	add.w	r3, r7, #8
 800827c:	2202      	movs	r2, #2
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ffa4 	bl	80081cc <nrfport_spiTransaction_B>

	return rx[RD_BYTE_PLD];
 8008284:	7b7b      	ldrb	r3, [r7, #13]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <nrfport_ceHigh_B>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh_B(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_SET);
 8008294:	2201      	movs	r2, #1
 8008296:	2140      	movs	r1, #64	; 0x40
 8008298:	4802      	ldr	r0, [pc, #8]	; (80082a4 <nrfport_ceHigh_B+0x14>)
 800829a:	f7fb fb85 	bl	80039a8 <HAL_GPIO_WritePin>
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40020800 	.word	0x40020800

080082a8 <nrfport_ceLow_B>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow_B(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 80082ac:	2200      	movs	r2, #0
 80082ae:	2140      	movs	r1, #64	; 0x40
 80082b0:	4802      	ldr	r0, [pc, #8]	; (80082bc <nrfport_ceLow_B+0x14>)
 80082b2:	f7fb fb79 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80082b6:	bf00      	nop
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	40020800 	.word	0x40020800

080082c0 <nrfport_powerUp_B>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp_B(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_RESET);
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ca:	4802      	ldr	r0, [pc, #8]	; (80082d4 <nrfport_powerUp_B+0x14>)
 80082cc:	f7fb fb6c 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80082d0:	bf00      	nop
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40020400 	.word	0x40020400

080082d8 <nrfport_powerDown_B>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown_B(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_SET);
 80082dc:	2201      	movs	r2, #1
 80082de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082e2:	4802      	ldr	r0, [pc, #8]	; (80082ec <nrfport_powerDown_B+0x14>)
 80082e4:	f7fb fb60 	bl	80039a8 <HAL_GPIO_WritePin>
}
 80082e8:	bf00      	nop
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40020400 	.word	0x40020400

080082f0 <nrfport_getIRQ_B>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ_B(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF2_IRQ_GPIO_Port, NRF2_IRQ_Pin)) ? 1 : 0;
 80082f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082fa:	4807      	ldr	r0, [pc, #28]	; (8008318 <nrfport_getIRQ_B+0x28>)
 80082fc:	f7fb fb3c 	bl	8003978 <HAL_GPIO_ReadPin>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf0c      	ite	eq
 8008306:	2301      	moveq	r3, #1
 8008308:	2300      	movne	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 800830e:	79fb      	ldrb	r3, [r7, #7]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40020400 	.word	0x40020400

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	; (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	2000000c 	.word	0x2000000c

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f001 f9be 	bl	80096bc <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	080097e4 	.word	0x080097e4
 8008364:	080097e4 	.word	0x080097e4
 8008368:	080097e4 	.word	0x080097e4
 800836c:	080097e8 	.word	0x080097e8

08008370 <memcpy>:
 8008370:	440a      	add	r2, r1
 8008372:	4291      	cmp	r1, r2
 8008374:	f100 33ff 	add.w	r3, r0, #4294967295
 8008378:	d100      	bne.n	800837c <memcpy+0xc>
 800837a:	4770      	bx	lr
 800837c:	b510      	push	{r4, lr}
 800837e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008386:	4291      	cmp	r1, r2
 8008388:	d1f9      	bne.n	800837e <memcpy+0xe>
 800838a:	bd10      	pop	{r4, pc}

0800838c <memset>:
 800838c:	4402      	add	r2, r0
 800838e:	4603      	mov	r3, r0
 8008390:	4293      	cmp	r3, r2
 8008392:	d100      	bne.n	8008396 <memset+0xa>
 8008394:	4770      	bx	lr
 8008396:	f803 1b01 	strb.w	r1, [r3], #1
 800839a:	e7f9      	b.n	8008390 <memset+0x4>

0800839c <iprintf>:
 800839c:	b40f      	push	{r0, r1, r2, r3}
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <iprintf+0x2c>)
 80083a0:	b513      	push	{r0, r1, r4, lr}
 80083a2:	681c      	ldr	r4, [r3, #0]
 80083a4:	b124      	cbz	r4, 80083b0 <iprintf+0x14>
 80083a6:	69a3      	ldr	r3, [r4, #24]
 80083a8:	b913      	cbnz	r3, 80083b0 <iprintf+0x14>
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fa7e 	bl	80088ac <__sinit>
 80083b0:	ab05      	add	r3, sp, #20
 80083b2:	9a04      	ldr	r2, [sp, #16]
 80083b4:	68a1      	ldr	r1, [r4, #8]
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fdab 	bl	8008f14 <_vfiprintf_r>
 80083be:	b002      	add	sp, #8
 80083c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c4:	b004      	add	sp, #16
 80083c6:	4770      	bx	lr
 80083c8:	2000000c 	.word	0x2000000c

080083cc <_puts_r>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4605      	mov	r5, r0
 80083d2:	b118      	cbz	r0, 80083dc <_puts_r+0x10>
 80083d4:	6983      	ldr	r3, [r0, #24]
 80083d6:	b90b      	cbnz	r3, 80083dc <_puts_r+0x10>
 80083d8:	f000 fa68 	bl	80088ac <__sinit>
 80083dc:	69ab      	ldr	r3, [r5, #24]
 80083de:	68ac      	ldr	r4, [r5, #8]
 80083e0:	b913      	cbnz	r3, 80083e8 <_puts_r+0x1c>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fa62 	bl	80088ac <__sinit>
 80083e8:	4b2c      	ldr	r3, [pc, #176]	; (800849c <_puts_r+0xd0>)
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d120      	bne.n	8008430 <_puts_r+0x64>
 80083ee:	686c      	ldr	r4, [r5, #4]
 80083f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d405      	bmi.n	8008402 <_puts_r+0x36>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	0598      	lsls	r0, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_puts_r+0x36>
 80083fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083fe:	f000 faf3 	bl	80089e8 <__retarget_lock_acquire_recursive>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	0719      	lsls	r1, r3, #28
 8008406:	d51d      	bpl.n	8008444 <_puts_r+0x78>
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	b1db      	cbz	r3, 8008444 <_puts_r+0x78>
 800840c:	3e01      	subs	r6, #1
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008414:	3b01      	subs	r3, #1
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	bb39      	cbnz	r1, 800846a <_puts_r+0x9e>
 800841a:	2b00      	cmp	r3, #0
 800841c:	da38      	bge.n	8008490 <_puts_r+0xc4>
 800841e:	4622      	mov	r2, r4
 8008420:	210a      	movs	r1, #10
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f868 	bl	80084f8 <__swbuf_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d011      	beq.n	8008450 <_puts_r+0x84>
 800842c:	250a      	movs	r5, #10
 800842e:	e011      	b.n	8008454 <_puts_r+0x88>
 8008430:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <_puts_r+0xd4>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <_puts_r+0x6e>
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	e7da      	b.n	80083f0 <_puts_r+0x24>
 800843a:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <_puts_r+0xd8>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68ec      	ldreq	r4, [r5, #12]
 8008442:	e7d5      	b.n	80083f0 <_puts_r+0x24>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f8a8 	bl	800859c <__swsetup_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0dd      	beq.n	800840c <_puts_r+0x40>
 8008450:	f04f 35ff 	mov.w	r5, #4294967295
 8008454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008456:	07da      	lsls	r2, r3, #31
 8008458:	d405      	bmi.n	8008466 <_puts_r+0x9a>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	059b      	lsls	r3, r3, #22
 800845e:	d402      	bmi.n	8008466 <_puts_r+0x9a>
 8008460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008462:	f000 fac2 	bl	80089ea <__retarget_lock_release_recursive>
 8008466:	4628      	mov	r0, r5
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	2b00      	cmp	r3, #0
 800846c:	da04      	bge.n	8008478 <_puts_r+0xac>
 800846e:	69a2      	ldr	r2, [r4, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	dc06      	bgt.n	8008482 <_puts_r+0xb6>
 8008474:	290a      	cmp	r1, #10
 8008476:	d004      	beq.n	8008482 <_puts_r+0xb6>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	7019      	strb	r1, [r3, #0]
 8008480:	e7c5      	b.n	800840e <_puts_r+0x42>
 8008482:	4622      	mov	r2, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f000 f837 	bl	80084f8 <__swbuf_r>
 800848a:	3001      	adds	r0, #1
 800848c:	d1bf      	bne.n	800840e <_puts_r+0x42>
 800848e:	e7df      	b.n	8008450 <_puts_r+0x84>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	250a      	movs	r5, #10
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	701d      	strb	r5, [r3, #0]
 800849a:	e7db      	b.n	8008454 <_puts_r+0x88>
 800849c:	08009768 	.word	0x08009768
 80084a0:	08009788 	.word	0x08009788
 80084a4:	08009748 	.word	0x08009748

080084a8 <puts>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <puts+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff bf8d 	b.w	80083cc <_puts_r>
 80084b2:	bf00      	nop
 80084b4:	2000000c 	.word	0x2000000c

080084b8 <siprintf>:
 80084b8:	b40e      	push	{r1, r2, r3}
 80084ba:	b500      	push	{lr}
 80084bc:	b09c      	sub	sp, #112	; 0x70
 80084be:	ab1d      	add	r3, sp, #116	; 0x74
 80084c0:	9002      	str	r0, [sp, #8]
 80084c2:	9006      	str	r0, [sp, #24]
 80084c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <siprintf+0x38>)
 80084ca:	9107      	str	r1, [sp, #28]
 80084cc:	9104      	str	r1, [sp, #16]
 80084ce:	4909      	ldr	r1, [pc, #36]	; (80084f4 <siprintf+0x3c>)
 80084d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d4:	9105      	str	r1, [sp, #20]
 80084d6:	6800      	ldr	r0, [r0, #0]
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	a902      	add	r1, sp, #8
 80084dc:	f000 fbf0 	bl	8008cc0 <_svfiprintf_r>
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	b01c      	add	sp, #112	; 0x70
 80084e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ec:	b003      	add	sp, #12
 80084ee:	4770      	bx	lr
 80084f0:	2000000c 	.word	0x2000000c
 80084f4:	ffff0208 	.word	0xffff0208

080084f8 <__swbuf_r>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	460e      	mov	r6, r1
 80084fc:	4614      	mov	r4, r2
 80084fe:	4605      	mov	r5, r0
 8008500:	b118      	cbz	r0, 800850a <__swbuf_r+0x12>
 8008502:	6983      	ldr	r3, [r0, #24]
 8008504:	b90b      	cbnz	r3, 800850a <__swbuf_r+0x12>
 8008506:	f000 f9d1 	bl	80088ac <__sinit>
 800850a:	4b21      	ldr	r3, [pc, #132]	; (8008590 <__swbuf_r+0x98>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d12b      	bne.n	8008568 <__swbuf_r+0x70>
 8008510:	686c      	ldr	r4, [r5, #4]
 8008512:	69a3      	ldr	r3, [r4, #24]
 8008514:	60a3      	str	r3, [r4, #8]
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	071a      	lsls	r2, r3, #28
 800851a:	d52f      	bpl.n	800857c <__swbuf_r+0x84>
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	b36b      	cbz	r3, 800857c <__swbuf_r+0x84>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	1ac0      	subs	r0, r0, r3
 8008526:	6963      	ldr	r3, [r4, #20]
 8008528:	b2f6      	uxtb	r6, r6
 800852a:	4283      	cmp	r3, r0
 800852c:	4637      	mov	r7, r6
 800852e:	dc04      	bgt.n	800853a <__swbuf_r+0x42>
 8008530:	4621      	mov	r1, r4
 8008532:	4628      	mov	r0, r5
 8008534:	f000 f926 	bl	8008784 <_fflush_r>
 8008538:	bb30      	cbnz	r0, 8008588 <__swbuf_r+0x90>
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	3b01      	subs	r3, #1
 800853e:	60a3      	str	r3, [r4, #8]
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	6022      	str	r2, [r4, #0]
 8008546:	701e      	strb	r6, [r3, #0]
 8008548:	6963      	ldr	r3, [r4, #20]
 800854a:	3001      	adds	r0, #1
 800854c:	4283      	cmp	r3, r0
 800854e:	d004      	beq.n	800855a <__swbuf_r+0x62>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	07db      	lsls	r3, r3, #31
 8008554:	d506      	bpl.n	8008564 <__swbuf_r+0x6c>
 8008556:	2e0a      	cmp	r6, #10
 8008558:	d104      	bne.n	8008564 <__swbuf_r+0x6c>
 800855a:	4621      	mov	r1, r4
 800855c:	4628      	mov	r0, r5
 800855e:	f000 f911 	bl	8008784 <_fflush_r>
 8008562:	b988      	cbnz	r0, 8008588 <__swbuf_r+0x90>
 8008564:	4638      	mov	r0, r7
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <__swbuf_r+0x9c>)
 800856a:	429c      	cmp	r4, r3
 800856c:	d101      	bne.n	8008572 <__swbuf_r+0x7a>
 800856e:	68ac      	ldr	r4, [r5, #8]
 8008570:	e7cf      	b.n	8008512 <__swbuf_r+0x1a>
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <__swbuf_r+0xa0>)
 8008574:	429c      	cmp	r4, r3
 8008576:	bf08      	it	eq
 8008578:	68ec      	ldreq	r4, [r5, #12]
 800857a:	e7ca      	b.n	8008512 <__swbuf_r+0x1a>
 800857c:	4621      	mov	r1, r4
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f80c 	bl	800859c <__swsetup_r>
 8008584:	2800      	cmp	r0, #0
 8008586:	d0cb      	beq.n	8008520 <__swbuf_r+0x28>
 8008588:	f04f 37ff 	mov.w	r7, #4294967295
 800858c:	e7ea      	b.n	8008564 <__swbuf_r+0x6c>
 800858e:	bf00      	nop
 8008590:	08009768 	.word	0x08009768
 8008594:	08009788 	.word	0x08009788
 8008598:	08009748 	.word	0x08009748

0800859c <__swsetup_r>:
 800859c:	4b32      	ldr	r3, [pc, #200]	; (8008668 <__swsetup_r+0xcc>)
 800859e:	b570      	push	{r4, r5, r6, lr}
 80085a0:	681d      	ldr	r5, [r3, #0]
 80085a2:	4606      	mov	r6, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	b125      	cbz	r5, 80085b2 <__swsetup_r+0x16>
 80085a8:	69ab      	ldr	r3, [r5, #24]
 80085aa:	b913      	cbnz	r3, 80085b2 <__swsetup_r+0x16>
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f97d 	bl	80088ac <__sinit>
 80085b2:	4b2e      	ldr	r3, [pc, #184]	; (800866c <__swsetup_r+0xd0>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	d10f      	bne.n	80085d8 <__swsetup_r+0x3c>
 80085b8:	686c      	ldr	r4, [r5, #4]
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085c0:	0719      	lsls	r1, r3, #28
 80085c2:	d42c      	bmi.n	800861e <__swsetup_r+0x82>
 80085c4:	06dd      	lsls	r5, r3, #27
 80085c6:	d411      	bmi.n	80085ec <__swsetup_r+0x50>
 80085c8:	2309      	movs	r3, #9
 80085ca:	6033      	str	r3, [r6, #0]
 80085cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085d0:	81a3      	strh	r3, [r4, #12]
 80085d2:	f04f 30ff 	mov.w	r0, #4294967295
 80085d6:	e03e      	b.n	8008656 <__swsetup_r+0xba>
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <__swsetup_r+0xd4>)
 80085da:	429c      	cmp	r4, r3
 80085dc:	d101      	bne.n	80085e2 <__swsetup_r+0x46>
 80085de:	68ac      	ldr	r4, [r5, #8]
 80085e0:	e7eb      	b.n	80085ba <__swsetup_r+0x1e>
 80085e2:	4b24      	ldr	r3, [pc, #144]	; (8008674 <__swsetup_r+0xd8>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	bf08      	it	eq
 80085e8:	68ec      	ldreq	r4, [r5, #12]
 80085ea:	e7e6      	b.n	80085ba <__swsetup_r+0x1e>
 80085ec:	0758      	lsls	r0, r3, #29
 80085ee:	d512      	bpl.n	8008616 <__swsetup_r+0x7a>
 80085f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f2:	b141      	cbz	r1, 8008606 <__swsetup_r+0x6a>
 80085f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085f8:	4299      	cmp	r1, r3
 80085fa:	d002      	beq.n	8008602 <__swsetup_r+0x66>
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 fa59 	bl	8008ab4 <_free_r>
 8008602:	2300      	movs	r3, #0
 8008604:	6363      	str	r3, [r4, #52]	; 0x34
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	2300      	movs	r3, #0
 8008610:	6063      	str	r3, [r4, #4]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	f043 0308 	orr.w	r3, r3, #8
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	b94b      	cbnz	r3, 8008636 <__swsetup_r+0x9a>
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800862c:	d003      	beq.n	8008636 <__swsetup_r+0x9a>
 800862e:	4621      	mov	r1, r4
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f9ff 	bl	8008a34 <__smakebuf_r>
 8008636:	89a0      	ldrh	r0, [r4, #12]
 8008638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800863c:	f010 0301 	ands.w	r3, r0, #1
 8008640:	d00a      	beq.n	8008658 <__swsetup_r+0xbc>
 8008642:	2300      	movs	r3, #0
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	6963      	ldr	r3, [r4, #20]
 8008648:	425b      	negs	r3, r3
 800864a:	61a3      	str	r3, [r4, #24]
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b943      	cbnz	r3, 8008662 <__swsetup_r+0xc6>
 8008650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008654:	d1ba      	bne.n	80085cc <__swsetup_r+0x30>
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	0781      	lsls	r1, r0, #30
 800865a:	bf58      	it	pl
 800865c:	6963      	ldrpl	r3, [r4, #20]
 800865e:	60a3      	str	r3, [r4, #8]
 8008660:	e7f4      	b.n	800864c <__swsetup_r+0xb0>
 8008662:	2000      	movs	r0, #0
 8008664:	e7f7      	b.n	8008656 <__swsetup_r+0xba>
 8008666:	bf00      	nop
 8008668:	2000000c 	.word	0x2000000c
 800866c:	08009768 	.word	0x08009768
 8008670:	08009788 	.word	0x08009788
 8008674:	08009748 	.word	0x08009748

08008678 <__sflush_r>:
 8008678:	898a      	ldrh	r2, [r1, #12]
 800867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	4605      	mov	r5, r0
 8008680:	0710      	lsls	r0, r2, #28
 8008682:	460c      	mov	r4, r1
 8008684:	d458      	bmi.n	8008738 <__sflush_r+0xc0>
 8008686:	684b      	ldr	r3, [r1, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc05      	bgt.n	8008698 <__sflush_r+0x20>
 800868c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	dc02      	bgt.n	8008698 <__sflush_r+0x20>
 8008692:	2000      	movs	r0, #0
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800869a:	2e00      	cmp	r6, #0
 800869c:	d0f9      	beq.n	8008692 <__sflush_r+0x1a>
 800869e:	2300      	movs	r3, #0
 80086a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086a4:	682f      	ldr	r7, [r5, #0]
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	d032      	beq.n	8008710 <__sflush_r+0x98>
 80086aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	075a      	lsls	r2, r3, #29
 80086b0:	d505      	bpl.n	80086be <__sflush_r+0x46>
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	1ac0      	subs	r0, r0, r3
 80086b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086b8:	b10b      	cbz	r3, 80086be <__sflush_r+0x46>
 80086ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086bc:	1ac0      	subs	r0, r0, r3
 80086be:	2300      	movs	r3, #0
 80086c0:	4602      	mov	r2, r0
 80086c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086c4:	6a21      	ldr	r1, [r4, #32]
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b0      	blx	r6
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	d106      	bne.n	80086de <__sflush_r+0x66>
 80086d0:	6829      	ldr	r1, [r5, #0]
 80086d2:	291d      	cmp	r1, #29
 80086d4:	d82c      	bhi.n	8008730 <__sflush_r+0xb8>
 80086d6:	4a2a      	ldr	r2, [pc, #168]	; (8008780 <__sflush_r+0x108>)
 80086d8:	40ca      	lsrs	r2, r1
 80086da:	07d6      	lsls	r6, r2, #31
 80086dc:	d528      	bpl.n	8008730 <__sflush_r+0xb8>
 80086de:	2200      	movs	r2, #0
 80086e0:	6062      	str	r2, [r4, #4]
 80086e2:	04d9      	lsls	r1, r3, #19
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	d504      	bpl.n	80086f4 <__sflush_r+0x7c>
 80086ea:	1c42      	adds	r2, r0, #1
 80086ec:	d101      	bne.n	80086f2 <__sflush_r+0x7a>
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	b903      	cbnz	r3, 80086f4 <__sflush_r+0x7c>
 80086f2:	6560      	str	r0, [r4, #84]	; 0x54
 80086f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f6:	602f      	str	r7, [r5, #0]
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d0ca      	beq.n	8008692 <__sflush_r+0x1a>
 80086fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008700:	4299      	cmp	r1, r3
 8008702:	d002      	beq.n	800870a <__sflush_r+0x92>
 8008704:	4628      	mov	r0, r5
 8008706:	f000 f9d5 	bl	8008ab4 <_free_r>
 800870a:	2000      	movs	r0, #0
 800870c:	6360      	str	r0, [r4, #52]	; 0x34
 800870e:	e7c1      	b.n	8008694 <__sflush_r+0x1c>
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	2301      	movs	r3, #1
 8008714:	4628      	mov	r0, r5
 8008716:	47b0      	blx	r6
 8008718:	1c41      	adds	r1, r0, #1
 800871a:	d1c7      	bne.n	80086ac <__sflush_r+0x34>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c4      	beq.n	80086ac <__sflush_r+0x34>
 8008722:	2b1d      	cmp	r3, #29
 8008724:	d001      	beq.n	800872a <__sflush_r+0xb2>
 8008726:	2b16      	cmp	r3, #22
 8008728:	d101      	bne.n	800872e <__sflush_r+0xb6>
 800872a:	602f      	str	r7, [r5, #0]
 800872c:	e7b1      	b.n	8008692 <__sflush_r+0x1a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	e7ad      	b.n	8008694 <__sflush_r+0x1c>
 8008738:	690f      	ldr	r7, [r1, #16]
 800873a:	2f00      	cmp	r7, #0
 800873c:	d0a9      	beq.n	8008692 <__sflush_r+0x1a>
 800873e:	0793      	lsls	r3, r2, #30
 8008740:	680e      	ldr	r6, [r1, #0]
 8008742:	bf08      	it	eq
 8008744:	694b      	ldreq	r3, [r1, #20]
 8008746:	600f      	str	r7, [r1, #0]
 8008748:	bf18      	it	ne
 800874a:	2300      	movne	r3, #0
 800874c:	eba6 0807 	sub.w	r8, r6, r7
 8008750:	608b      	str	r3, [r1, #8]
 8008752:	f1b8 0f00 	cmp.w	r8, #0
 8008756:	dd9c      	ble.n	8008692 <__sflush_r+0x1a>
 8008758:	6a21      	ldr	r1, [r4, #32]
 800875a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800875c:	4643      	mov	r3, r8
 800875e:	463a      	mov	r2, r7
 8008760:	4628      	mov	r0, r5
 8008762:	47b0      	blx	r6
 8008764:	2800      	cmp	r0, #0
 8008766:	dc06      	bgt.n	8008776 <__sflush_r+0xfe>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	e78e      	b.n	8008694 <__sflush_r+0x1c>
 8008776:	4407      	add	r7, r0
 8008778:	eba8 0800 	sub.w	r8, r8, r0
 800877c:	e7e9      	b.n	8008752 <__sflush_r+0xda>
 800877e:	bf00      	nop
 8008780:	20400001 	.word	0x20400001

08008784 <_fflush_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	4605      	mov	r5, r0
 800878a:	460c      	mov	r4, r1
 800878c:	b913      	cbnz	r3, 8008794 <_fflush_r+0x10>
 800878e:	2500      	movs	r5, #0
 8008790:	4628      	mov	r0, r5
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	b118      	cbz	r0, 800879e <_fflush_r+0x1a>
 8008796:	6983      	ldr	r3, [r0, #24]
 8008798:	b90b      	cbnz	r3, 800879e <_fflush_r+0x1a>
 800879a:	f000 f887 	bl	80088ac <__sinit>
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <_fflush_r+0x6c>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d11b      	bne.n	80087dc <_fflush_r+0x58>
 80087a4:	686c      	ldr	r4, [r5, #4]
 80087a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <_fflush_r+0xa>
 80087ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087b0:	07d0      	lsls	r0, r2, #31
 80087b2:	d404      	bmi.n	80087be <_fflush_r+0x3a>
 80087b4:	0599      	lsls	r1, r3, #22
 80087b6:	d402      	bmi.n	80087be <_fflush_r+0x3a>
 80087b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ba:	f000 f915 	bl	80089e8 <__retarget_lock_acquire_recursive>
 80087be:	4628      	mov	r0, r5
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7ff ff59 	bl	8008678 <__sflush_r>
 80087c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087c8:	07da      	lsls	r2, r3, #31
 80087ca:	4605      	mov	r5, r0
 80087cc:	d4e0      	bmi.n	8008790 <_fflush_r+0xc>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	059b      	lsls	r3, r3, #22
 80087d2:	d4dd      	bmi.n	8008790 <_fflush_r+0xc>
 80087d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d6:	f000 f908 	bl	80089ea <__retarget_lock_release_recursive>
 80087da:	e7d9      	b.n	8008790 <_fflush_r+0xc>
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <_fflush_r+0x70>)
 80087de:	429c      	cmp	r4, r3
 80087e0:	d101      	bne.n	80087e6 <_fflush_r+0x62>
 80087e2:	68ac      	ldr	r4, [r5, #8]
 80087e4:	e7df      	b.n	80087a6 <_fflush_r+0x22>
 80087e6:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <_fflush_r+0x74>)
 80087e8:	429c      	cmp	r4, r3
 80087ea:	bf08      	it	eq
 80087ec:	68ec      	ldreq	r4, [r5, #12]
 80087ee:	e7da      	b.n	80087a6 <_fflush_r+0x22>
 80087f0:	08009768 	.word	0x08009768
 80087f4:	08009788 	.word	0x08009788
 80087f8:	08009748 	.word	0x08009748

080087fc <std>:
 80087fc:	2300      	movs	r3, #0
 80087fe:	b510      	push	{r4, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	e9c0 3300 	strd	r3, r3, [r0]
 8008806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800880a:	6083      	str	r3, [r0, #8]
 800880c:	8181      	strh	r1, [r0, #12]
 800880e:	6643      	str	r3, [r0, #100]	; 0x64
 8008810:	81c2      	strh	r2, [r0, #14]
 8008812:	6183      	str	r3, [r0, #24]
 8008814:	4619      	mov	r1, r3
 8008816:	2208      	movs	r2, #8
 8008818:	305c      	adds	r0, #92	; 0x5c
 800881a:	f7ff fdb7 	bl	800838c <memset>
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <std+0x38>)
 8008820:	6263      	str	r3, [r4, #36]	; 0x24
 8008822:	4b05      	ldr	r3, [pc, #20]	; (8008838 <std+0x3c>)
 8008824:	62a3      	str	r3, [r4, #40]	; 0x28
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <std+0x40>)
 8008828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <std+0x44>)
 800882c:	6224      	str	r4, [r4, #32]
 800882e:	6323      	str	r3, [r4, #48]	; 0x30
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	080094bd 	.word	0x080094bd
 8008838:	080094df 	.word	0x080094df
 800883c:	08009517 	.word	0x08009517
 8008840:	0800953b 	.word	0x0800953b

08008844 <_cleanup_r>:
 8008844:	4901      	ldr	r1, [pc, #4]	; (800884c <_cleanup_r+0x8>)
 8008846:	f000 b8af 	b.w	80089a8 <_fwalk_reent>
 800884a:	bf00      	nop
 800884c:	08008785 	.word	0x08008785

08008850 <__sfmoreglue>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	1e4a      	subs	r2, r1, #1
 8008854:	2568      	movs	r5, #104	; 0x68
 8008856:	4355      	muls	r5, r2
 8008858:	460e      	mov	r6, r1
 800885a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800885e:	f000 f979 	bl	8008b54 <_malloc_r>
 8008862:	4604      	mov	r4, r0
 8008864:	b140      	cbz	r0, 8008878 <__sfmoreglue+0x28>
 8008866:	2100      	movs	r1, #0
 8008868:	e9c0 1600 	strd	r1, r6, [r0]
 800886c:	300c      	adds	r0, #12
 800886e:	60a0      	str	r0, [r4, #8]
 8008870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008874:	f7ff fd8a 	bl	800838c <memset>
 8008878:	4620      	mov	r0, r4
 800887a:	bd70      	pop	{r4, r5, r6, pc}

0800887c <__sfp_lock_acquire>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__sfp_lock_acquire+0x8>)
 800887e:	f000 b8b3 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	200004f8 	.word	0x200004f8

08008888 <__sfp_lock_release>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_release+0x8>)
 800888a:	f000 b8ae 	b.w	80089ea <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	200004f8 	.word	0x200004f8

08008894 <__sinit_lock_acquire>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sinit_lock_acquire+0x8>)
 8008896:	f000 b8a7 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	200004f3 	.word	0x200004f3

080088a0 <__sinit_lock_release>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__sinit_lock_release+0x8>)
 80088a2:	f000 b8a2 	b.w	80089ea <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	200004f3 	.word	0x200004f3

080088ac <__sinit>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4604      	mov	r4, r0
 80088b0:	f7ff fff0 	bl	8008894 <__sinit_lock_acquire>
 80088b4:	69a3      	ldr	r3, [r4, #24]
 80088b6:	b11b      	cbz	r3, 80088c0 <__sinit+0x14>
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f7ff bff0 	b.w	80088a0 <__sinit_lock_release>
 80088c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088c4:	6523      	str	r3, [r4, #80]	; 0x50
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <__sinit+0x68>)
 80088c8:	4a13      	ldr	r2, [pc, #76]	; (8008918 <__sinit+0x6c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	bf04      	itt	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	61a3      	streq	r3, [r4, #24]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f820 	bl	800891c <__sfp>
 80088dc:	6060      	str	r0, [r4, #4]
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f81c 	bl	800891c <__sfp>
 80088e4:	60a0      	str	r0, [r4, #8]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 f818 	bl	800891c <__sfp>
 80088ec:	2200      	movs	r2, #0
 80088ee:	60e0      	str	r0, [r4, #12]
 80088f0:	2104      	movs	r1, #4
 80088f2:	6860      	ldr	r0, [r4, #4]
 80088f4:	f7ff ff82 	bl	80087fc <std>
 80088f8:	68a0      	ldr	r0, [r4, #8]
 80088fa:	2201      	movs	r2, #1
 80088fc:	2109      	movs	r1, #9
 80088fe:	f7ff ff7d 	bl	80087fc <std>
 8008902:	68e0      	ldr	r0, [r4, #12]
 8008904:	2202      	movs	r2, #2
 8008906:	2112      	movs	r1, #18
 8008908:	f7ff ff78 	bl	80087fc <std>
 800890c:	2301      	movs	r3, #1
 800890e:	61a3      	str	r3, [r4, #24]
 8008910:	e7d2      	b.n	80088b8 <__sinit+0xc>
 8008912:	bf00      	nop
 8008914:	08009744 	.word	0x08009744
 8008918:	08008845 	.word	0x08008845

0800891c <__sfp>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	4607      	mov	r7, r0
 8008920:	f7ff ffac 	bl	800887c <__sfp_lock_acquire>
 8008924:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <__sfp+0x84>)
 8008926:	681e      	ldr	r6, [r3, #0]
 8008928:	69b3      	ldr	r3, [r6, #24]
 800892a:	b913      	cbnz	r3, 8008932 <__sfp+0x16>
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff ffbd 	bl	80088ac <__sinit>
 8008932:	3648      	adds	r6, #72	; 0x48
 8008934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008938:	3b01      	subs	r3, #1
 800893a:	d503      	bpl.n	8008944 <__sfp+0x28>
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	b30b      	cbz	r3, 8008984 <__sfp+0x68>
 8008940:	6836      	ldr	r6, [r6, #0]
 8008942:	e7f7      	b.n	8008934 <__sfp+0x18>
 8008944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008948:	b9d5      	cbnz	r5, 8008980 <__sfp+0x64>
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <__sfp+0x88>)
 800894c:	60e3      	str	r3, [r4, #12]
 800894e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008952:	6665      	str	r5, [r4, #100]	; 0x64
 8008954:	f000 f847 	bl	80089e6 <__retarget_lock_init_recursive>
 8008958:	f7ff ff96 	bl	8008888 <__sfp_lock_release>
 800895c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008964:	6025      	str	r5, [r4, #0]
 8008966:	61a5      	str	r5, [r4, #24]
 8008968:	2208      	movs	r2, #8
 800896a:	4629      	mov	r1, r5
 800896c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008970:	f7ff fd0c 	bl	800838c <memset>
 8008974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800897c:	4620      	mov	r0, r4
 800897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008980:	3468      	adds	r4, #104	; 0x68
 8008982:	e7d9      	b.n	8008938 <__sfp+0x1c>
 8008984:	2104      	movs	r1, #4
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff ff62 	bl	8008850 <__sfmoreglue>
 800898c:	4604      	mov	r4, r0
 800898e:	6030      	str	r0, [r6, #0]
 8008990:	2800      	cmp	r0, #0
 8008992:	d1d5      	bne.n	8008940 <__sfp+0x24>
 8008994:	f7ff ff78 	bl	8008888 <__sfp_lock_release>
 8008998:	230c      	movs	r3, #12
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	e7ee      	b.n	800897c <__sfp+0x60>
 800899e:	bf00      	nop
 80089a0:	08009744 	.word	0x08009744
 80089a4:	ffff0001 	.word	0xffff0001

080089a8 <_fwalk_reent>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4606      	mov	r6, r0
 80089ae:	4688      	mov	r8, r1
 80089b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089b4:	2700      	movs	r7, #0
 80089b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ba:	f1b9 0901 	subs.w	r9, r9, #1
 80089be:	d505      	bpl.n	80089cc <_fwalk_reent+0x24>
 80089c0:	6824      	ldr	r4, [r4, #0]
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d1f7      	bne.n	80089b6 <_fwalk_reent+0xe>
 80089c6:	4638      	mov	r0, r7
 80089c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d907      	bls.n	80089e2 <_fwalk_reent+0x3a>
 80089d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089d6:	3301      	adds	r3, #1
 80089d8:	d003      	beq.n	80089e2 <_fwalk_reent+0x3a>
 80089da:	4629      	mov	r1, r5
 80089dc:	4630      	mov	r0, r6
 80089de:	47c0      	blx	r8
 80089e0:	4307      	orrs	r7, r0
 80089e2:	3568      	adds	r5, #104	; 0x68
 80089e4:	e7e9      	b.n	80089ba <_fwalk_reent+0x12>

080089e6 <__retarget_lock_init_recursive>:
 80089e6:	4770      	bx	lr

080089e8 <__retarget_lock_acquire_recursive>:
 80089e8:	4770      	bx	lr

080089ea <__retarget_lock_release_recursive>:
 80089ea:	4770      	bx	lr

080089ec <__swhatbuf_r>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	460e      	mov	r6, r1
 80089f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f4:	2900      	cmp	r1, #0
 80089f6:	b096      	sub	sp, #88	; 0x58
 80089f8:	4614      	mov	r4, r2
 80089fa:	461d      	mov	r5, r3
 80089fc:	da07      	bge.n	8008a0e <__swhatbuf_r+0x22>
 80089fe:	2300      	movs	r3, #0
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	89b3      	ldrh	r3, [r6, #12]
 8008a04:	061a      	lsls	r2, r3, #24
 8008a06:	d410      	bmi.n	8008a2a <__swhatbuf_r+0x3e>
 8008a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0c:	e00e      	b.n	8008a2c <__swhatbuf_r+0x40>
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f000 fdba 	bl	8009588 <_fstat_r>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	dbf2      	blt.n	80089fe <__swhatbuf_r+0x12>
 8008a18:	9a01      	ldr	r2, [sp, #4]
 8008a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a22:	425a      	negs	r2, r3
 8008a24:	415a      	adcs	r2, r3
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	e7ee      	b.n	8008a08 <__swhatbuf_r+0x1c>
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	b016      	add	sp, #88	; 0x58
 8008a32:	bd70      	pop	{r4, r5, r6, pc}

08008a34 <__smakebuf_r>:
 8008a34:	898b      	ldrh	r3, [r1, #12]
 8008a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a38:	079d      	lsls	r5, r3, #30
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	d507      	bpl.n	8008a50 <__smakebuf_r+0x1c>
 8008a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	2301      	movs	r3, #1
 8008a4a:	6163      	str	r3, [r4, #20]
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	ab01      	add	r3, sp, #4
 8008a52:	466a      	mov	r2, sp
 8008a54:	f7ff ffca 	bl	80089ec <__swhatbuf_r>
 8008a58:	9900      	ldr	r1, [sp, #0]
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f879 	bl	8008b54 <_malloc_r>
 8008a62:	b948      	cbnz	r0, 8008a78 <__smakebuf_r+0x44>
 8008a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a68:	059a      	lsls	r2, r3, #22
 8008a6a:	d4ef      	bmi.n	8008a4c <__smakebuf_r+0x18>
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	f043 0302 	orr.w	r3, r3, #2
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	e7e3      	b.n	8008a40 <__smakebuf_r+0xc>
 8008a78:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <__smakebuf_r+0x7c>)
 8008a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	6020      	str	r0, [r4, #0]
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	6163      	str	r3, [r4, #20]
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	6120      	str	r0, [r4, #16]
 8008a8e:	b15b      	cbz	r3, 8008aa8 <__smakebuf_r+0x74>
 8008a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a94:	4630      	mov	r0, r6
 8008a96:	f000 fd89 	bl	80095ac <_isatty_r>
 8008a9a:	b128      	cbz	r0, 8008aa8 <__smakebuf_r+0x74>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f023 0303 	bic.w	r3, r3, #3
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	89a0      	ldrh	r0, [r4, #12]
 8008aaa:	4305      	orrs	r5, r0
 8008aac:	81a5      	strh	r5, [r4, #12]
 8008aae:	e7cd      	b.n	8008a4c <__smakebuf_r+0x18>
 8008ab0:	08008845 	.word	0x08008845

08008ab4 <_free_r>:
 8008ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	d048      	beq.n	8008b4c <_free_r+0x98>
 8008aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abe:	9001      	str	r0, [sp, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ac6:	bfb8      	it	lt
 8008ac8:	18e4      	addlt	r4, r4, r3
 8008aca:	f000 fdab 	bl	8009624 <__malloc_lock>
 8008ace:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <_free_r+0x9c>)
 8008ad0:	9801      	ldr	r0, [sp, #4]
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	b933      	cbnz	r3, 8008ae6 <_free_r+0x32>
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	6014      	str	r4, [r2, #0]
 8008adc:	b003      	add	sp, #12
 8008ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ae2:	f000 bda5 	b.w	8009630 <__malloc_unlock>
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	d90b      	bls.n	8008b02 <_free_r+0x4e>
 8008aea:	6821      	ldr	r1, [r4, #0]
 8008aec:	1862      	adds	r2, r4, r1
 8008aee:	4293      	cmp	r3, r2
 8008af0:	bf04      	itt	eq
 8008af2:	681a      	ldreq	r2, [r3, #0]
 8008af4:	685b      	ldreq	r3, [r3, #4]
 8008af6:	6063      	str	r3, [r4, #4]
 8008af8:	bf04      	itt	eq
 8008afa:	1852      	addeq	r2, r2, r1
 8008afc:	6022      	streq	r2, [r4, #0]
 8008afe:	602c      	str	r4, [r5, #0]
 8008b00:	e7ec      	b.n	8008adc <_free_r+0x28>
 8008b02:	461a      	mov	r2, r3
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b10b      	cbz	r3, 8008b0c <_free_r+0x58>
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	d9fa      	bls.n	8008b02 <_free_r+0x4e>
 8008b0c:	6811      	ldr	r1, [r2, #0]
 8008b0e:	1855      	adds	r5, r2, r1
 8008b10:	42a5      	cmp	r5, r4
 8008b12:	d10b      	bne.n	8008b2c <_free_r+0x78>
 8008b14:	6824      	ldr	r4, [r4, #0]
 8008b16:	4421      	add	r1, r4
 8008b18:	1854      	adds	r4, r2, r1
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	d1dd      	bne.n	8008adc <_free_r+0x28>
 8008b20:	681c      	ldr	r4, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	6053      	str	r3, [r2, #4]
 8008b26:	4421      	add	r1, r4
 8008b28:	6011      	str	r1, [r2, #0]
 8008b2a:	e7d7      	b.n	8008adc <_free_r+0x28>
 8008b2c:	d902      	bls.n	8008b34 <_free_r+0x80>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	6003      	str	r3, [r0, #0]
 8008b32:	e7d3      	b.n	8008adc <_free_r+0x28>
 8008b34:	6825      	ldr	r5, [r4, #0]
 8008b36:	1961      	adds	r1, r4, r5
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	bf04      	itt	eq
 8008b3c:	6819      	ldreq	r1, [r3, #0]
 8008b3e:	685b      	ldreq	r3, [r3, #4]
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	bf04      	itt	eq
 8008b44:	1949      	addeq	r1, r1, r5
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	6054      	str	r4, [r2, #4]
 8008b4a:	e7c7      	b.n	8008adc <_free_r+0x28>
 8008b4c:	b003      	add	sp, #12
 8008b4e:	bd30      	pop	{r4, r5, pc}
 8008b50:	20000098 	.word	0x20000098

08008b54 <_malloc_r>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	1ccd      	adds	r5, r1, #3
 8008b58:	f025 0503 	bic.w	r5, r5, #3
 8008b5c:	3508      	adds	r5, #8
 8008b5e:	2d0c      	cmp	r5, #12
 8008b60:	bf38      	it	cc
 8008b62:	250c      	movcc	r5, #12
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	4606      	mov	r6, r0
 8008b68:	db01      	blt.n	8008b6e <_malloc_r+0x1a>
 8008b6a:	42a9      	cmp	r1, r5
 8008b6c:	d903      	bls.n	8008b76 <_malloc_r+0x22>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	2000      	movs	r0, #0
 8008b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b76:	f000 fd55 	bl	8009624 <__malloc_lock>
 8008b7a:	4921      	ldr	r1, [pc, #132]	; (8008c00 <_malloc_r+0xac>)
 8008b7c:	680a      	ldr	r2, [r1, #0]
 8008b7e:	4614      	mov	r4, r2
 8008b80:	b99c      	cbnz	r4, 8008baa <_malloc_r+0x56>
 8008b82:	4f20      	ldr	r7, [pc, #128]	; (8008c04 <_malloc_r+0xb0>)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	b923      	cbnz	r3, 8008b92 <_malloc_r+0x3e>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 fc86 	bl	800949c <_sbrk_r>
 8008b90:	6038      	str	r0, [r7, #0]
 8008b92:	4629      	mov	r1, r5
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 fc81 	bl	800949c <_sbrk_r>
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	d123      	bne.n	8008be6 <_malloc_r+0x92>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	6033      	str	r3, [r6, #0]
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f000 fd44 	bl	8009630 <__malloc_unlock>
 8008ba8:	e7e3      	b.n	8008b72 <_malloc_r+0x1e>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	1b5b      	subs	r3, r3, r5
 8008bae:	d417      	bmi.n	8008be0 <_malloc_r+0x8c>
 8008bb0:	2b0b      	cmp	r3, #11
 8008bb2:	d903      	bls.n	8008bbc <_malloc_r+0x68>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	441c      	add	r4, r3
 8008bb8:	6025      	str	r5, [r4, #0]
 8008bba:	e004      	b.n	8008bc6 <_malloc_r+0x72>
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	42a2      	cmp	r2, r4
 8008bc0:	bf0c      	ite	eq
 8008bc2:	600b      	streq	r3, [r1, #0]
 8008bc4:	6053      	strne	r3, [r2, #4]
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f000 fd32 	bl	8009630 <__malloc_unlock>
 8008bcc:	f104 000b 	add.w	r0, r4, #11
 8008bd0:	1d23      	adds	r3, r4, #4
 8008bd2:	f020 0007 	bic.w	r0, r0, #7
 8008bd6:	1ac2      	subs	r2, r0, r3
 8008bd8:	d0cc      	beq.n	8008b74 <_malloc_r+0x20>
 8008bda:	1a1b      	subs	r3, r3, r0
 8008bdc:	50a3      	str	r3, [r4, r2]
 8008bde:	e7c9      	b.n	8008b74 <_malloc_r+0x20>
 8008be0:	4622      	mov	r2, r4
 8008be2:	6864      	ldr	r4, [r4, #4]
 8008be4:	e7cc      	b.n	8008b80 <_malloc_r+0x2c>
 8008be6:	1cc4      	adds	r4, r0, #3
 8008be8:	f024 0403 	bic.w	r4, r4, #3
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	d0e3      	beq.n	8008bb8 <_malloc_r+0x64>
 8008bf0:	1a21      	subs	r1, r4, r0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f000 fc52 	bl	800949c <_sbrk_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d1dd      	bne.n	8008bb8 <_malloc_r+0x64>
 8008bfc:	e7cf      	b.n	8008b9e <_malloc_r+0x4a>
 8008bfe:	bf00      	nop
 8008c00:	20000098 	.word	0x20000098
 8008c04:	2000009c 	.word	0x2000009c

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	4682      	mov	sl, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4690      	mov	r8, r2
 8008c16:	461f      	mov	r7, r3
 8008c18:	d838      	bhi.n	8008c8c <__ssputs_r+0x84>
 8008c1a:	898a      	ldrh	r2, [r1, #12]
 8008c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c20:	d032      	beq.n	8008c88 <__ssputs_r+0x80>
 8008c22:	6825      	ldr	r5, [r4, #0]
 8008c24:	6909      	ldr	r1, [r1, #16]
 8008c26:	eba5 0901 	sub.w	r9, r5, r1
 8008c2a:	6965      	ldr	r5, [r4, #20]
 8008c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c34:	3301      	adds	r3, #1
 8008c36:	444b      	add	r3, r9
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf38      	it	cc
 8008c3e:	461d      	movcc	r5, r3
 8008c40:	0553      	lsls	r3, r2, #21
 8008c42:	d531      	bpl.n	8008ca8 <__ssputs_r+0xa0>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7ff ff85 	bl	8008b54 <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b950      	cbnz	r0, 8008c64 <__ssputs_r+0x5c>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	f8ca 3000 	str.w	r3, [sl]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c64:	6921      	ldr	r1, [r4, #16]
 8008c66:	464a      	mov	r2, r9
 8008c68:	f7ff fb82 	bl	8008370 <memcpy>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	6126      	str	r6, [r4, #16]
 8008c7a:	6165      	str	r5, [r4, #20]
 8008c7c:	444e      	add	r6, r9
 8008c7e:	eba5 0509 	sub.w	r5, r5, r9
 8008c82:	6026      	str	r6, [r4, #0]
 8008c84:	60a5      	str	r5, [r4, #8]
 8008c86:	463e      	mov	r6, r7
 8008c88:	42be      	cmp	r6, r7
 8008c8a:	d900      	bls.n	8008c8e <__ssputs_r+0x86>
 8008c8c:	463e      	mov	r6, r7
 8008c8e:	4632      	mov	r2, r6
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	4641      	mov	r1, r8
 8008c94:	f000 fcac 	bl	80095f0 <memmove>
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	1b9b      	subs	r3, r3, r6
 8008c9e:	4432      	add	r2, r6
 8008ca0:	60a3      	str	r3, [r4, #8]
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	e7db      	b.n	8008c60 <__ssputs_r+0x58>
 8008ca8:	462a      	mov	r2, r5
 8008caa:	f000 fcc7 	bl	800963c <_realloc_r>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d1e1      	bne.n	8008c78 <__ssputs_r+0x70>
 8008cb4:	6921      	ldr	r1, [r4, #16]
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	f7ff fefc 	bl	8008ab4 <_free_r>
 8008cbc:	e7c7      	b.n	8008c4e <__ssputs_r+0x46>
	...

08008cc0 <_svfiprintf_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	4698      	mov	r8, r3
 8008cc6:	898b      	ldrh	r3, [r1, #12]
 8008cc8:	061b      	lsls	r3, r3, #24
 8008cca:	b09d      	sub	sp, #116	; 0x74
 8008ccc:	4607      	mov	r7, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	d50e      	bpl.n	8008cf2 <_svfiprintf_r+0x32>
 8008cd4:	690b      	ldr	r3, [r1, #16]
 8008cd6:	b963      	cbnz	r3, 8008cf2 <_svfiprintf_r+0x32>
 8008cd8:	2140      	movs	r1, #64	; 0x40
 8008cda:	f7ff ff3b 	bl	8008b54 <_malloc_r>
 8008cde:	6028      	str	r0, [r5, #0]
 8008ce0:	6128      	str	r0, [r5, #16]
 8008ce2:	b920      	cbnz	r0, 8008cee <_svfiprintf_r+0x2e>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e0d1      	b.n	8008e92 <_svfiprintf_r+0x1d2>
 8008cee:	2340      	movs	r3, #64	; 0x40
 8008cf0:	616b      	str	r3, [r5, #20]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf6:	2320      	movs	r3, #32
 8008cf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d00:	2330      	movs	r3, #48	; 0x30
 8008d02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008eac <_svfiprintf_r+0x1ec>
 8008d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d0a:	f04f 0901 	mov.w	r9, #1
 8008d0e:	4623      	mov	r3, r4
 8008d10:	469a      	mov	sl, r3
 8008d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d16:	b10a      	cbz	r2, 8008d1c <_svfiprintf_r+0x5c>
 8008d18:	2a25      	cmp	r2, #37	; 0x25
 8008d1a:	d1f9      	bne.n	8008d10 <_svfiprintf_r+0x50>
 8008d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d20:	d00b      	beq.n	8008d3a <_svfiprintf_r+0x7a>
 8008d22:	465b      	mov	r3, fp
 8008d24:	4622      	mov	r2, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ff6d 	bl	8008c08 <__ssputs_r>
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f000 80aa 	beq.w	8008e88 <_svfiprintf_r+0x1c8>
 8008d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d36:	445a      	add	r2, fp
 8008d38:	9209      	str	r2, [sp, #36]	; 0x24
 8008d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 80a2 	beq.w	8008e88 <_svfiprintf_r+0x1c8>
 8008d44:	2300      	movs	r3, #0
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4e:	f10a 0a01 	add.w	sl, sl, #1
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d5c:	4654      	mov	r4, sl
 8008d5e:	2205      	movs	r2, #5
 8008d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d64:	4851      	ldr	r0, [pc, #324]	; (8008eac <_svfiprintf_r+0x1ec>)
 8008d66:	f7f7 fa6b 	bl	8000240 <memchr>
 8008d6a:	9a04      	ldr	r2, [sp, #16]
 8008d6c:	b9d8      	cbnz	r0, 8008da6 <_svfiprintf_r+0xe6>
 8008d6e:	06d0      	lsls	r0, r2, #27
 8008d70:	bf44      	itt	mi
 8008d72:	2320      	movmi	r3, #32
 8008d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d78:	0711      	lsls	r1, r2, #28
 8008d7a:	bf44      	itt	mi
 8008d7c:	232b      	movmi	r3, #43	; 0x2b
 8008d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d82:	f89a 3000 	ldrb.w	r3, [sl]
 8008d86:	2b2a      	cmp	r3, #42	; 0x2a
 8008d88:	d015      	beq.n	8008db6 <_svfiprintf_r+0xf6>
 8008d8a:	9a07      	ldr	r2, [sp, #28]
 8008d8c:	4654      	mov	r4, sl
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f04f 0c0a 	mov.w	ip, #10
 8008d94:	4621      	mov	r1, r4
 8008d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d9a:	3b30      	subs	r3, #48	; 0x30
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	d94e      	bls.n	8008e3e <_svfiprintf_r+0x17e>
 8008da0:	b1b0      	cbz	r0, 8008dd0 <_svfiprintf_r+0x110>
 8008da2:	9207      	str	r2, [sp, #28]
 8008da4:	e014      	b.n	8008dd0 <_svfiprintf_r+0x110>
 8008da6:	eba0 0308 	sub.w	r3, r0, r8
 8008daa:	fa09 f303 	lsl.w	r3, r9, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	46a2      	mov	sl, r4
 8008db4:	e7d2      	b.n	8008d5c <_svfiprintf_r+0x9c>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	1d19      	adds	r1, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	9103      	str	r1, [sp, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfbb      	ittet	lt
 8008dc2:	425b      	neglt	r3, r3
 8008dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc8:	9307      	strge	r3, [sp, #28]
 8008dca:	9307      	strlt	r3, [sp, #28]
 8008dcc:	bfb8      	it	lt
 8008dce:	9204      	strlt	r2, [sp, #16]
 8008dd0:	7823      	ldrb	r3, [r4, #0]
 8008dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd4:	d10c      	bne.n	8008df0 <_svfiprintf_r+0x130>
 8008dd6:	7863      	ldrb	r3, [r4, #1]
 8008dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dda:	d135      	bne.n	8008e48 <_svfiprintf_r+0x188>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1d1a      	adds	r2, r3, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	9203      	str	r2, [sp, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfb8      	it	lt
 8008de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dec:	3402      	adds	r4, #2
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ebc <_svfiprintf_r+0x1fc>
 8008df4:	7821      	ldrb	r1, [r4, #0]
 8008df6:	2203      	movs	r2, #3
 8008df8:	4650      	mov	r0, sl
 8008dfa:	f7f7 fa21 	bl	8000240 <memchr>
 8008dfe:	b140      	cbz	r0, 8008e12 <_svfiprintf_r+0x152>
 8008e00:	2340      	movs	r3, #64	; 0x40
 8008e02:	eba0 000a 	sub.w	r0, r0, sl
 8008e06:	fa03 f000 	lsl.w	r0, r3, r0
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	4303      	orrs	r3, r0
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e16:	4826      	ldr	r0, [pc, #152]	; (8008eb0 <_svfiprintf_r+0x1f0>)
 8008e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e1c:	2206      	movs	r2, #6
 8008e1e:	f7f7 fa0f 	bl	8000240 <memchr>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d038      	beq.n	8008e98 <_svfiprintf_r+0x1d8>
 8008e26:	4b23      	ldr	r3, [pc, #140]	; (8008eb4 <_svfiprintf_r+0x1f4>)
 8008e28:	bb1b      	cbnz	r3, 8008e72 <_svfiprintf_r+0x1b2>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	3307      	adds	r3, #7
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	3308      	adds	r3, #8
 8008e34:	9303      	str	r3, [sp, #12]
 8008e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e38:	4433      	add	r3, r6
 8008e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e3c:	e767      	b.n	8008d0e <_svfiprintf_r+0x4e>
 8008e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e42:	460c      	mov	r4, r1
 8008e44:	2001      	movs	r0, #1
 8008e46:	e7a5      	b.n	8008d94 <_svfiprintf_r+0xd4>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	f04f 0c0a 	mov.w	ip, #10
 8008e54:	4620      	mov	r0, r4
 8008e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5a:	3a30      	subs	r2, #48	; 0x30
 8008e5c:	2a09      	cmp	r2, #9
 8008e5e:	d903      	bls.n	8008e68 <_svfiprintf_r+0x1a8>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d0c5      	beq.n	8008df0 <_svfiprintf_r+0x130>
 8008e64:	9105      	str	r1, [sp, #20]
 8008e66:	e7c3      	b.n	8008df0 <_svfiprintf_r+0x130>
 8008e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7f0      	b.n	8008e54 <_svfiprintf_r+0x194>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <_svfiprintf_r+0x1f8>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f3af 8000 	nop.w
 8008e82:	1c42      	adds	r2, r0, #1
 8008e84:	4606      	mov	r6, r0
 8008e86:	d1d6      	bne.n	8008e36 <_svfiprintf_r+0x176>
 8008e88:	89ab      	ldrh	r3, [r5, #12]
 8008e8a:	065b      	lsls	r3, r3, #25
 8008e8c:	f53f af2c 	bmi.w	8008ce8 <_svfiprintf_r+0x28>
 8008e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e92:	b01d      	add	sp, #116	; 0x74
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	ab03      	add	r3, sp, #12
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <_svfiprintf_r+0x1f8>)
 8008ea0:	a904      	add	r1, sp, #16
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f000 f9d4 	bl	8009250 <_printf_i>
 8008ea8:	e7eb      	b.n	8008e82 <_svfiprintf_r+0x1c2>
 8008eaa:	bf00      	nop
 8008eac:	080097a8 	.word	0x080097a8
 8008eb0:	080097b2 	.word	0x080097b2
 8008eb4:	00000000 	.word	0x00000000
 8008eb8:	08008c09 	.word	0x08008c09
 8008ebc:	080097ae 	.word	0x080097ae

08008ec0 <__sfputc_r>:
 8008ec0:	6893      	ldr	r3, [r2, #8]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	b410      	push	{r4}
 8008ec8:	6093      	str	r3, [r2, #8]
 8008eca:	da08      	bge.n	8008ede <__sfputc_r+0x1e>
 8008ecc:	6994      	ldr	r4, [r2, #24]
 8008ece:	42a3      	cmp	r3, r4
 8008ed0:	db01      	blt.n	8008ed6 <__sfputc_r+0x16>
 8008ed2:	290a      	cmp	r1, #10
 8008ed4:	d103      	bne.n	8008ede <__sfputc_r+0x1e>
 8008ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eda:	f7ff bb0d 	b.w	80084f8 <__swbuf_r>
 8008ede:	6813      	ldr	r3, [r2, #0]
 8008ee0:	1c58      	adds	r0, r3, #1
 8008ee2:	6010      	str	r0, [r2, #0]
 8008ee4:	7019      	strb	r1, [r3, #0]
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <__sfputs_r>:
 8008eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	460f      	mov	r7, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	18d5      	adds	r5, r2, r3
 8008ef8:	42ac      	cmp	r4, r5
 8008efa:	d101      	bne.n	8008f00 <__sfputs_r+0x12>
 8008efc:	2000      	movs	r0, #0
 8008efe:	e007      	b.n	8008f10 <__sfputs_r+0x22>
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	463a      	mov	r2, r7
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7ff ffda 	bl	8008ec0 <__sfputc_r>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d1f3      	bne.n	8008ef8 <__sfputs_r+0xa>
 8008f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f14 <_vfiprintf_r>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	460d      	mov	r5, r1
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	4698      	mov	r8, r3
 8008f20:	4606      	mov	r6, r0
 8008f22:	b118      	cbz	r0, 8008f2c <_vfiprintf_r+0x18>
 8008f24:	6983      	ldr	r3, [r0, #24]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_vfiprintf_r+0x18>
 8008f28:	f7ff fcc0 	bl	80088ac <__sinit>
 8008f2c:	4b89      	ldr	r3, [pc, #548]	; (8009154 <_vfiprintf_r+0x240>)
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	d11b      	bne.n	8008f6a <_vfiprintf_r+0x56>
 8008f32:	6875      	ldr	r5, [r6, #4]
 8008f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f36:	07d9      	lsls	r1, r3, #31
 8008f38:	d405      	bmi.n	8008f46 <_vfiprintf_r+0x32>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_vfiprintf_r+0x32>
 8008f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f42:	f7ff fd51 	bl	80089e8 <__retarget_lock_acquire_recursive>
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	071b      	lsls	r3, r3, #28
 8008f4a:	d501      	bpl.n	8008f50 <_vfiprintf_r+0x3c>
 8008f4c:	692b      	ldr	r3, [r5, #16]
 8008f4e:	b9eb      	cbnz	r3, 8008f8c <_vfiprintf_r+0x78>
 8008f50:	4629      	mov	r1, r5
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff fb22 	bl	800859c <__swsetup_r>
 8008f58:	b1c0      	cbz	r0, 8008f8c <_vfiprintf_r+0x78>
 8008f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f5c:	07dc      	lsls	r4, r3, #31
 8008f5e:	d50e      	bpl.n	8008f7e <_vfiprintf_r+0x6a>
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	b01d      	add	sp, #116	; 0x74
 8008f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6a:	4b7b      	ldr	r3, [pc, #492]	; (8009158 <_vfiprintf_r+0x244>)
 8008f6c:	429d      	cmp	r5, r3
 8008f6e:	d101      	bne.n	8008f74 <_vfiprintf_r+0x60>
 8008f70:	68b5      	ldr	r5, [r6, #8]
 8008f72:	e7df      	b.n	8008f34 <_vfiprintf_r+0x20>
 8008f74:	4b79      	ldr	r3, [pc, #484]	; (800915c <_vfiprintf_r+0x248>)
 8008f76:	429d      	cmp	r5, r3
 8008f78:	bf08      	it	eq
 8008f7a:	68f5      	ldreq	r5, [r6, #12]
 8008f7c:	e7da      	b.n	8008f34 <_vfiprintf_r+0x20>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	0598      	lsls	r0, r3, #22
 8008f82:	d4ed      	bmi.n	8008f60 <_vfiprintf_r+0x4c>
 8008f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f86:	f7ff fd30 	bl	80089ea <__retarget_lock_release_recursive>
 8008f8a:	e7e9      	b.n	8008f60 <_vfiprintf_r+0x4c>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f90:	2320      	movs	r3, #32
 8008f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9a:	2330      	movs	r3, #48	; 0x30
 8008f9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009160 <_vfiprintf_r+0x24c>
 8008fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa4:	f04f 0901 	mov.w	r9, #1
 8008fa8:	4623      	mov	r3, r4
 8008faa:	469a      	mov	sl, r3
 8008fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb0:	b10a      	cbz	r2, 8008fb6 <_vfiprintf_r+0xa2>
 8008fb2:	2a25      	cmp	r2, #37	; 0x25
 8008fb4:	d1f9      	bne.n	8008faa <_vfiprintf_r+0x96>
 8008fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fba:	d00b      	beq.n	8008fd4 <_vfiprintf_r+0xc0>
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7ff ff93 	bl	8008eee <__sfputs_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f000 80aa 	beq.w	8009122 <_vfiprintf_r+0x20e>
 8008fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd0:	445a      	add	r2, fp
 8008fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 80a2 	beq.w	8009122 <_vfiprintf_r+0x20e>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe8:	f10a 0a01 	add.w	sl, sl, #1
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff6:	4654      	mov	r4, sl
 8008ff8:	2205      	movs	r2, #5
 8008ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffe:	4858      	ldr	r0, [pc, #352]	; (8009160 <_vfiprintf_r+0x24c>)
 8009000:	f7f7 f91e 	bl	8000240 <memchr>
 8009004:	9a04      	ldr	r2, [sp, #16]
 8009006:	b9d8      	cbnz	r0, 8009040 <_vfiprintf_r+0x12c>
 8009008:	06d1      	lsls	r1, r2, #27
 800900a:	bf44      	itt	mi
 800900c:	2320      	movmi	r3, #32
 800900e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009012:	0713      	lsls	r3, r2, #28
 8009014:	bf44      	itt	mi
 8009016:	232b      	movmi	r3, #43	; 0x2b
 8009018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b2a      	cmp	r3, #42	; 0x2a
 8009022:	d015      	beq.n	8009050 <_vfiprintf_r+0x13c>
 8009024:	9a07      	ldr	r2, [sp, #28]
 8009026:	4654      	mov	r4, sl
 8009028:	2000      	movs	r0, #0
 800902a:	f04f 0c0a 	mov.w	ip, #10
 800902e:	4621      	mov	r1, r4
 8009030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009034:	3b30      	subs	r3, #48	; 0x30
 8009036:	2b09      	cmp	r3, #9
 8009038:	d94e      	bls.n	80090d8 <_vfiprintf_r+0x1c4>
 800903a:	b1b0      	cbz	r0, 800906a <_vfiprintf_r+0x156>
 800903c:	9207      	str	r2, [sp, #28]
 800903e:	e014      	b.n	800906a <_vfiprintf_r+0x156>
 8009040:	eba0 0308 	sub.w	r3, r0, r8
 8009044:	fa09 f303 	lsl.w	r3, r9, r3
 8009048:	4313      	orrs	r3, r2
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	46a2      	mov	sl, r4
 800904e:	e7d2      	b.n	8008ff6 <_vfiprintf_r+0xe2>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	1d19      	adds	r1, r3, #4
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	9103      	str	r1, [sp, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	bfbb      	ittet	lt
 800905c:	425b      	neglt	r3, r3
 800905e:	f042 0202 	orrlt.w	r2, r2, #2
 8009062:	9307      	strge	r3, [sp, #28]
 8009064:	9307      	strlt	r3, [sp, #28]
 8009066:	bfb8      	it	lt
 8009068:	9204      	strlt	r2, [sp, #16]
 800906a:	7823      	ldrb	r3, [r4, #0]
 800906c:	2b2e      	cmp	r3, #46	; 0x2e
 800906e:	d10c      	bne.n	800908a <_vfiprintf_r+0x176>
 8009070:	7863      	ldrb	r3, [r4, #1]
 8009072:	2b2a      	cmp	r3, #42	; 0x2a
 8009074:	d135      	bne.n	80090e2 <_vfiprintf_r+0x1ce>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	9203      	str	r2, [sp, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	bfb8      	it	lt
 8009082:	f04f 33ff 	movlt.w	r3, #4294967295
 8009086:	3402      	adds	r4, #2
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009170 <_vfiprintf_r+0x25c>
 800908e:	7821      	ldrb	r1, [r4, #0]
 8009090:	2203      	movs	r2, #3
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 f8d4 	bl	8000240 <memchr>
 8009098:	b140      	cbz	r0, 80090ac <_vfiprintf_r+0x198>
 800909a:	2340      	movs	r3, #64	; 0x40
 800909c:	eba0 000a 	sub.w	r0, r0, sl
 80090a0:	fa03 f000 	lsl.w	r0, r3, r0
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	4303      	orrs	r3, r0
 80090a8:	3401      	adds	r4, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	482c      	ldr	r0, [pc, #176]	; (8009164 <_vfiprintf_r+0x250>)
 80090b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b6:	2206      	movs	r2, #6
 80090b8:	f7f7 f8c2 	bl	8000240 <memchr>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d03f      	beq.n	8009140 <_vfiprintf_r+0x22c>
 80090c0:	4b29      	ldr	r3, [pc, #164]	; (8009168 <_vfiprintf_r+0x254>)
 80090c2:	bb1b      	cbnz	r3, 800910c <_vfiprintf_r+0x1f8>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	3307      	adds	r3, #7
 80090c8:	f023 0307 	bic.w	r3, r3, #7
 80090cc:	3308      	adds	r3, #8
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	443b      	add	r3, r7
 80090d4:	9309      	str	r3, [sp, #36]	; 0x24
 80090d6:	e767      	b.n	8008fa8 <_vfiprintf_r+0x94>
 80090d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090dc:	460c      	mov	r4, r1
 80090de:	2001      	movs	r0, #1
 80090e0:	e7a5      	b.n	800902e <_vfiprintf_r+0x11a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	3401      	adds	r4, #1
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	4619      	mov	r1, r3
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	4620      	mov	r0, r4
 80090f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f4:	3a30      	subs	r2, #48	; 0x30
 80090f6:	2a09      	cmp	r2, #9
 80090f8:	d903      	bls.n	8009102 <_vfiprintf_r+0x1ee>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c5      	beq.n	800908a <_vfiprintf_r+0x176>
 80090fe:	9105      	str	r1, [sp, #20]
 8009100:	e7c3      	b.n	800908a <_vfiprintf_r+0x176>
 8009102:	fb0c 2101 	mla	r1, ip, r1, r2
 8009106:	4604      	mov	r4, r0
 8009108:	2301      	movs	r3, #1
 800910a:	e7f0      	b.n	80090ee <_vfiprintf_r+0x1da>
 800910c:	ab03      	add	r3, sp, #12
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	462a      	mov	r2, r5
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <_vfiprintf_r+0x258>)
 8009114:	a904      	add	r1, sp, #16
 8009116:	4630      	mov	r0, r6
 8009118:	f3af 8000 	nop.w
 800911c:	4607      	mov	r7, r0
 800911e:	1c78      	adds	r0, r7, #1
 8009120:	d1d6      	bne.n	80090d0 <_vfiprintf_r+0x1bc>
 8009122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009124:	07d9      	lsls	r1, r3, #31
 8009126:	d405      	bmi.n	8009134 <_vfiprintf_r+0x220>
 8009128:	89ab      	ldrh	r3, [r5, #12]
 800912a:	059a      	lsls	r2, r3, #22
 800912c:	d402      	bmi.n	8009134 <_vfiprintf_r+0x220>
 800912e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009130:	f7ff fc5b 	bl	80089ea <__retarget_lock_release_recursive>
 8009134:	89ab      	ldrh	r3, [r5, #12]
 8009136:	065b      	lsls	r3, r3, #25
 8009138:	f53f af12 	bmi.w	8008f60 <_vfiprintf_r+0x4c>
 800913c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913e:	e711      	b.n	8008f64 <_vfiprintf_r+0x50>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	462a      	mov	r2, r5
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <_vfiprintf_r+0x258>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4630      	mov	r0, r6
 800914c:	f000 f880 	bl	8009250 <_printf_i>
 8009150:	e7e4      	b.n	800911c <_vfiprintf_r+0x208>
 8009152:	bf00      	nop
 8009154:	08009768 	.word	0x08009768
 8009158:	08009788 	.word	0x08009788
 800915c:	08009748 	.word	0x08009748
 8009160:	080097a8 	.word	0x080097a8
 8009164:	080097b2 	.word	0x080097b2
 8009168:	00000000 	.word	0x00000000
 800916c:	08008eef 	.word	0x08008eef
 8009170:	080097ae 	.word	0x080097ae

08009174 <_printf_common>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	4616      	mov	r6, r2
 800917a:	4699      	mov	r9, r3
 800917c:	688a      	ldr	r2, [r1, #8]
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009184:	4293      	cmp	r3, r2
 8009186:	bfb8      	it	lt
 8009188:	4613      	movlt	r3, r2
 800918a:	6033      	str	r3, [r6, #0]
 800918c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009190:	4607      	mov	r7, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b10a      	cbz	r2, 800919a <_printf_common+0x26>
 8009196:	3301      	adds	r3, #1
 8009198:	6033      	str	r3, [r6, #0]
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	0699      	lsls	r1, r3, #26
 800919e:	bf42      	ittt	mi
 80091a0:	6833      	ldrmi	r3, [r6, #0]
 80091a2:	3302      	addmi	r3, #2
 80091a4:	6033      	strmi	r3, [r6, #0]
 80091a6:	6825      	ldr	r5, [r4, #0]
 80091a8:	f015 0506 	ands.w	r5, r5, #6
 80091ac:	d106      	bne.n	80091bc <_printf_common+0x48>
 80091ae:	f104 0a19 	add.w	sl, r4, #25
 80091b2:	68e3      	ldr	r3, [r4, #12]
 80091b4:	6832      	ldr	r2, [r6, #0]
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dc26      	bgt.n	800920a <_printf_common+0x96>
 80091bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c0:	1e13      	subs	r3, r2, #0
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	0692      	lsls	r2, r2, #26
 80091ca:	d42b      	bmi.n	8009224 <_printf_common+0xb0>
 80091cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091d0:	4649      	mov	r1, r9
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d01e      	beq.n	8009218 <_printf_common+0xa4>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	68e5      	ldr	r5, [r4, #12]
 80091de:	6832      	ldr	r2, [r6, #0]
 80091e0:	f003 0306 	and.w	r3, r3, #6
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	bf08      	it	eq
 80091e8:	1aad      	subeq	r5, r5, r2
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	bf0c      	ite	eq
 80091f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f4:	2500      	movne	r5, #0
 80091f6:	4293      	cmp	r3, r2
 80091f8:	bfc4      	itt	gt
 80091fa:	1a9b      	subgt	r3, r3, r2
 80091fc:	18ed      	addgt	r5, r5, r3
 80091fe:	2600      	movs	r6, #0
 8009200:	341a      	adds	r4, #26
 8009202:	42b5      	cmp	r5, r6
 8009204:	d11a      	bne.n	800923c <_printf_common+0xc8>
 8009206:	2000      	movs	r0, #0
 8009208:	e008      	b.n	800921c <_printf_common+0xa8>
 800920a:	2301      	movs	r3, #1
 800920c:	4652      	mov	r2, sl
 800920e:	4649      	mov	r1, r9
 8009210:	4638      	mov	r0, r7
 8009212:	47c0      	blx	r8
 8009214:	3001      	adds	r0, #1
 8009216:	d103      	bne.n	8009220 <_printf_common+0xac>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009220:	3501      	adds	r5, #1
 8009222:	e7c6      	b.n	80091b2 <_printf_common+0x3e>
 8009224:	18e1      	adds	r1, r4, r3
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	2030      	movs	r0, #48	; 0x30
 800922a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800922e:	4422      	add	r2, r4
 8009230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009238:	3302      	adds	r3, #2
 800923a:	e7c7      	b.n	80091cc <_printf_common+0x58>
 800923c:	2301      	movs	r3, #1
 800923e:	4622      	mov	r2, r4
 8009240:	4649      	mov	r1, r9
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	3001      	adds	r0, #1
 8009248:	d0e6      	beq.n	8009218 <_printf_common+0xa4>
 800924a:	3601      	adds	r6, #1
 800924c:	e7d9      	b.n	8009202 <_printf_common+0x8e>
	...

08009250 <_printf_i>:
 8009250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4691      	mov	r9, r2
 8009258:	7e27      	ldrb	r7, [r4, #24]
 800925a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800925c:	2f78      	cmp	r7, #120	; 0x78
 800925e:	4680      	mov	r8, r0
 8009260:	469a      	mov	sl, r3
 8009262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009266:	d807      	bhi.n	8009278 <_printf_i+0x28>
 8009268:	2f62      	cmp	r7, #98	; 0x62
 800926a:	d80a      	bhi.n	8009282 <_printf_i+0x32>
 800926c:	2f00      	cmp	r7, #0
 800926e:	f000 80d8 	beq.w	8009422 <_printf_i+0x1d2>
 8009272:	2f58      	cmp	r7, #88	; 0x58
 8009274:	f000 80a3 	beq.w	80093be <_printf_i+0x16e>
 8009278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800927c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009280:	e03a      	b.n	80092f8 <_printf_i+0xa8>
 8009282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009286:	2b15      	cmp	r3, #21
 8009288:	d8f6      	bhi.n	8009278 <_printf_i+0x28>
 800928a:	a001      	add	r0, pc, #4	; (adr r0, 8009290 <_printf_i+0x40>)
 800928c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009290:	080092e9 	.word	0x080092e9
 8009294:	080092fd 	.word	0x080092fd
 8009298:	08009279 	.word	0x08009279
 800929c:	08009279 	.word	0x08009279
 80092a0:	08009279 	.word	0x08009279
 80092a4:	08009279 	.word	0x08009279
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009279 	.word	0x08009279
 80092b0:	08009279 	.word	0x08009279
 80092b4:	08009279 	.word	0x08009279
 80092b8:	08009279 	.word	0x08009279
 80092bc:	08009409 	.word	0x08009409
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	080093eb 	.word	0x080093eb
 80092c8:	08009279 	.word	0x08009279
 80092cc:	08009279 	.word	0x08009279
 80092d0:	0800942b 	.word	0x0800942b
 80092d4:	08009279 	.word	0x08009279
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	08009279 	.word	0x08009279
 80092e0:	08009279 	.word	0x08009279
 80092e4:	080093f3 	.word	0x080093f3
 80092e8:	680b      	ldr	r3, [r1, #0]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	600a      	str	r2, [r1, #0]
 80092f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0a3      	b.n	8009444 <_printf_i+0x1f4>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	6808      	ldr	r0, [r1, #0]
 8009300:	062e      	lsls	r6, r5, #24
 8009302:	f100 0304 	add.w	r3, r0, #4
 8009306:	d50a      	bpl.n	800931e <_printf_i+0xce>
 8009308:	6805      	ldr	r5, [r0, #0]
 800930a:	600b      	str	r3, [r1, #0]
 800930c:	2d00      	cmp	r5, #0
 800930e:	da03      	bge.n	8009318 <_printf_i+0xc8>
 8009310:	232d      	movs	r3, #45	; 0x2d
 8009312:	426d      	negs	r5, r5
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	485e      	ldr	r0, [pc, #376]	; (8009494 <_printf_i+0x244>)
 800931a:	230a      	movs	r3, #10
 800931c:	e019      	b.n	8009352 <_printf_i+0x102>
 800931e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009322:	6805      	ldr	r5, [r0, #0]
 8009324:	600b      	str	r3, [r1, #0]
 8009326:	bf18      	it	ne
 8009328:	b22d      	sxthne	r5, r5
 800932a:	e7ef      	b.n	800930c <_printf_i+0xbc>
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	1d18      	adds	r0, r3, #4
 8009332:	6008      	str	r0, [r1, #0]
 8009334:	0628      	lsls	r0, r5, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xec>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e002      	b.n	8009342 <_printf_i+0xf2>
 800933c:	0669      	lsls	r1, r5, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xe8>
 8009340:	881d      	ldrh	r5, [r3, #0]
 8009342:	4854      	ldr	r0, [pc, #336]	; (8009494 <_printf_i+0x244>)
 8009344:	2f6f      	cmp	r7, #111	; 0x6f
 8009346:	bf0c      	ite	eq
 8009348:	2308      	moveq	r3, #8
 800934a:	230a      	movne	r3, #10
 800934c:	2100      	movs	r1, #0
 800934e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009352:	6866      	ldr	r6, [r4, #4]
 8009354:	60a6      	str	r6, [r4, #8]
 8009356:	2e00      	cmp	r6, #0
 8009358:	bfa2      	ittt	ge
 800935a:	6821      	ldrge	r1, [r4, #0]
 800935c:	f021 0104 	bicge.w	r1, r1, #4
 8009360:	6021      	strge	r1, [r4, #0]
 8009362:	b90d      	cbnz	r5, 8009368 <_printf_i+0x118>
 8009364:	2e00      	cmp	r6, #0
 8009366:	d04d      	beq.n	8009404 <_printf_i+0x1b4>
 8009368:	4616      	mov	r6, r2
 800936a:	fbb5 f1f3 	udiv	r1, r5, r3
 800936e:	fb03 5711 	mls	r7, r3, r1, r5
 8009372:	5dc7      	ldrb	r7, [r0, r7]
 8009374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009378:	462f      	mov	r7, r5
 800937a:	42bb      	cmp	r3, r7
 800937c:	460d      	mov	r5, r1
 800937e:	d9f4      	bls.n	800936a <_printf_i+0x11a>
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10b      	bne.n	800939c <_printf_i+0x14c>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	07df      	lsls	r7, r3, #31
 8009388:	d508      	bpl.n	800939c <_printf_i+0x14c>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	4299      	cmp	r1, r3
 8009390:	bfde      	ittt	le
 8009392:	2330      	movle	r3, #48	; 0x30
 8009394:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009398:	f106 36ff 	addle.w	r6, r6, #4294967295
 800939c:	1b92      	subs	r2, r2, r6
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	f8cd a000 	str.w	sl, [sp]
 80093a4:	464b      	mov	r3, r9
 80093a6:	aa03      	add	r2, sp, #12
 80093a8:	4621      	mov	r1, r4
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff fee2 	bl	8009174 <_printf_common>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d14c      	bne.n	800944e <_printf_i+0x1fe>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b004      	add	sp, #16
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	4835      	ldr	r0, [pc, #212]	; (8009494 <_printf_i+0x244>)
 80093c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	680e      	ldr	r6, [r1, #0]
 80093c8:	061f      	lsls	r7, r3, #24
 80093ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ce:	600e      	str	r6, [r1, #0]
 80093d0:	d514      	bpl.n	80093fc <_printf_i+0x1ac>
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	bf44      	itt	mi
 80093d6:	f043 0320 	orrmi.w	r3, r3, #32
 80093da:	6023      	strmi	r3, [r4, #0]
 80093dc:	b91d      	cbnz	r5, 80093e6 <_printf_i+0x196>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f023 0320 	bic.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2310      	movs	r3, #16
 80093e8:	e7b0      	b.n	800934c <_printf_i+0xfc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	f043 0320 	orr.w	r3, r3, #32
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	2378      	movs	r3, #120	; 0x78
 80093f4:	4828      	ldr	r0, [pc, #160]	; (8009498 <_printf_i+0x248>)
 80093f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093fa:	e7e3      	b.n	80093c4 <_printf_i+0x174>
 80093fc:	065e      	lsls	r6, r3, #25
 80093fe:	bf48      	it	mi
 8009400:	b2ad      	uxthmi	r5, r5
 8009402:	e7e6      	b.n	80093d2 <_printf_i+0x182>
 8009404:	4616      	mov	r6, r2
 8009406:	e7bb      	b.n	8009380 <_printf_i+0x130>
 8009408:	680b      	ldr	r3, [r1, #0]
 800940a:	6826      	ldr	r6, [r4, #0]
 800940c:	6960      	ldr	r0, [r4, #20]
 800940e:	1d1d      	adds	r5, r3, #4
 8009410:	600d      	str	r5, [r1, #0]
 8009412:	0635      	lsls	r5, r6, #24
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	d501      	bpl.n	800941c <_printf_i+0x1cc>
 8009418:	6018      	str	r0, [r3, #0]
 800941a:	e002      	b.n	8009422 <_printf_i+0x1d2>
 800941c:	0671      	lsls	r1, r6, #25
 800941e:	d5fb      	bpl.n	8009418 <_printf_i+0x1c8>
 8009420:	8018      	strh	r0, [r3, #0]
 8009422:	2300      	movs	r3, #0
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	4616      	mov	r6, r2
 8009428:	e7ba      	b.n	80093a0 <_printf_i+0x150>
 800942a:	680b      	ldr	r3, [r1, #0]
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	600a      	str	r2, [r1, #0]
 8009430:	681e      	ldr	r6, [r3, #0]
 8009432:	6862      	ldr	r2, [r4, #4]
 8009434:	2100      	movs	r1, #0
 8009436:	4630      	mov	r0, r6
 8009438:	f7f6 ff02 	bl	8000240 <memchr>
 800943c:	b108      	cbz	r0, 8009442 <_printf_i+0x1f2>
 800943e:	1b80      	subs	r0, r0, r6
 8009440:	6060      	str	r0, [r4, #4]
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	2300      	movs	r3, #0
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	e7a8      	b.n	80093a0 <_printf_i+0x150>
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	4632      	mov	r2, r6
 8009452:	4649      	mov	r1, r9
 8009454:	4640      	mov	r0, r8
 8009456:	47d0      	blx	sl
 8009458:	3001      	adds	r0, #1
 800945a:	d0ab      	beq.n	80093b4 <_printf_i+0x164>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	d413      	bmi.n	800948a <_printf_i+0x23a>
 8009462:	68e0      	ldr	r0, [r4, #12]
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	4298      	cmp	r0, r3
 8009468:	bfb8      	it	lt
 800946a:	4618      	movlt	r0, r3
 800946c:	e7a4      	b.n	80093b8 <_printf_i+0x168>
 800946e:	2301      	movs	r3, #1
 8009470:	4632      	mov	r2, r6
 8009472:	4649      	mov	r1, r9
 8009474:	4640      	mov	r0, r8
 8009476:	47d0      	blx	sl
 8009478:	3001      	adds	r0, #1
 800947a:	d09b      	beq.n	80093b4 <_printf_i+0x164>
 800947c:	3501      	adds	r5, #1
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	9903      	ldr	r1, [sp, #12]
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	42ab      	cmp	r3, r5
 8009486:	dcf2      	bgt.n	800946e <_printf_i+0x21e>
 8009488:	e7eb      	b.n	8009462 <_printf_i+0x212>
 800948a:	2500      	movs	r5, #0
 800948c:	f104 0619 	add.w	r6, r4, #25
 8009490:	e7f5      	b.n	800947e <_printf_i+0x22e>
 8009492:	bf00      	nop
 8009494:	080097b9 	.word	0x080097b9
 8009498:	080097ca 	.word	0x080097ca

0800949c <_sbrk_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	; (80094b8 <_sbrk_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f8 f806 	bl	80014b8 <_sbrk>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_sbrk_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_sbrk_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	200004fc 	.word	0x200004fc

080094bc <__sread>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	460c      	mov	r4, r1
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	f000 f8e0 	bl	8009688 <_read_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	bfab      	itete	ge
 80094cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ce:	89a3      	ldrhlt	r3, [r4, #12]
 80094d0:	181b      	addge	r3, r3, r0
 80094d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094d6:	bfac      	ite	ge
 80094d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094da:	81a3      	strhlt	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__swrite>:
 80094de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e2:	461f      	mov	r7, r3
 80094e4:	898b      	ldrh	r3, [r1, #12]
 80094e6:	05db      	lsls	r3, r3, #23
 80094e8:	4605      	mov	r5, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	4616      	mov	r6, r2
 80094ee:	d505      	bpl.n	80094fc <__swrite+0x1e>
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	2302      	movs	r3, #2
 80094f6:	2200      	movs	r2, #0
 80094f8:	f000 f868 	bl	80095cc <_lseek_r>
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	4632      	mov	r2, r6
 800950a:	463b      	mov	r3, r7
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	f000 b817 	b.w	8009544 <_write_r>

08009516 <__sseek>:
 8009516:	b510      	push	{r4, lr}
 8009518:	460c      	mov	r4, r1
 800951a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951e:	f000 f855 	bl	80095cc <_lseek_r>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	bf15      	itete	ne
 8009528:	6560      	strne	r0, [r4, #84]	; 0x54
 800952a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800952e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009532:	81a3      	strheq	r3, [r4, #12]
 8009534:	bf18      	it	ne
 8009536:	81a3      	strhne	r3, [r4, #12]
 8009538:	bd10      	pop	{r4, pc}

0800953a <__sclose>:
 800953a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953e:	f000 b813 	b.w	8009568 <_close_r>
	...

08009544 <_write_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_write_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f8 fba0 	bl	8001c98 <_write>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_write_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_write_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	200004fc 	.word	0x200004fc

08009568 <_close_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d06      	ldr	r5, [pc, #24]	; (8009584 <_close_r+0x1c>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	f7f7 ff6b 	bl	800144e <_close>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_close_r+0x1a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_close_r+0x1a>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200004fc 	.word	0x200004fc

08009588 <_fstat_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_fstat_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f7f7 ff66 	bl	8001466 <_fstat>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_fstat_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_fstat_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	200004fc 	.word	0x200004fc

080095ac <_isatty_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_isatty_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f7f7 ff65 	bl	8001486 <_isatty>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_isatty_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_isatty_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	200004fc 	.word	0x200004fc

080095cc <_lseek_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d07      	ldr	r5, [pc, #28]	; (80095ec <_lseek_r+0x20>)
 80095d0:	4604      	mov	r4, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7f7 ff5e 	bl	800149c <_lseek>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_lseek_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_lseek_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	200004fc 	.word	0x200004fc

080095f0 <memmove>:
 80095f0:	4288      	cmp	r0, r1
 80095f2:	b510      	push	{r4, lr}
 80095f4:	eb01 0402 	add.w	r4, r1, r2
 80095f8:	d902      	bls.n	8009600 <memmove+0x10>
 80095fa:	4284      	cmp	r4, r0
 80095fc:	4623      	mov	r3, r4
 80095fe:	d807      	bhi.n	8009610 <memmove+0x20>
 8009600:	1e43      	subs	r3, r0, #1
 8009602:	42a1      	cmp	r1, r4
 8009604:	d008      	beq.n	8009618 <memmove+0x28>
 8009606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800960e:	e7f8      	b.n	8009602 <memmove+0x12>
 8009610:	4402      	add	r2, r0
 8009612:	4601      	mov	r1, r0
 8009614:	428a      	cmp	r2, r1
 8009616:	d100      	bne.n	800961a <memmove+0x2a>
 8009618:	bd10      	pop	{r4, pc}
 800961a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800961e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009622:	e7f7      	b.n	8009614 <memmove+0x24>

08009624 <__malloc_lock>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__malloc_lock+0x8>)
 8009626:	f7ff b9df 	b.w	80089e8 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	200004f4 	.word	0x200004f4

08009630 <__malloc_unlock>:
 8009630:	4801      	ldr	r0, [pc, #4]	; (8009638 <__malloc_unlock+0x8>)
 8009632:	f7ff b9da 	b.w	80089ea <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	200004f4 	.word	0x200004f4

0800963c <_realloc_r>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	4607      	mov	r7, r0
 8009640:	4614      	mov	r4, r2
 8009642:	460e      	mov	r6, r1
 8009644:	b921      	cbnz	r1, 8009650 <_realloc_r+0x14>
 8009646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800964a:	4611      	mov	r1, r2
 800964c:	f7ff ba82 	b.w	8008b54 <_malloc_r>
 8009650:	b922      	cbnz	r2, 800965c <_realloc_r+0x20>
 8009652:	f7ff fa2f 	bl	8008ab4 <_free_r>
 8009656:	4625      	mov	r5, r4
 8009658:	4628      	mov	r0, r5
 800965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965c:	f000 f826 	bl	80096ac <_malloc_usable_size_r>
 8009660:	42a0      	cmp	r0, r4
 8009662:	d20f      	bcs.n	8009684 <_realloc_r+0x48>
 8009664:	4621      	mov	r1, r4
 8009666:	4638      	mov	r0, r7
 8009668:	f7ff fa74 	bl	8008b54 <_malloc_r>
 800966c:	4605      	mov	r5, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	d0f2      	beq.n	8009658 <_realloc_r+0x1c>
 8009672:	4631      	mov	r1, r6
 8009674:	4622      	mov	r2, r4
 8009676:	f7fe fe7b 	bl	8008370 <memcpy>
 800967a:	4631      	mov	r1, r6
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff fa19 	bl	8008ab4 <_free_r>
 8009682:	e7e9      	b.n	8009658 <_realloc_r+0x1c>
 8009684:	4635      	mov	r5, r6
 8009686:	e7e7      	b.n	8009658 <_realloc_r+0x1c>

08009688 <_read_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4d07      	ldr	r5, [pc, #28]	; (80096a8 <_read_r+0x20>)
 800968c:	4604      	mov	r4, r0
 800968e:	4608      	mov	r0, r1
 8009690:	4611      	mov	r1, r2
 8009692:	2200      	movs	r2, #0
 8009694:	602a      	str	r2, [r5, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	f7f7 febc 	bl	8001414 <_read>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d102      	bne.n	80096a6 <_read_r+0x1e>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	b103      	cbz	r3, 80096a6 <_read_r+0x1e>
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	200004fc 	.word	0x200004fc

080096ac <_malloc_usable_size_r>:
 80096ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b0:	1f18      	subs	r0, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bfbc      	itt	lt
 80096b6:	580b      	ldrlt	r3, [r1, r0]
 80096b8:	18c0      	addlt	r0, r0, r3
 80096ba:	4770      	bx	lr

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
