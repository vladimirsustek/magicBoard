
magicBoard_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800b040  0800b040  0001b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b82c  0800b82c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b834  0800b834  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018c0  20000078  0800b8b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001938  0800b8b4  00021938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c63d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a68  00000000  00000000  0004c6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00052150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c98  00000000  00000000  00054088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000306b9  00000000  00000000  00055d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028cbe  00000000  00000000  000863d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115b9d  00000000  00000000  000af097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c4c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000871c  00000000  00000000  001c4c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b028 	.word	0x0800b028

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800b028 	.word	0x0800b028

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SPI1_NCSactivate>:
		uint32_t* val);

sys_state_t systemGlobalState = {0};

uint32_t SPI1_NCSactivate(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <SPI1_NCSactivate+0x14>)
 80005f2:	f003 fb15 	bl	8003c20 <HAL_GPIO_WritePin>
	return 0u;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020400 	.word	0x40020400

08000600 <SPI1_NCSdeactivate>:

uint32_t SPI1_NCSdeactivate(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <SPI1_NCSdeactivate+0x14>)
 800060a:	f003 fb09 	bl	8003c20 <HAL_GPIO_WritePin>
	return 0u;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020400 	.word	0x40020400

08000618 <EEPROM_WriteOperation>:

uint32_t EEPROM_WriteOperation(uint8_t *pDataTx, uint16_t Size)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	if (NULL == pDataTx)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <EEPROM_WriteOperation+0x18>
	{
		return (uint32_t)(-1);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e007      	b.n	8000640 <EEPROM_WriteOperation+0x28>
	}

	return (uint32_t)HAL_SPI_Transmit(&hspi3, pDataTx, Size, HAL_MAX_DELAY);
 8000630:	887a      	ldrh	r2, [r7, #2]
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <EEPROM_WriteOperation+0x30>)
 800063a:	f005 f908 	bl	800584e <HAL_SPI_Transmit>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200014d8 	.word	0x200014d8

0800064c <EEPROM_ReadOperation>:

uint32_t EEPROM_ReadOperation(uint8_t* pDataRx, int16_t Size)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	if (NULL == pDataRx)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <EEPROM_ReadOperation+0x18>
	{
		return (uint32_t)(-1);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e007      	b.n	8000674 <EEPROM_ReadOperation+0x28>
	}

	return (uint32_t)HAL_SPI_Receive(&hspi3, pDataRx, Size, HAL_MAX_DELAY);
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <EEPROM_ReadOperation+0x30>)
 800066e:	f005 fa5c 	bl	8005b2a <HAL_SPI_Receive>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200014d8 	.word	0x200014d8

08000680 <EEPROM_ReadData>:
	return result;
}


uint32_t EEPROM_ReadData(uint32_t address, uint8_t *pData, uint16_t Size)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
	uint8_t startWrite[4];
	uint32_t result[5] = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

	if((address > EEPROM_STOP_ADDRESS) ||
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006a4:	d203      	bcs.n	80006ae <EEPROM_ReadData+0x2e>
			(address < EEPROM_START_ADDRESS) ||
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ac:	d902      	bls.n	80006b4 <EEPROM_ReadData+0x34>
			(Size > MAX_WRITE_AT_ONCE))
	{
		return (uint32_t)(-1);
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e03b      	b.n	800072c <EEPROM_ReadData+0xac>
	}

	startWrite[0] = EEPROM_READ;
 80006b4:	2303      	movs	r3, #3
 80006b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	startWrite[1] = (address & 0x00FF0000) >> 16;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	startWrite[2] = (address & 0x0000FF00) >> 8;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	startWrite[3] = (address & 0x000000FF);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	result[1] = SPI1_NCSactivate();
 80006d6:	f7ff ff87 	bl	80005e8 <SPI1_NCSactivate>
 80006da:	4603      	mov	r3, r0
 80006dc:	617b      	str	r3, [r7, #20]
	result[2] = EEPROM_WriteOperation(startWrite, 4);
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff97 	bl	8000618 <EEPROM_WriteOperation>
 80006ea:	4603      	mov	r3, r0
 80006ec:	61bb      	str	r3, [r7, #24]
	result[3] = EEPROM_ReadOperation(pData, Size);
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f7ff ffa9 	bl	800064c <EEPROM_ReadOperation>
 80006fa:	4603      	mov	r3, r0
 80006fc:	61fb      	str	r3, [r7, #28]
	result[4] = SPI1_NCSdeactivate();
 80006fe:	f7ff ff7f 	bl	8000600 <SPI1_NCSdeactivate>
 8000702:	4603      	mov	r3, r0
 8000704:	623b      	str	r3, [r7, #32]

	if (0 == result[0] && 0 == result[1] && 0 == result[2] && 0 == result[3] && 0 == result[4])
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10d      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10a      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d107      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <EEPROM_ReadData+0xa8>
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <EEPROM_ReadData+0xa8>
		return 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	e001      	b.n	800072c <EEPROM_ReadData+0xac>
	else
		return (uint32_t)(-1);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295

}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f001 fbf5 	bl	8001f84 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fdf2 	bl	8001388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007a4:	230c      	movs	r3, #12
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f001 fc29 	bl	800200c <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 fde2 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000153c 	.word	0x2000153c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <HAL_ADC_MspInit+0xd0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d152      	bne.n	80008a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_ADC_MspInit+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800082a:	2304      	movs	r3, #4
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481c      	ldr	r0, [pc, #112]	; (80008b0 <HAL_ADC_MspInit+0xd8>)
 800083e:	f003 f82b 	bl	8003898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_ADC_MspInit+0xe0>)
 8000846:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800085c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000860:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800086c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000870:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000886:	f001 ff93 	bl	80027b0 <HAL_DMA_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000890:	f000 fd7a 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_ADC_MspInit+0xdc>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40012000 	.word	0x40012000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020800 	.word	0x40020800
 80008b4:	20001584 	.word	0x20001584
 80008b8:	40026410 	.word	0x40026410

080008bc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_DAC_Init+0x4c>)
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_DAC_Init+0x50>)
 80008ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_DAC_Init+0x4c>)
 80008d2:	f001 fefc 	bl	80026ce <HAL_DAC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008dc:	f000 fd54 	bl	8001388 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_DAC_Init+0x4c>)
 80008f0:	f001 ff0f 	bl	8002712 <HAL_DAC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 fd45 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200015e4 	.word	0x200015e4
 800090c:	40007400 	.word	0x40007400

08000910 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a15      	ldr	r2, [pc, #84]	; (8000984 <HAL_DAC_MspInit+0x74>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d123      	bne.n	800097a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_DAC_MspInit+0x78>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_DAC_MspInit+0x78>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_DAC_MspInit+0x7c>)
 8000976:	f002 ff8f 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40007400 	.word	0x40007400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_DMA_Init+0x60>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_DMA_Init+0x60>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_DMA_Init+0x60>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_DMA_Init+0x60>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <MX_DMA_Init+0x60>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_DMA_Init+0x60>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200e      	movs	r0, #14
 80009cc:	f001 fe49 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fe62 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2038      	movs	r0, #56	; 0x38
 80009dc:	f001 fe41 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009e0:	2038      	movs	r0, #56	; 0x38
 80009e2:	f001 fe5a 	bl	800269a <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ETH_Init+0x78>)
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <MX_ETH_Init+0x7c>)
 80009fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a12:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <MX_ETH_Init+0x80>)
 8000a42:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a56:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_ETH_Init+0x78>)
 8000a5a:	f002 fab3 	bl	8002fc4 <HAL_ETH_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000a64:	f000 fc90 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200015f8 	.word	0x200015f8
 8000a70:	40028000 	.word	0x40028000
 8000a74:	20000094 	.word	0x20000094

08000a78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 8096 	bne.w	8000bc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b44:	2332      	movs	r3, #50	; 0x32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <HAL_ETH_MspInit+0x160>)
 8000b60:	f002 fe9a 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b64:	2386      	movs	r3, #134	; 0x86
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_ETH_MspInit+0x164>)
 8000b80:	f002 fe8a 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <HAL_ETH_MspInit+0x168>)
 8000ba2:	f002 fe79 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <HAL_ETH_MspInit+0x16c>)
 8000bc4:	f002 fe68 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800

08000be8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a91      	ldr	r2, [pc, #580]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b8c      	ldr	r3, [pc, #560]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a8b      	ldr	r2, [pc, #556]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a7f      	ldr	r2, [pc, #508]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a79      	ldr	r2, [pc, #484]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b77      	ldr	r3, [pc, #476]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a73      	ldr	r2, [pc, #460]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b71      	ldr	r3, [pc, #452]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6d      	ldr	r2, [pc, #436]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <MX_GPIO_Init+0x260>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4862      	ldr	r0, [pc, #392]	; (8000e4c <MX_GPIO_Init+0x264>)
 8000cc4:	f002 ffac 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_NCS2_Pin|SPI3_NCS1_Pin|EEPROM_CS_Pin|NRF2_PWR_Pin
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f240 3126 	movw	r1, #806	; 0x326
 8000cce:	4860      	ldr	r0, [pc, #384]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000cd0:	f002 ffa6 	bl	8003c20 <HAL_GPIO_WritePin>
                          |NRF1_PWR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	485e      	ldr	r0, [pc, #376]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000cdc:	f002 ffa0 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP_RST_Pin|RDA_PWR_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f248 0101 	movw	r1, #32769	; 0x8001
 8000ce6:	485b      	ldr	r0, [pc, #364]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000ce8:	f002 ff9a 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000cf2:	4857      	ldr	r0, [pc, #348]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000cf4:	f002 ff94 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4856      	ldr	r0, [pc, #344]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000cfe:	f002 ff8f 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4855      	ldr	r0, [pc, #340]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000d08:	f002 ff8a 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	484e      	ldr	r0, [pc, #312]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000d24:	f002 fdb8 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF1_CE_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF1_CE_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4843      	ldr	r0, [pc, #268]	; (8000e4c <MX_GPIO_Init+0x264>)
 8000d40:	f002 fdaa 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI3_NCS2_Pin|SPI3_NCS1_Pin|LD3_Pin|EEPROM_CS_Pin
 8000d44:	f244 33a6 	movw	r3, #17318	; 0x43a6
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin|NRF2_PWR_Pin|NRF1_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	483c      	ldr	r0, [pc, #240]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000d5e:	f002 fd9b 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_IO0_Pin|ESP_IO2_Pin;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4837      	ldr	r0, [pc, #220]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000d78:	f002 fd8e 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin|ESP_RST_Pin|RDA_PWR_Pin;
 8000d7c:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	482f      	ldr	r0, [pc, #188]	; (8000e54 <MX_GPIO_Init+0x26c>)
 8000d96:	f002 fd7f 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF2_IRQ_Pin|NRF1_IRQ_Pin;
 8000d9a:	f248 0340 	movw	r3, #32832	; 0x8040
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4828      	ldr	r0, [pc, #160]	; (8000e50 <MX_GPIO_Init+0x268>)
 8000db0:	f002 fd72 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000dcc:	f002 fd64 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_GPIO_Init+0x270>)
 8000de4:	f002 fd58 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF2_CE_Pin;
 8000de8:	2340      	movs	r3, #64	; 0x40
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF2_CE_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x274>)
 8000e00:	f002 fd4a 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e16:	230a      	movs	r3, #10
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <MX_GPIO_Init+0x278>)
 8000e22:	f002 fd39 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_GPIO_Init+0x278>)
 8000e3c:	f002 fd2c 	bl	8003898 <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000

08000e64 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C2_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ea0:	f002 fed8 	bl	8003c54 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 fa6d 	bl	8001388 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000eb2:	f003 fa51 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 fa64 	bl	8001388 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C2_Init+0x74>)
 8000ec4:	f003 fa93 	bl	80043ee <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fa5b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000168c 	.word	0x2000168c
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	20303e5d 	.word	0x20303e5d

08000ee4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C4_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C4_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f20:	f002 fe98 	bl	8003c54 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 fa2d 	bl	8001388 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f32:	f003 fa11 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fa24 	bl	8001388 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f44:	f003 fa53 	bl	80043ee <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fa1b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20001640 	.word	0x20001640
 8000f5c:	40006000 	.word	0x40006000
 8000f60:	20303e5d 	.word	0x20303e5d

08000f64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b0      	sub	sp, #192	; 0xc0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2290      	movs	r2, #144	; 0x90
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 feb7 	bl	8009cf8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <HAL_I2C_MspInit+0x13c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d13e      	bne.n	8001012 <HAL_I2C_MspInit+0xae>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 ff7f 	bl	8004ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fb0:	f000 f9ea 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd4:	2312      	movs	r3, #18
 8000fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482d      	ldr	r0, [pc, #180]	; (80010a8 <HAL_I2C_MspInit+0x144>)
 8000ff4:	f002 fc50 	bl	8003898 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8000ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001010:	e042      	b.n	8001098 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_I2C_MspInit+0x148>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d13d      	bne.n	8001098 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800101c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001020:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4618      	mov	r0, r3
 800102e:	f003 ff3b 	bl	8004ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001038:	f000 f9a6 	bl	8001388 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001054:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800106e:	2304      	movs	r3, #4
 8001070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_I2C_MspInit+0x14c>)
 800107c:	f002 fc0c 	bl	8003898 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_I2C_MspInit+0x140>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	bf00      	nop
 800109a:	37c0      	adds	r7, #192	; 0xc0
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005800 	.word	0x40005800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40006000 	.word	0x40006000
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0a8      	sub	sp, #160	; 0xa0
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t nrf1_tx[33];
  uint8_t nrf1_rx[33] = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80010be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c2:	221d      	movs	r2, #29
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 fe16 	bl	8009cf8 <memset>
  uint8_t nrf2_tx[33];
  uint8_t nrf2_rx[33] = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	221d      	movs	r2, #29
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 fe0d 	bl	8009cf8 <memset>
  uint8_t eepromData[9] = {0};
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fec9 	bl	8001e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f8d8 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f7ff fd78 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 80010f8:	f7ff fc7c 	bl	80009f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010fc:	f000 fd6a 	bl	8001bd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001100:	f000 fe8e 	bl	8001e20 <MX_USB_OTG_FS_USB_Init>
  MX_DAC_Init();
 8001104:	f7ff fbda 	bl	80008bc <MX_DAC_Init>
  MX_SPI3_Init();
 8001108:	f000 f944 	bl	8001394 <MX_SPI3_Init>
  MX_TIM3_Init();
 800110c:	f000 fb4c 	bl	80017a8 <MX_TIM3_Init>
  MX_DMA_Init();
 8001110:	f7ff fc3e 	bl	8000990 <MX_DMA_Init>
  MX_UART7_Init();
 8001114:	f000 fd2e 	bl	8001b74 <MX_UART7_Init>
  MX_TIM2_Init();
 8001118:	f000 fac4 	bl	80016a4 <MX_TIM2_Init>
  MX_I2C2_Init();
 800111c:	f7ff fea2 	bl	8000e64 <MX_I2C2_Init>
  MX_I2C4_Init();
 8001120:	f7ff fee0 	bl	8000ee4 <MX_I2C4_Init>
  MX_ADC1_Init();
 8001124:	f7ff fb06 	bl	8000734 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001128:	f000 fbc0 	bl	80018ac <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */


  ESP_HTTPinit();
 800112c:	f007 fc9c 	bl	8008a68 <ESP_HTTPinit>

  EEPROM_ReadData(0, eepromData, 8);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2208      	movs	r2, #8
 8001134:	4619      	mov	r1, r3
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff faa2 	bl	8000680 <EEPROM_ReadData>
  printf((char*)eepromData);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fde2 	bl	8009d08 <iprintf>

  NRF_powerDown();
 8001144:	f008 f877 	bl	8009236 <NRF_powerDown>
  NRF_powerDown_B();
 8001148:	f008 fb1e 	bl	8009788 <NRF_powerDown_B>

  HAL_Delay(500);
 800114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001150:	f000 fef4 	bl	8001f3c <HAL_Delay>

  NRF_powerUp();
 8001154:	f008 f869 	bl	800922a <NRF_powerUp>
  NRF_powerUp_B();
 8001158:	f008 fb10 	bl	800977c <NRF_powerUp_B>

  HAL_Delay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f000 feec 	bl	8001f3c <HAL_Delay>

  printf("NRF1: 0x%02lx\n", NRF_powerCycle(HAL_Delay));
 8001164:	4849      	ldr	r0, [pc, #292]	; (800128c <main+0x1d8>)
 8001166:	f008 f8c8 	bl	80092fa <NRF_powerCycle>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	4848      	ldr	r0, [pc, #288]	; (8001290 <main+0x1dc>)
 8001170:	f008 fdca 	bl	8009d08 <iprintf>
  printf("NRF2: 0x%02lx\n", NRF_powerCycle_B(HAL_Delay));
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <main+0x1d8>)
 8001176:	f008 fb69 	bl	800984c <NRF_powerCycle_B>
 800117a:	4603      	mov	r3, r0
 800117c:	4619      	mov	r1, r3
 800117e:	4845      	ldr	r0, [pc, #276]	; (8001294 <main+0x1e0>)
 8001180:	f008 fdc2 	bl	8009d08 <iprintf>

  NRF_configure(true);
 8001184:	2001      	movs	r0, #1
 8001186:	f007 fe43 	bl	8008e10 <NRF_configure>
  NRF_configure_B(false);
 800118a:	2000      	movs	r0, #0
 800118c:	f008 f8e4 	bl	8009358 <NRF_configure_B>


  RDA5807mPowerOn();
 8001190:	f008 fd5c 	bl	8009c4c <RDA5807mPowerOn>
  RDA5807mInit(8920, 15);
 8001194:	210f      	movs	r1, #15
 8001196:	f242 20d8 	movw	r0, #8920	; 0x22d8
 800119a:	f008 fcef 	bl	8009b7c <RDA5807mInit>

  while(1)
  {
	  sprintf((char*)nrf1_tx, "%032ld", HAL_GetTick());
 800119e:	f000 fec1 	bl	8001f24 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a8:	493b      	ldr	r1, [pc, #236]	; (8001298 <main+0x1e4>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fe3a 	bl	8009e24 <siprintf>
	  sprintf((char*)nrf2_tx, "%032ld", 0x7FFFFFFF - HAL_GetTick());
 80011b0:	f000 feb8 	bl	8001f24 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80011c0:	461a      	mov	r2, r3
 80011c2:	4935      	ldr	r1, [pc, #212]	; (8001298 <main+0x1e4>)
 80011c4:	f008 fe2e 	bl	8009e24 <siprintf>

	  NRF_setW_TX_PAYLOAD(nrf1_tx, 32);
 80011c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011cc:	2120      	movs	r1, #32
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 ffb8 	bl	8009144 <NRF_setW_TX_PAYLOAD>
	  NRF_set_W_ACK_PAYLOAD_B(0, nrf2_tx, 32);
 80011d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d8:	2220      	movs	r2, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	2000      	movs	r0, #0
 80011de:	f008 fa7f 	bl	80096e0 <NRF_set_W_ACK_PAYLOAD_B>

	  NRF_CEactivate_B();
 80011e2:	f008 fabf 	bl	8009764 <NRF_CEactivate_B>
	  NRF_CEactivate();
 80011e6:	f008 f814 	bl	8009212 <NRF_CEactivate>
	  HAL_Delay(5);
 80011ea:	2005      	movs	r0, #5
 80011ec:	f000 fea6 	bl	8001f3c <HAL_Delay>
	  NRF_CEdeactivate_B();
 80011f0:	f008 fabe 	bl	8009770 <NRF_CEdeactivate_B>
	  NRF_CEdeactivate();
 80011f4:	f008 f813 	bl	800921e <NRF_CEdeactivate>

	  if(NRF_getIRQ())
 80011f8:	f008 f804 	bl	8009204 <NRF_getIRQ>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <main+0x15a>
	  {
		  printf("NRF1 IRQ\n");
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <main+0x1e8>)
 8001204:	f008 fe06 	bl	8009e14 <puts>
		  HAL_Delay(50);
 8001208:	2032      	movs	r0, #50	; 0x32
 800120a:	f000 fe97 	bl	8001f3c <HAL_Delay>
	  }

	  if(NRF_getIRQ_B())
 800120e:	f008 faa2 	bl	8009756 <NRF_getIRQ_B>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <main+0x170>
	  {
		  printf("NRF2 IRQ\n");
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <main+0x1ec>)
 800121a:	f008 fdfb 	bl	8009e14 <puts>
		  HAL_Delay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f000 fe8c 	bl	8001f3c <HAL_Delay>
	  }

	  uint8_t lng1 = NRF_postProcess(0, nrf1_rx);
 8001224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001228:	4619      	mov	r1, r3
 800122a:	2000      	movs	r0, #0
 800122c:	f008 f809 	bl	8009242 <NRF_postProcess>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	  uint8_t lng2 = NRF_postProcess_B(0, nrf2_rx);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	2000      	movs	r0, #0
 800123e:	f008 faa9 	bl	8009794 <NRF_postProcess_B>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e


	  if(lng1 && lng1 != (uint8_t)(-1))
 8001248:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00b      	beq.n	8001268 <main+0x1b4>
 8001250:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d007      	beq.n	8001268 <main+0x1b4>
	  {
		  printf("%s\n", nrf1_rx);
 8001258:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fdd9 	bl	8009e14 <puts>
		  HAL_Delay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f000 fe6a 	bl	8001f3c <HAL_Delay>
	  }
	  if(lng2 && lng2 != (uint8_t)(-1))
 8001268:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <main+0x1ce>
 8001270:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d004      	beq.n	8001282 <main+0x1ce>
	  {
		  printf("%s\n", nrf2_rx);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f008 fdc9 	bl	8009e14 <puts>
	  }

	  HAL_Delay(500);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f000 fe59 	bl	8001f3c <HAL_Delay>
  {
 800128a:	e788      	b.n	800119e <main+0xea>
 800128c:	08001f3d 	.word	0x08001f3d
 8001290:	0800b040 	.word	0x0800b040
 8001294:	0800b050 	.word	0x0800b050
 8001298:	0800b060 	.word	0x0800b060
 800129c:	0800b068 	.word	0x0800b068
 80012a0:	0800b074 	.word	0x0800b074

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2234      	movs	r2, #52	; 0x34
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f008 fd20 	bl	8009cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012c8:	f003 f8de 	bl	8004488 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <SystemClock_Config+0xdc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <SystemClock_Config+0xdc>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <SystemClock_Config+0xdc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <SystemClock_Config+0xe0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <SystemClock_Config+0xe0>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <SystemClock_Config+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001304:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001308:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001318:	2360      	movs	r3, #96	; 0x60
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001324:	2302      	movs	r3, #2
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f90b 	bl	8004548 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001338:	f000 f826 	bl	8001388 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800133c:	f003 f8b4 	bl	80044a8 <HAL_PWREx_EnableOverDrive>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001346:	f000 f81f 	bl	8001388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2103      	movs	r1, #3
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fb9c 	bl	8004aa4 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001372:	f000 f809 	bl	8001388 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3750      	adds	r7, #80	; 0x50
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_SPI3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_SPI3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_SPI3_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_SPI3_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_SPI3_Init+0x74>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ca:	2210      	movs	r2, #16
 80013cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_SPI3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e2:	2207      	movs	r2, #7
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ee:	2208      	movs	r2, #8
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_SPI3_Init+0x74>)
 80013f4:	f004 f980 	bl	80056f8 <HAL_SPI_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f7ff ffc3 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200014d8 	.word	0x200014d8
 800140c:	40003c00 	.word	0x40003c00

08001410 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_SPI_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_SPI_MspInit+0x80>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <HAL_SPI_MspInit+0x80>)
 8001438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_SPI_MspInit+0x80>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_SPI_MspInit+0x80>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_SPI_MspInit+0x80>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_SPI_MspInit+0x80>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001462:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001474:	2306      	movs	r3, #6
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SPI_MspInit+0x84>)
 8001480:	f002 fa0a 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40003c00 	.word	0x40003c00
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x44>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x44>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x44>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x44>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x44>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 fce6 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Stream3_IRQHandler+0x10>)
 800153a:	f001 fad9 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200018c4 	.word	0x200018c4

08001548 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA2_Stream0_IRQHandler+0x10>)
 800154e:	f001 facf 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20001584 	.word	0x20001584

0800155c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <UART7_IRQHandler+0x10>)
 8001562:	f006 f815 	bl	8007590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200017bc 	.word	0x200017bc

08001570 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
	}

return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	605a      	str	r2, [r3, #4]
	return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_isatty>:

int _isatty(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f008 fb12 	bl	8009c6c <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20080000 	.word	0x20080000
 8001674:	00000400 	.word	0x00000400
 8001678:	2000009c 	.word	0x2000009c
 800167c:	20001938 	.word	0x20001938

08001680 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d6:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <MX_TIM2_Init+0x100>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fe:	4829      	ldr	r0, [pc, #164]	; (80017a4 <MX_TIM2_Init+0x100>)
 8001700:	f004 ff5a 	bl	80065b8 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800170a:	f7ff fe3d 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001718:	4619      	mov	r1, r3
 800171a:	4822      	ldr	r0, [pc, #136]	; (80017a4 <MX_TIM2_Init+0x100>)
 800171c:	f005 f918 	bl	8006950 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001726:	f7ff fe2f 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800172a:	481e      	ldr	r0, [pc, #120]	; (80017a4 <MX_TIM2_Init+0x100>)
 800172c:	f004 ff9b 	bl	8006666 <HAL_TIM_PWM_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001736:	f7ff fe27 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <MX_TIM2_Init+0x100>)
 800174a:	f005 fd63 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001754:	f7ff fe18 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	; 0x60
 800175a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM2_Init+0x100>)
 8001770:	f004 ffda 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800177a:	f7ff fe05 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	2204      	movs	r2, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_TIM2_Init+0x100>)
 8001786:	f004 ffcf 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001790:	f7ff fdfa 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001794:	4803      	ldr	r0, [pc, #12]	; (80017a4 <MX_TIM2_Init+0x100>)
 8001796:	f000 f931 	bl	80019fc <HAL_TIM_MspPostInit>

}
 800179a:	bf00      	nop
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20001770 	.word	0x20001770

080017a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017dc:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <MX_TIM3_Init+0x100>)
 80017de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <MX_TIM3_Init+0xfc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001800:	4828      	ldr	r0, [pc, #160]	; (80018a4 <MX_TIM3_Init+0xfc>)
 8001802:	f004 fed9 	bl	80065b8 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800180c:	f7ff fdbc 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	4619      	mov	r1, r3
 800181c:	4821      	ldr	r0, [pc, #132]	; (80018a4 <MX_TIM3_Init+0xfc>)
 800181e:	f005 f897 	bl	8006950 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001828:	f7ff fdae 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800182c:	481d      	ldr	r0, [pc, #116]	; (80018a4 <MX_TIM3_Init+0xfc>)
 800182e:	f004 ff1a 	bl	8006666 <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001838:	f7ff fda6 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4816      	ldr	r0, [pc, #88]	; (80018a4 <MX_TIM3_Init+0xfc>)
 800184c:	f005 fce2 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001856:	f7ff fd97 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	; 0x60
 800185c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_TIM3_Init+0xfc>)
 8001872:	f004 ff59 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800187c:	f7ff fd84 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM3_Init+0xfc>)
 8001888:	f004 ff4e 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001892:	f7ff fd79 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM3_Init+0xfc>)
 8001898:	f000 f8b0 	bl	80019fc <HAL_TIM_MspPostInit>

}
 800189c:	bf00      	nop
 800189e:	3738      	adds	r7, #56	; 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200016d8 	.word	0x200016d8
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018d4:	4a25      	ldr	r2, [pc, #148]	; (800196c <MX_TIM9_Init+0xc0>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ea:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80018f8:	481b      	ldr	r0, [pc, #108]	; (8001968 <MX_TIM9_Init+0xbc>)
 80018fa:	f004 fe5d 	bl	80065b8 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001904:	f7ff fd40 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_TIM9_Init+0xbc>)
 8001916:	f005 f81b 	bl	8006950 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001920:	f7ff fd32 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <MX_TIM9_Init+0xbc>)
 8001926:	f004 fe9e 	bl	8006666 <HAL_TIM_PWM_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001930:	f7ff fd2a 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001934:	2360      	movs	r3, #96	; 0x60
 8001936:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM9_Init+0xbc>)
 800194c:	f004 feec 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001956:	f7ff fd17 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM9_Init+0xbc>)
 800195c:	f000 f84e 	bl	80019fc <HAL_TIM_MspPostInit>

}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	; 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20001724 	.word	0x20001724
 800196c:	40014000 	.word	0x40014000

08001970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d10c      	bne.n	800199c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800199a:	e022      	b.n	80019e2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_TIM_Base_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10c      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
}
 80019be:	e010      	b.n	80019e2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_TIM_Base_MspInit+0x88>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10b      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_TIM_Base_MspInit+0x80>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40014000 	.word	0x40014000

080019fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d139      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a47      	ldr	r2, [pc, #284]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b45      	ldr	r3, [pc, #276]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	483c      	ldr	r0, [pc, #240]	; (8001b5c <HAL_TIM_MspPostInit+0x160>)
 8001a6c:	f001 ff14 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a70:	2308      	movs	r3, #8
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4835      	ldr	r0, [pc, #212]	; (8001b60 <HAL_TIM_MspPostInit+0x164>)
 8001a8c:	f001 ff04 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001a90:	e05e      	b.n	8001b50 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <HAL_TIM_MspPostInit+0x168>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d138      	bne.n	8001b0e <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001adc:	2302      	movs	r3, #2
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4820      	ldr	r0, [pc, #128]	; (8001b68 <HAL_TIM_MspPostInit+0x16c>)
 8001ae8:	f001 fed6 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aec:	2310      	movs	r3, #16
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4816      	ldr	r0, [pc, #88]	; (8001b60 <HAL_TIM_MspPostInit+0x164>)
 8001b08:	f001 fec6 	bl	8003898 <HAL_GPIO_Init>
}
 8001b0c:	e020      	b.n	8001b50 <HAL_TIM_MspPostInit+0x154>
  else if(timHandle->Instance==TIM9)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <HAL_TIM_MspPostInit+0x170>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d11b      	bne.n	8001b50 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_TIM_MspPostInit+0x15c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b30:	2320      	movs	r3, #32
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_TIM_MspPostInit+0x174>)
 8001b4c:	f001 fea4 	bl	8003898 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40014000 	.word	0x40014000
 8001b70:	40021000 	.word	0x40021000

08001b74 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <MX_UART7_Init+0x5c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_UART7_Init+0x58>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_UART7_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_UART7_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_UART7_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_UART7_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_UART7_Init+0x58>)
 8001bb8:	f005 fbba 	bl	8007330 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001bc2:	f7ff fbe1 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200017bc 	.word	0x200017bc
 8001bd0:	40007800 	.word	0x40007800

08001bd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_USART3_UART_Init+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART3_UART_Init+0x58>)
 8001c18:	f005 fb8a 	bl	8007330 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c22:	f7ff fbb1 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001840 	.word	0x20001840
 8001c30:	40004800 	.word	0x40004800

08001c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0b0      	sub	sp, #192	; 0xc0
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2290      	movs	r2, #144	; 0x90
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 f84f 	bl	8009cf8 <memset>
  if(uartHandle->Instance==UART7)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <HAL_UART_MspInit+0x1a4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d173      	bne.n	8001d4c <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c68:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 f918 	bl	8004ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c7e:	f7ff fb83 	bl	8001388 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001ca0:	f043 0310 	orr.w	r3, r3, #16
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001cb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4841      	ldr	r0, [pc, #260]	; (8001de0 <HAL_UART_MspInit+0x1ac>)
 8001cda:	f001 fddd 	bl	8003898 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001ce0:	4a41      	ldr	r2, [pc, #260]	; (8001de8 <HAL_UART_MspInit+0x1b4>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001ce6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001cea:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cec:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001d1e:	4831      	ldr	r0, [pc, #196]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d20:	f000 fd46 	bl	80027b0 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d2a:	f7ff fb2d 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d32:	671a      	str	r2, [r3, #112]	; 0x70
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_UART_MspInit+0x1b0>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2052      	movs	r0, #82	; 0x52
 8001d40:	f000 fc8f 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001d44:	2052      	movs	r0, #82	; 0x52
 8001d46:	f000 fca8 	bl	800269a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d4a:	e041      	b.n	8001dd0 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_UART_MspInit+0x1b8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d13c      	bne.n	8001dd0 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f89f 	bl	8004ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001d70:	f7ff fb0a 	bl	8001388 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6313      	str	r3, [r2, #48]	; 0x30
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_UART_MspInit+0x1a8>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001da4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_UART_MspInit+0x1bc>)
 8001dcc:	f001 fd64 	bl	8003898 <HAL_GPIO_Init>
}
 8001dd0:	bf00      	nop
 8001dd2:	37c0      	adds	r7, #192	; 0xc0
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40007800 	.word	0x40007800
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021000 	.word	0x40021000
 8001de4:	200018c4 	.word	0x200018c4
 8001de8:	40026058 	.word	0x40026058
 8001dec:	40004800 	.word	0x40004800
 8001df0:	40020c00 	.word	0x40020c00

08001df4 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4804      	ldr	r0, [pc, #16]	; (8001e1c <_write+0x28>)
 8001e0c:	f005 fade 	bl	80073cc <HAL_UART_Transmit>
	return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20001840 	.word	0x20001840

08001e20 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e36:	490e      	ldr	r1, [pc, #56]	; (8001e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e4c:	4c0b      	ldr	r4, [pc, #44]	; (8001e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5a:	f7ff fc11 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f007 ff0b 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff f927 	bl	80010b4 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e74:	0800b83c 	.word	0x0800b83c
  ldr r2, =_sbss
 8001e78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e7c:	20001938 	.word	0x20001938

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>

08001e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 fbe0 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f805 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e92:	f7ff fb01 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fbfb 	bl	80026b6 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 fbc3 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20001924 	.word	0x20001924

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20001924 	.word	0x20001924

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e031      	b.n	8001ffe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fc18 	bl	80007d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_ADC_Init+0x84>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f970 	bl	80022b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
 8001fee:	e001      	b.n	8001ff4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	ffffeefd 	.word	0xffffeefd

0800200c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1c>
 8002024:	2302      	movs	r3, #2
 8002026:	e136      	b.n	8002296 <HAL_ADC_ConfigChannel+0x28a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b09      	cmp	r3, #9
 8002036:	d93a      	bls.n	80020ae <HAL_ADC_ConfigChannel+0xa2>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002040:	d035      	beq.n	80020ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68d9      	ldr	r1, [r3, #12]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3b1e      	subs	r3, #30
 8002058:	2207      	movs	r2, #7
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a8d      	ldr	r2, [pc, #564]	; (80022a4 <HAL_ADC_ConfigChannel+0x298>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10a      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68d9      	ldr	r1, [r3, #12]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	061a      	lsls	r2, r3, #24
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002086:	e035      	b.n	80020f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	4603      	mov	r3, r0
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4403      	add	r3, r0
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	409a      	lsls	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ac:	e022      	b.n	80020f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6919      	ldr	r1, [r3, #16]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4403      	add	r3, r0
 80020ea:	409a      	lsls	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d824      	bhi.n	8002146 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b05      	subs	r3, #5
 800210e:	221f      	movs	r2, #31
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43da      	mvns	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	400a      	ands	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b05      	subs	r3, #5
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
 8002144:	e04c      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d824      	bhi.n	8002198 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b23      	subs	r3, #35	; 0x23
 8002160:	221f      	movs	r2, #31
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	400a      	ands	r2, r1
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3b23      	subs	r3, #35	; 0x23
 800218a:	fa00 f203 	lsl.w	r2, r0, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e023      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b41      	subs	r3, #65	; 0x41
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43da      	mvns	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	400a      	ands	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b41      	subs	r3, #65	; 0x41
 80021d4:	fa00 f203 	lsl.w	r2, r0, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <HAL_ADC_ConfigChannel+0x29c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10a      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1f4>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 80021fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <HAL_ADC_ConfigChannel+0x29c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10f      	bne.n	800222a <HAL_ADC_ConfigChannel+0x21e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b12      	cmp	r3, #18
 8002210:	d10b      	bne.n	800222a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a25      	ldr	r2, [pc, #148]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002218:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800221c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002228:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_ADC_ConfigChannel+0x29c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12b      	bne.n	800228c <HAL_ADC_ConfigChannel+0x280>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <HAL_ADC_ConfigChannel+0x298>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d003      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x23a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b11      	cmp	r3, #17
 8002244:	d122      	bne.n	800228c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 800224c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002250:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800225c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_ADC_ConfigChannel+0x298>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d111      	bne.n	800228c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9a      	lsrs	r2, r3, #18
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800227e:	e002      	b.n	8002286 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3b01      	subs	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f9      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	10000012 	.word	0x10000012
 80022a8:	40012000 	.word	0x40012000
 80022ac:	40012300 	.word	0x40012300
 80022b0:	20000000 	.word	0x20000000
 80022b4:	431bde83 	.word	0x431bde83

080022b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022c0:	4b78      	ldr	r3, [pc, #480]	; (80024a4 <ADC_Init+0x1ec>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <ADC_Init+0x1ec>)
 80022c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022cc:	4b75      	ldr	r3, [pc, #468]	; (80024a4 <ADC_Init+0x1ec>)
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4973      	ldr	r1, [pc, #460]	; (80024a4 <ADC_Init+0x1ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <ADC_Init+0x1f0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e00f      	b.n	80023b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0202 	bic.w	r2, r2, #2
 80023c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	3b01      	subs	r3, #1
 800240c:	035a      	lsls	r2, r3, #13
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e007      	b.n	8002428 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	3b01      	subs	r3, #1
 8002444:	051a      	lsls	r2, r3, #20
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800246a:	025a      	lsls	r2, r3, #9
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	029a      	lsls	r2, r3, #10
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012300 	.word	0x40012300
 80024a8:	0f000001 	.word	0x0f000001

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	05fa0000 	.word	0x05fa0000

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	; (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff29 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff3e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff31 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffa2 	bl	8002608 <SysTick_Config>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e014      	b.n	800270a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe f90d 	bl	8000910 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002712:	b480      	push	{r7}
 8002714:	b087      	sub	sp, #28
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	795b      	ldrb	r3, [r3, #5]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_DAC_ConfigChannel+0x18>
 8002726:	2302      	movs	r3, #2
 8002728:	e03c      	b.n	80027a4 <HAL_DAC_ConfigChannel+0x92>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2202      	movs	r2, #2
 8002734:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	22c0      	movs	r2, #192	; 0xc0
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fbb2 	bl	8001f24 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e099      	b.n	8002900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ec:	e00f      	b.n	800280e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ee:	f7ff fb99 	bl	8001f24 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d908      	bls.n	800280e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2203      	movs	r2, #3
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e078      	b.n	8002900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e8      	bne.n	80027ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_DMA_Init+0x158>)
 8002828:	4013      	ands	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b04      	cmp	r3, #4
 8002866:	d107      	bne.n	8002878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d117      	bne.n	80028d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fb09 	bl	8002ecc <DMA_CheckFifoParam>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ce:	2301      	movs	r3, #1
 80028d0:	e016      	b.n	8002900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fac0 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 80028e0:	4603      	mov	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	e010803f 	.word	0xe010803f

0800290c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Start_IT+0x26>
 800292e:	2302      	movs	r3, #2
 8002930:	e048      	b.n	80029c4 <HAL_DMA_Start_IT+0xb8>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d137      	bne.n	80029b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fa52 	bl	8002e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	223f      	movs	r2, #63	; 0x3f
 8002966:	409a      	lsls	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0216 	orr.w	r2, r2, #22
 800297a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff faa3 	bl	8001f24 <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d008      	beq.n	80029fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e052      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_Abort+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4e:	e013      	b.n	8002a78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a50:	f7ff fa68 	bl	8001f24 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d90c      	bls.n	8002a78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e015      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e4      	bne.n	8002a50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	223f      	movs	r2, #63	; 0x3f
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00c      	b.n	8002ae4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2205      	movs	r2, #5
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_DMA_IRQHandler+0x258>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a92      	ldr	r2, [pc, #584]	; (8002d4c <HAL_DMA_IRQHandler+0x25c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2208      	movs	r2, #8
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2210      	movs	r2, #16
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2210      	movs	r2, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e01f      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2220      	movs	r2, #32
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808e 	beq.w	8002d8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d136      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x1da>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
        }
        return;
 8002d06:	e078      	b.n	8002dfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d108      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d030      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e02b      	b.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d027      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
 8002d46:	e022      	b.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0210 	bic.w	r2, r2, #16
 8002d6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d032      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d022      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2205      	movs	r2, #5
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d307      	bcc.n	8002dd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f2      	bne.n	8002dba <HAL_DMA_IRQHandler+0x2ca>
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dfa:	bf00      	nop
    }
  }
}
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d108      	bne.n	8002e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e42:	e007      	b.n	8002e54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <DMA_CalcBaseAndBitshift+0x60>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d908      	bls.n	8002ea0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e9e:	e006      	b.n	8002eae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	aaaaaaab 	.word	0xaaaaaaab
 8002ec4:	0800b78c 	.word	0x0800b78c
 8002ec8:	fffffc00 	.word	0xfffffc00

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002fd4:	4ba9      	ldr	r3, [pc, #676]	; (800327c <HAL_ETH_Init+0x2b8>)
 8002fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e181      	b.n	80032ee <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fd3a 	bl	8000a78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003004:	4b9e      	ldr	r3, [pc, #632]	; (8003280 <HAL_ETH_Init+0x2bc>)
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	4a9d      	ldr	r2, [pc, #628]	; (8003280 <HAL_ETH_Init+0x2bc>)
 800300a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300e:	6453      	str	r3, [r2, #68]	; 0x44
 8003010:	4b9b      	ldr	r3, [pc, #620]	; (8003280 <HAL_ETH_Init+0x2bc>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800301c:	4b99      	ldr	r3, [pc, #612]	; (8003284 <HAL_ETH_Init+0x2c0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a98      	ldr	r2, [pc, #608]	; (8003284 <HAL_ETH_Init+0x2c0>)
 8003022:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003026:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_ETH_Init+0x2c0>)
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4994      	ldr	r1, [pc, #592]	; (8003284 <HAL_ETH_Init+0x2c0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800304e:	f7fe ff69 	bl	8001f24 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003054:	e011      	b.n	800307a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003056:	f7fe ff65 	bl	8001f24 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003064:	d909      	bls.n	800307a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e139      	b.n	80032ee <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e4      	bne.n	8003056 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f023 031c 	bic.w	r3, r3, #28
 800309a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800309c:	f001 fed0 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 80030a0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4a78      	ldr	r2, [pc, #480]	; (8003288 <HAL_ETH_Init+0x2c4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d908      	bls.n	80030bc <HAL_ETH_Init+0xf8>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4a77      	ldr	r2, [pc, #476]	; (800328c <HAL_ETH_Init+0x2c8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d804      	bhi.n	80030bc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e027      	b.n	800310c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4a73      	ldr	r2, [pc, #460]	; (800328c <HAL_ETH_Init+0x2c8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d908      	bls.n	80030d6 <HAL_ETH_Init+0x112>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4a6d      	ldr	r2, [pc, #436]	; (800327c <HAL_ETH_Init+0x2b8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d204      	bcs.n	80030d6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f043 030c 	orr.w	r3, r3, #12
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e01a      	b.n	800310c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4a68      	ldr	r2, [pc, #416]	; (800327c <HAL_ETH_Init+0x2b8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d303      	bcc.n	80030e6 <HAL_ETH_Init+0x122>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <HAL_ETH_Init+0x2cc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d911      	bls.n	800310a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_ETH_Init+0x2cc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d908      	bls.n	8003100 <HAL_ETH_Init+0x13c>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4a68      	ldr	r2, [pc, #416]	; (8003294 <HAL_ETH_Init+0x2d0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d804      	bhi.n	8003100 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e005      	b.n	800310c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f043 0310 	orr.w	r3, r3, #16
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	e000      	b.n	800310c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800310a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003118:	2100      	movs	r1, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f954 	bl	80033c8 <HAL_ETH_WritePHYRegister>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800312a:	6939      	ldr	r1, [r7, #16]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9b1 	bl	8003494 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0d7      	b.n	80032ee <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800313e:	20ff      	movs	r0, #255	; 0xff
 8003140:	f7fe fefc 	bl	8001f3c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a5 	beq.w	8003298 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800314e:	f7fe fee9 	bl	8001f24 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	461a      	mov	r2, r3
 800315a:	2101      	movs	r1, #1
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8cb 	bl	80032f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003162:	f7fe fedf 	bl	8001f24 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d90f      	bls.n	8003194 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003178:	6939      	ldr	r1, [r7, #16]
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f98a 	bl	8003494 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0ac      	b.n	80032ee <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0da      	beq.n	8003154 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800319e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f90f 	bl	80033c8 <HAL_ETH_WritePHYRegister>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f96c 	bl	8003494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80031c4:	2301      	movs	r3, #1
 80031c6:	e092      	b.n	80032ee <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fe feac 	bl	8001f24 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	461a      	mov	r2, r3
 80031d4:	2101      	movs	r1, #1
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f88e 	bl	80032f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031dc:	f7fe fea2 	bl	8001f24 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90f      	bls.n	800320e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80031f2:	6939      	ldr	r1, [r7, #16]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f94d 	bl	8003494 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e06f      	b.n	80032ee <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0da      	beq.n	80031ce <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	461a      	mov	r2, r3
 800321e:	2110      	movs	r1, #16
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f869 	bl	80032f8 <HAL_ETH_ReadPHYRegister>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003230:	6939      	ldr	r1, [r7, #16]
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f92e 	bl	8003494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003240:	2301      	movs	r3, #1
 8003242:	e054      	b.n	80032ee <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e002      	b.n	800325e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	e035      	b.n	80032dc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e030      	b.n	80032dc <HAL_ETH_Init+0x318>
 800327a:	bf00      	nop
 800327c:	03938700 	.word	0x03938700
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	01312cff 	.word	0x01312cff
 800328c:	02160ebf 	.word	0x02160ebf
 8003290:	05f5e0ff 	.word	0x05f5e0ff
 8003294:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f889 	bl	80033c8 <HAL_ETH_WritePHYRegister>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032c0:	6939      	ldr	r1, [r7, #16]
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8e6 	bl	8003494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e00c      	b.n	80032ee <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032d8:	f7fe fe30 	bl	8001f3c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032dc:	6939      	ldr	r1, [r7, #16]
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8d8 	bl	8003494 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop

080032f8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	460b      	mov	r3, r1
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b82      	cmp	r3, #130	; 0x82
 8003318:	d101      	bne.n	800331e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	e050      	b.n	80033c0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2282      	movs	r2, #130	; 0x82
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 031c 	and.w	r3, r3, #28
 8003334:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8a1b      	ldrh	r3, [r3, #16]
 800333a:	02db      	lsls	r3, r3, #11
 800333c:	b29b      	uxth	r3, r3
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	019b      	lsls	r3, r3, #6
 8003348:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0302 	bic.w	r3, r3, #2
 8003358:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800336a:	f7fe fddb 	bl	8001f24 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003370:	e015      	b.n	800339e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003372:	f7fe fdd7 	bl	8001f24 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d309      	bcc.n	8003396 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e014      	b.n	80033c0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e4      	bne.n	8003372 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	460b      	mov	r3, r1
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b42      	cmp	r3, #66	; 0x42
 80033e8:	d101      	bne.n	80033ee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
 80033ec:	e04e      	b.n	800348c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2242      	movs	r2, #66	; 0x42
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 031c 	and.w	r3, r3, #28
 8003404:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8a1b      	ldrh	r3, [r3, #16]
 800340a:	02db      	lsls	r3, r3, #11
 800340c:	b29b      	uxth	r3, r3
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003414:	897b      	ldrh	r3, [r7, #10]
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7fe fd6e 	bl	8001f24 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800344a:	e015      	b.n	8003478 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800344c:	f7fe fd6a 	bl	8001f24 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345a:	d309      	bcc.n	8003470 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e00d      	b.n	800348c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e4      	bne.n	800344c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b0b0      	sub	sp, #192	; 0xc0
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80034c2:	2300      	movs	r3, #0
 80034c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80034da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034de:	663b      	str	r3, [r7, #96]	; 0x60
 80034e0:	e001      	b.n	80034e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80034e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034f0:	2300      	movs	r3, #0
 80034f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003568:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800356c:	4bab      	ldr	r3, [pc, #684]	; (800381c <ETH_MACDMAConfig+0x388>)
 800356e:	4013      	ands	r3, r2
 8003570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003574:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003578:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800357c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800357e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003580:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003586:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800358a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800358e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003594:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003598:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800359a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800359c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800359e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80035a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80035a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80035a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80035a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80035aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c8:	2001      	movs	r0, #1
 80035ca:	f7fe fcb7 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80035da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80035dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80035de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80035e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80035e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80035e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80035e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80035ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80035ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80035f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80035f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80035fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003604:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003606:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003612:	2001      	movs	r0, #1
 8003614:	f7fe fc92 	bl	8001f3c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003620:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800362a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003634:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003640:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003644:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003648:	4013      	ands	r3, r2
 800364a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800364e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003652:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003658:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800365a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800365e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003664:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800366a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800366c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003670:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003672:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003684:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003690:	2001      	movs	r0, #1
 8003692:	f7fe fc53 	bl	8001f3c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800369e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80036a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80036a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7fe fc3e 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80036ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80036d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80036ee:	2304      	movs	r3, #4
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80036f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80036f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800370e:	2300      	movs	r3, #0
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003712:	2300      	movs	r3, #0
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f241 0318 	movw	r3, #4120	; 0x1018
 800371e:	4413      	add	r3, r2
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <ETH_MACDMAConfig+0x38c>)
 800372c:	4013      	ands	r3, r2
 800372e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003732:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003734:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003736:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003738:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800373a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800373c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800373e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003740:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003742:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003744:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003746:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003748:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800374a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800374e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003752:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	f241 0318 	movw	r3, #4120	; 0x1018
 8003766:	4413      	add	r3, r2
 8003768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800376c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f241 0318 	movw	r3, #4120	; 0x1018
 8003776:	4413      	add	r3, r2
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800377e:	2001      	movs	r0, #1
 8003780:	f7fe fbdc 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	f241 0318 	movw	r3, #4120	; 0x1018
 800378c:	4413      	add	r3, r2
 800378e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003792:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003798:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800379c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80037a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80037a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80037aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80037ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f7fe fbb5 	bl	8001f3c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10d      	bne.n	8003804 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80037f0:	4413      	add	r3, r2
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <ETH_MACDMAConfig+0x390>)
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8003800:	440b      	add	r3, r1
 8003802:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	461a      	mov	r2, r3
 800380a:	2100      	movs	r1, #0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f80b 	bl	8003828 <ETH_MACAddressConfig>
}
 8003812:	bf00      	nop
 8003814:	37c0      	adds	r7, #192	; 0xc0
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	ff20810f 	.word	0xff20810f
 8003820:	f8de3f23 	.word	0xf8de3f23
 8003824:	00010040 	.word	0x00010040

08003828 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3305      	adds	r3, #5
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	3204      	adds	r2, #4
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <ETH_MACAddressConfig+0x68>)
 800384a:	4413      	add	r3, r2
 800384c:	461a      	mov	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3303      	adds	r3, #3
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	061a      	lsls	r2, r3, #24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3302      	adds	r3, #2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3301      	adds	r3, #1
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	4313      	orrs	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <ETH_MACAddressConfig+0x6c>)
 800387a:	4413      	add	r3, r2
 800387c:	461a      	mov	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6013      	str	r3, [r2, #0]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40028040 	.word	0x40028040
 8003894:	40028044 	.word	0x40028044

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e175      	b.n	8003ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	f040 8164 	bne.w	8003b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d005      	beq.n	80038ee <HAL_GPIO_Init+0x56>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d130      	bne.n	8003950 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	2203      	movs	r2, #3
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003924:	2201      	movs	r2, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 0201 	and.w	r2, r3, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b03      	cmp	r3, #3
 800395a:	d017      	beq.n	800398c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d123      	bne.n	80039e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	08da      	lsrs	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3208      	adds	r2, #8
 80039a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	08da      	lsrs	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3208      	adds	r2, #8
 80039da:	69b9      	ldr	r1, [r7, #24]
 80039dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80be 	beq.w	8003b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b63      	ldr	r3, [pc, #396]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a3a:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <HAL_GPIO_Init+0x328>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_GPIO_Init+0x32c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d037      	beq.n	8003ad6 <HAL_GPIO_Init+0x23e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_GPIO_Init+0x330>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_GPIO_Init+0x23a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02b      	beq.n	8003ace <HAL_GPIO_Init+0x236>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a55      	ldr	r2, [pc, #340]	; (8003bd0 <HAL_GPIO_Init+0x338>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d025      	beq.n	8003aca <HAL_GPIO_Init+0x232>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a54      	ldr	r2, [pc, #336]	; (8003bd4 <HAL_GPIO_Init+0x33c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01f      	beq.n	8003ac6 <HAL_GPIO_Init+0x22e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a53      	ldr	r2, [pc, #332]	; (8003bd8 <HAL_GPIO_Init+0x340>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d019      	beq.n	8003ac2 <HAL_GPIO_Init+0x22a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_GPIO_Init+0x344>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_GPIO_Init+0x226>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a51      	ldr	r2, [pc, #324]	; (8003be0 <HAL_GPIO_Init+0x348>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00d      	beq.n	8003aba <HAL_GPIO_Init+0x222>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a50      	ldr	r2, [pc, #320]	; (8003be4 <HAL_GPIO_Init+0x34c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x21e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4f      	ldr	r2, [pc, #316]	; (8003be8 <HAL_GPIO_Init+0x350>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003aae:	2309      	movs	r3, #9
 8003ab0:	e012      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	e010      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	e00e      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003aba:	2307      	movs	r3, #7
 8003abc:	e00c      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003abe:	2306      	movs	r3, #6
 8003ac0:	e00a      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	e008      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	e006      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e004      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e002      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_GPIO_Init+0x240>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	f002 0203 	and.w	r2, r2, #3
 8003ade:	0092      	lsls	r2, r2, #2
 8003ae0:	4093      	lsls	r3, r2
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ae8:	4935      	ldr	r1, [pc, #212]	; (8003bc0 <HAL_GPIO_Init+0x328>)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3302      	adds	r3, #2
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1a:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b20:	4b32      	ldr	r3, [pc, #200]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b44:	4a29      	ldr	r2, [pc, #164]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_GPIO_Init+0x354>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	f67f ae86 	bls.w	80038b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3724      	adds	r7, #36	; 0x24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40021400 	.word	0x40021400
 8003bdc:	40021800 	.word	0x40021800
 8003be0:	40021c00 	.word	0x40021c00
 8003be4:	40022000 	.word	0x40022000
 8003be8:	40022400 	.word	0x40022400
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e001      	b.n	8003c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07f      	b.n	8003d66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd f972 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e006      	b.n	8003cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d104      	bne.n	8003cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_I2C_Init+0x11c>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	02008000 	.word	0x02008000

08003d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	460b      	mov	r3, r1
 8003d82:	817b      	strh	r3, [r7, #10]
 8003d84:	4613      	mov	r3, r2
 8003d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	f040 80da 	bne.w	8003f4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x30>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0d3      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dac:	f7fe f8ba 	bl	8001f24 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f8f0 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0be      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	893a      	ldrh	r2, [r7, #8]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2bff      	cmp	r3, #255	; 0xff
 8003dfe:	d90e      	bls.n	8003e1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	22ff      	movs	r2, #255	; 0xff
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	8979      	ldrh	r1, [r7, #10]
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <HAL_I2C_Master_Transmit+0x1e0>)
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fa6c 	bl	80042f4 <I2C_TransferConfig>
 8003e1c:	e06c      	b.n	8003ef8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	4b48      	ldr	r3, [pc, #288]	; (8003f54 <HAL_I2C_Master_Transmit+0x1e0>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa5b 	bl	80042f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e3e:	e05b      	b.n	8003ef8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f8ed 	bl	8004024 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e07b      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d034      	beq.n	8003ef8 <HAL_I2C_Master_Transmit+0x184>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d130      	bne.n	8003ef8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f87f 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e04d      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d90e      	bls.n	8003ed8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8979      	ldrh	r1, [r7, #10]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fa0f 	bl	80042f4 <I2C_TransferConfig>
 8003ed6:	e00f      	b.n	8003ef8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f9fe 	bl	80042f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d19e      	bne.n	8003e40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f8cc 	bl	80040a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e01a      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_I2C_Master_Transmit+0x1e4>)
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	80002000 	.word	0x80002000
 8003f58:	fe00e800 	.word	0xfe00e800

08003f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d103      	bne.n	8003f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	619a      	str	r2, [r3, #24]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e022      	b.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d01e      	beq.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fd ffb1 	bl	8001f24 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e00f      	b.n	800401c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	429a      	cmp	r2, r3
 8004018:	d0cd      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004030:	e02c      	b.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f870 	bl	800411c <I2C_IsErrorOccurred>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e02a      	b.n	800409c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d01e      	beq.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd ff69 	bl	8001f24 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e007      	b.n	800409c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d1cb      	bne.n	8004032 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b0:	e028      	b.n	8004104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f830 	bl	800411c <I2C_IsErrorOccurred>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e026      	b.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fd ff2d 	bl	8001f24 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d113      	bne.n	8004104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e007      	b.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b20      	cmp	r3, #32
 8004110:	d1cf      	bne.n	80040b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d075      	beq.n	8004234 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2210      	movs	r2, #16
 800414e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004150:	e056      	b.n	8004200 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d052      	beq.n	8004200 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd fee3 	bl	8001f24 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_IsErrorOccurred+0x54>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d147      	bne.n	8004200 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004182:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004192:	d12e      	bne.n	80041f2 <I2C_IsErrorOccurred+0xd6>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d02a      	beq.n	80041f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d027      	beq.n	80041f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041b2:	f7fd feb7 	bl	8001f24 <HAL_GetTick>
 80041b6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b8:	e01b      	b.n	80041f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041ba:	f7fd feb3 	bl	8001f24 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b19      	cmp	r3, #25
 80041c6:	d914      	bls.n	80041f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d1dc      	bne.n	80041ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d003      	beq.n	8004216 <I2C_IsErrorOccurred+0xfa>
 800420e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004212:	2b00      	cmp	r3, #0
 8004214:	d09d      	beq.n	8004152 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2220      	movs	r2, #32
 8004224:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01c      	beq.n	80042e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe56 	bl	8003f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <I2C_IsErrorOccurred+0x1d4>)
 80042bc:	400b      	ands	r3, r1
 80042be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	fe00e800 	.word	0xfe00e800

080042f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	4613      	mov	r3, r2
 8004304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800430c:	7a7b      	ldrb	r3, [r7, #9]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004314:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	4313      	orrs	r3, r2
 800431e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004322:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	0d5b      	lsrs	r3, r3, #21
 800432e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <I2C_TransferConfig+0x60>)
 8004334:	430b      	orrs	r3, r1
 8004336:	43db      	mvns	r3, r3
 8004338:	ea02 0103 	and.w	r1, r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	03ff63ff 	.word	0x03ff63ff

08004358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	d138      	bne.n	80043e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004378:	2302      	movs	r3, #2
 800437a:	e032      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d139      	bne.n	8004478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800440e:	2302      	movs	r3, #2
 8004410:	e033      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40007000 	.word	0x40007000

080044a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_PWREx_EnableOverDrive+0x98>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <HAL_PWREx_EnableOverDrive+0x98>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_PWREx_EnableOverDrive+0x98>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044d6:	f7fd fd25 	bl	8001f24 <HAL_GetTick>
 80044da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044dc:	e009      	b.n	80044f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044de:	f7fd fd21 	bl	8001f24 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ec:	d901      	bls.n	80044f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e022      	b.n	8004538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d1ee      	bne.n	80044de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800450c:	f7fd fd0a 	bl	8001f24 <HAL_GetTick>
 8004510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004512:	e009      	b.n	8004528 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004514:	f7fd fd06 	bl	8001f24 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004522:	d901      	bls.n	8004528 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e007      	b.n	8004538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_PWREx_EnableOverDrive+0x9c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004534:	d1ee      	bne.n	8004514 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000

08004548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e29b      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8087 	beq.w	800467a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800456c:	4b96      	ldr	r3, [pc, #600]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b04      	cmp	r3, #4
 8004576:	d00c      	beq.n	8004592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004578:	4b93      	ldr	r3, [pc, #588]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d112      	bne.n	80045aa <HAL_RCC_OscConfig+0x62>
 8004584:	4b90      	ldr	r3, [pc, #576]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004590:	d10b      	bne.n	80045aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004592:	4b8d      	ldr	r3, [pc, #564]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d06c      	beq.n	8004678 <HAL_RCC_OscConfig+0x130>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d168      	bne.n	8004678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e275      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x7a>
 80045b4:	4b84      	ldr	r3, [pc, #528]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a83      	ldr	r2, [pc, #524]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e02e      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x9c>
 80045ca:	4b7f      	ldr	r3, [pc, #508]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7e      	ldr	r2, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b7c      	ldr	r3, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7b      	ldr	r2, [pc, #492]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0xc0>
 80045ee:	4b76      	ldr	r3, [pc, #472]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a75      	ldr	r2, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b73      	ldr	r3, [pc, #460]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xd8>
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6e      	ldr	r2, [pc, #440]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6b      	ldr	r2, [pc, #428]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd fc7c 	bl	8001f24 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd fc78 	bl	8001f24 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e229      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fc68 	bl	8001f24 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fc64 	bl	8001f24 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e215      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x110>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d069      	beq.n	800475a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x190>
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1e9      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	493d      	ldr	r1, [pc, #244]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	e040      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d023      	beq.n	8004728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fc1a 	bl	8001f24 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fd fc16 	bl	8001f24 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1c7      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4929      	ldr	r1, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
 8004726:	e018      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fd fbf6 	bl	8001f24 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473c:	f7fd fbf2 	bl	8001f24 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1a3      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d038      	beq.n	80047d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d019      	beq.n	80047a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7fd fbd3 	bl	8001f24 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7fd fbcf 	bl	8001f24 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e180      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 8004796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x23a>
 80047a0:	e01a      	b.n	80047d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <HAL_RCC_OscConfig+0x280>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd fbb9 	bl	8001f24 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b6:	f7fd fbb5 	bl	8001f24 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d903      	bls.n	80047cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e166      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
 80047c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b92      	ldr	r3, [pc, #584]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a4 	beq.w	800492e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a88      	ldr	r2, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b86      	ldr	r3, [pc, #536]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480e:	4b83      	ldr	r3, [pc, #524]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800481a:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fd fb7d 	bl	8001f24 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fd fb79 	bl	8001f24 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e12a      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004840:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x31a>
 8004854:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a6f      	ldr	r2, [pc, #444]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	e02d      	b.n	80048be <HAL_RCC_OscConfig+0x376>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x33c>
 800486a:	4b6b      	ldr	r3, [pc, #428]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a6a      	ldr	r2, [pc, #424]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
 8004876:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a67      	ldr	r2, [pc, #412]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
 8004882:	e01c      	b.n	80048be <HAL_RCC_OscConfig+0x376>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x35e>
 800488c:	4b62      	ldr	r3, [pc, #392]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4a61      	ldr	r2, [pc, #388]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6713      	str	r3, [r2, #112]	; 0x70
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a5e      	ldr	r2, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x376>
 80048a6:	4b5c      	ldr	r3, [pc, #368]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	4a5b      	ldr	r2, [pc, #364]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c6:	f7fd fb2d 	bl	8001f24 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fd fb29 	bl	8001f24 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0d8      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCC_OscConfig+0x386>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fd fb17 	bl	8001f24 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fd fb13 	bl	8001f24 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0c2      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ee      	bne.n	80048fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80ae 	beq.w	8004a94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004938:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d06d      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d14b      	bne.n	80049e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a31      	ldr	r2, [pc, #196]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd fae4 	bl	8001f24 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd fae0 	bl	8001f24 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e091      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	019b      	lsls	r3, r3, #6
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	071b      	lsls	r3, r3, #28
 80049aa:	491b      	ldr	r1, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd fab2 	bl	8001f24 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fd faae 	bl	8001f24 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e05f      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x47c>
 80049e2:	e057      	b.n	8004a94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fa98 	bl	8001f24 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd fa94 	bl	8001f24 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e045      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4b0>
 8004a16:	e03d      	b.n	8004a94 <HAL_RCC_OscConfig+0x54c>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a20:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCC_OscConfig+0x558>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d030      	beq.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d129      	bne.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d122      	bne.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d119      	bne.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d10f      	bne.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0d0      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b6a      	ldr	r3, [pc, #424]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d910      	bls.n	8004aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 020f 	bic.w	r2, r3, #15
 8004ad2:	4965      	ldr	r1, [pc, #404]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d040      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d115      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e073      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4936      	ldr	r1, [pc, #216]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fd f9c4 	bl	8001f24 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd f9c0 	bl	8001f24 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e053      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d210      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 020f 	bic.w	r2, r3, #15
 8004bde:	4922      	ldr	r1, [pc, #136]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490a      	ldr	r1, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1cc>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1d0>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1d4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd f920 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023c00 	.word	0x40023c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	0800b774 	.word	0x0800b774
 8004c74:	20000000 	.word	0x20000000
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c94:	4b67      	ldr	r3, [pc, #412]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d00d      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	f200 80bd 	bhi.w	8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cae:	e0b7      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cb2:	60bb      	str	r3, [r7, #8]
      break;
 8004cb4:	e0b7      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cb6:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004cb8:	60bb      	str	r3, [r7, #8]
      break;
 8004cba:	e0b4      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cbc:	4b5d      	ldr	r3, [pc, #372]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04d      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd2:	4b58      	ldr	r3, [pc, #352]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	ea02 0800 	and.w	r8, r2, r0
 8004cea:	ea03 0901 	and.w	r9, r3, r1
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	014b      	lsls	r3, r1, #5
 8004cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d00:	0142      	lsls	r2, r0, #5
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	ebb0 0008 	subs.w	r0, r0, r8
 8004d0a:	eb61 0109 	sbc.w	r1, r1, r9
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d1c:	0182      	lsls	r2, r0, #6
 8004d1e:	1a12      	subs	r2, r2, r0
 8004d20:	eb63 0301 	sbc.w	r3, r3, r1
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	00d9      	lsls	r1, r3, #3
 8004d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d32:	00d0      	lsls	r0, r2, #3
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	eb12 0208 	adds.w	r2, r2, r8
 8004d3c:	eb43 0309 	adc.w	r3, r3, r9
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	0259      	lsls	r1, r3, #9
 8004d4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d4e:	0250      	lsls	r0, r2, #9
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	f7fb fac6 	bl	80002f0 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e04a      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	461a      	mov	r2, r3
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	ea02 0400 	and.w	r4, r2, r0
 8004d86:	ea03 0501 	and.w	r5, r3, r1
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	014b      	lsls	r3, r1, #5
 8004d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d9c:	0142      	lsls	r2, r0, #5
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	1b00      	subs	r0, r0, r4
 8004da4:	eb61 0105 	sbc.w	r1, r1, r5
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	018b      	lsls	r3, r1, #6
 8004db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004db6:	0182      	lsls	r2, r0, #6
 8004db8:	1a12      	subs	r2, r2, r0
 8004dba:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	00d9      	lsls	r1, r3, #3
 8004dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dcc:	00d0      	lsls	r0, r2, #3
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	1912      	adds	r2, r2, r4
 8004dd4:	eb45 0303 	adc.w	r3, r5, r3
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	0299      	lsls	r1, r3, #10
 8004de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004de6:	0290      	lsls	r0, r2, #10
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f7fb fa7a 	bl	80002f0 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	60bb      	str	r3, [r7, #8]
      break;
 8004e1e:	e002      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e22:	60bb      	str	r3, [r7, #8]
      break;
 8004e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e26:	68bb      	ldr	r3, [r7, #8]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	007a1200 	.word	0x007a1200

08004e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000000 	.word	0x20000000

08004e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e5c:	f7ff fff0 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0a9b      	lsrs	r3, r3, #10
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0800b784 	.word	0x0800b784

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e84:	f7ff ffdc 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0b5b      	lsrs	r3, r3, #13
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800b784 	.word	0x0800b784

08004ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d012      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ed0:	4b69      	ldr	r3, [pc, #420]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a68      	ldr	r2, [pc, #416]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eda:	6093      	str	r3, [r2, #8]
 8004edc:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	4964      	ldr	r1, [pc, #400]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d017      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f02:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	4959      	ldr	r1, [pc, #356]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f20:	d101      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f3e:	4b4e      	ldr	r3, [pc, #312]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	494a      	ldr	r1, [pc, #296]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 808b 	beq.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b3a      	ldr	r3, [pc, #232]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	4a39      	ldr	r2, [pc, #228]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	; 0x40
 8004f98:	4b37      	ldr	r3, [pc, #220]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fa4:	4b35      	ldr	r3, [pc, #212]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a34      	ldr	r2, [pc, #208]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb0:	f7fc ffb8 	bl	8001f24 <HAL_GetTick>
 8004fb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb8:	f7fc ffb4 	bl	8001f24 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e38f      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fca:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd6:	4b28      	ldr	r3, [pc, #160]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d035      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d02e      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800501c:	4b16      	ldr	r3, [pc, #88]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d114      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fc ff7c 	bl	8001f24 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502e:	e00a      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fc ff78 	bl	8001f24 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e351      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ee      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505e:	d111      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800506e:	400b      	ands	r3, r1
 8005070:	4901      	ldr	r1, [pc, #4]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
 8005076:	e00b      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005078:	40023800 	.word	0x40023800
 800507c:	40007000 	.word	0x40007000
 8005080:	0ffffcff 	.word	0x0ffffcff
 8005084:	4bb3      	ldr	r3, [pc, #716]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4ab2      	ldr	r2, [pc, #712]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800508e:	6093      	str	r3, [r2, #8]
 8005090:	4bb0      	ldr	r3, [pc, #704]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509c:	49ad      	ldr	r1, [pc, #692]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d010      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ae:	4ba9      	ldr	r3, [pc, #676]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b4:	4aa7      	ldr	r2, [pc, #668]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050be:	4ba5      	ldr	r3, [pc, #660]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	49a2      	ldr	r1, [pc, #648]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050dc:	4b9d      	ldr	r3, [pc, #628]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ea:	499a      	ldr	r1, [pc, #616]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050fe:	4b95      	ldr	r3, [pc, #596]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510c:	4991      	ldr	r1, [pc, #580]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005120:	4b8c      	ldr	r3, [pc, #560]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	4989      	ldr	r1, [pc, #548]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005142:	4b84      	ldr	r3, [pc, #528]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4980      	ldr	r1, [pc, #512]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005164:	4b7b      	ldr	r3, [pc, #492]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f023 0203 	bic.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	4978      	ldr	r1, [pc, #480]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005186:	4b73      	ldr	r3, [pc, #460]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f023 020c 	bic.w	r2, r3, #12
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005194:	496f      	ldr	r1, [pc, #444]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051a8:	4b6a      	ldr	r3, [pc, #424]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	4967      	ldr	r1, [pc, #412]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051ca:	4b62      	ldr	r3, [pc, #392]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	495e      	ldr	r1, [pc, #376]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ec:	4b59      	ldr	r3, [pc, #356]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	4956      	ldr	r1, [pc, #344]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800520e:	4b51      	ldr	r3, [pc, #324]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	494d      	ldr	r1, [pc, #308]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005230:	4b48      	ldr	r3, [pc, #288]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	4945      	ldr	r1, [pc, #276]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005252:	4b40      	ldr	r3, [pc, #256]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	493c      	ldr	r1, [pc, #240]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005274:	4b37      	ldr	r3, [pc, #220]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	4934      	ldr	r1, [pc, #208]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d011      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a4:	492b      	ldr	r1, [pc, #172]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d101      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e4:	491b      	ldr	r1, [pc, #108]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005308:	4912      	ldr	r1, [pc, #72]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532c:	4909      	ldr	r1, [pc, #36]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00f      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	e002      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800
 8005358:	4986      	ldr	r1, [pc, #536]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800536c:	4b81      	ldr	r3, [pc, #516]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537c:	497d      	ldr	r1, [pc, #500]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d006      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80d6 	beq.w	8005544 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005398:	4b76      	ldr	r3, [pc, #472]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a75      	ldr	r2, [pc, #468]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a4:	f7fc fdbe 	bl	8001f24 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ac:	f7fc fdba 	bl	8001f24 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e195      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053be:	4b6d      	ldr	r3, [pc, #436]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d021      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d11d      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ec:	4b61      	ldr	r3, [pc, #388]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f2:	0e1b      	lsrs	r3, r3, #24
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	019a      	lsls	r2, r3, #6
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	061b      	lsls	r3, r3, #24
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	071b      	lsls	r3, r3, #28
 8005412:	4958      	ldr	r1, [pc, #352]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02e      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005444:	d129      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005446:	4b4b      	ldr	r3, [pc, #300]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005454:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545a:	0f1b      	lsrs	r3, r3, #28
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	019a      	lsls	r2, r3, #6
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	041b      	lsls	r3, r3, #16
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	431a      	orrs	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	071b      	lsls	r3, r3, #28
 800547a:	493e      	ldr	r1, [pc, #248]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005482:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	f023 021f 	bic.w	r2, r3, #31
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	3b01      	subs	r3, #1
 8005492:	4938      	ldr	r1, [pc, #224]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01d      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054b4:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ba:	0f1b      	lsrs	r3, r3, #28
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	431a      	orrs	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	4926      	ldr	r1, [pc, #152]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d011      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	071b      	lsls	r3, r3, #28
 800550a:	491a      	ldr	r1, [pc, #104]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005512:	4b18      	ldr	r3, [pc, #96]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551e:	f7fc fd01 	bl	8001f24 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005526:	f7fc fcfd 	bl	8001f24 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e0d8      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b01      	cmp	r3, #1
 8005548:	f040 80ce 	bne.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fc fce4 	bl	8001f24 <HAL_GetTick>
 800555c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800555e:	e00b      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005560:	f7fc fce0 	bl	8001f24 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d904      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0bb      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005578:	4b5e      	ldr	r3, [pc, #376]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005584:	d0ec      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02e      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055ae:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	0f1b      	lsrs	r3, r3, #28
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	4944      	ldr	r1, [pc, #272]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055ea:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	493d      	ldr	r1, [pc, #244]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d022      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005618:	d11d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800561a:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	0e1b      	lsrs	r3, r3, #24
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005628:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	019a      	lsls	r2, r3, #6
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	431a      	orrs	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	071b      	lsls	r3, r3, #28
 800564e:	4929      	ldr	r1, [pc, #164]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d028      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	019a      	lsls	r2, r3, #6
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	431a      	orrs	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	4917      	ldr	r1, [pc, #92]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4911      	ldr	r1, [pc, #68]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fc fc30 	bl	8001f24 <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056c8:	f7fc fc2c 	bl	8001f24 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e007      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e6:	d1ef      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800

080056f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e09d      	b.n	8005846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d108      	bne.n	8005724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571a:	d009      	beq.n	8005730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	61da      	str	r2, [r3, #28]
 8005722:	e005      	b.n	8005730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb fe60 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005770:	d902      	bls.n	8005778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e002      	b.n	800577e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800577c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005786:	d007      	beq.n	8005798 <HAL_SPI_Init+0xa0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005790:	d002      	beq.n	8005798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	ea42 0103 	orr.w	r1, r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 0204 	and.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005814:	ea42 0103 	orr.w	r1, r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_Transmit+0x22>
 800586c:	2302      	movs	r3, #2
 800586e:	e158      	b.n	8005b22 <HAL_SPI_Transmit+0x2d4>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005878:	f7fc fb54 	bl	8001f24 <HAL_GetTick>
 800587c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005892:	e13d      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x52>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058a4:	e134      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d10f      	bne.n	8005912 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d007      	beq.n	8005930 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005938:	d94b      	bls.n	80059d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <HAL_SPI_Transmit+0xfa>
 8005942:	8afb      	ldrh	r3, [r7, #22]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d13e      	bne.n	80059c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	1c9a      	adds	r2, r3, #2
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800596c:	e02b      	b.n	80059c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d112      	bne.n	80059a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a0:	e011      	b.n	80059c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a2:	f7fc fabf 	bl	8001f24 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d803      	bhi.n	80059ba <HAL_SPI_Transmit+0x16c>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_Transmit+0x172>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c4:	e0a4      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ce      	bne.n	800596e <HAL_SPI_Transmit+0x120>
 80059d0:	e07c      	b.n	8005acc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Transmit+0x192>
 80059da:	8afb      	ldrh	r3, [r7, #22]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d170      	bne.n	8005ac2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d912      	bls.n	8005a10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b02      	subs	r3, #2
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0e:	e058      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a36:	e044      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d12b      	bne.n	8005a9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d912      	bls.n	8005a76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b02      	subs	r3, #2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a74:	e025      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	7812      	ldrb	r2, [r2, #0]
 8005a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9c:	e011      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9e:	f7fc fa41 	bl	8001f24 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d803      	bhi.n	8005ab6 <HAL_SPI_Transmit+0x268>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d102      	bne.n	8005abc <HAL_SPI_Transmit+0x26e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ac0:	e026      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1b5      	bne.n	8005a38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fd07 	bl	80064e4 <SPI_EndRxTxTransaction>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e000      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b088      	sub	sp, #32
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b46:	d112      	bne.n	8005b6e <HAL_SPI_Receive+0x44>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f910 	bl	8005d8a <HAL_SPI_TransmitReceive>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e109      	b.n	8005d82 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_Receive+0x52>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e102      	b.n	8005d82 <HAL_SPI_Receive+0x258>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fc f9ce 	bl	8001f24 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
 8005b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b9a:	e0e9      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_Receive+0x7e>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bac:	e0e0      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf8:	d908      	bls.n	8005c0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	e007      	b.n	8005c1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c24:	d10f      	bne.n	8005c46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d007      	beq.n	8005c64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6c:	d867      	bhi.n	8005d3e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c6e:	e030      	b.n	8005cd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d117      	bne.n	8005cae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f103 020c 	add.w	r2, r3, #12
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005cac:	e011      	b.n	8005cd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cae:	f7fc f939 	bl	8001f24 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d803      	bhi.n	8005cc6 <HAL_SPI_Receive+0x19c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Receive+0x1a2>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cd0:	e04e      	b.n	8005d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1c8      	bne.n	8005c70 <HAL_SPI_Receive+0x146>
 8005cde:	e034      	b.n	8005d4a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d115      	bne.n	8005d1a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d18:	e011      	b.n	8005d3e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1a:	f7fc f903 	bl	8001f24 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d803      	bhi.n	8005d32 <HAL_SPI_Receive+0x208>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d102      	bne.n	8005d38 <HAL_SPI_Receive+0x20e>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d3c:	e018      	b.n	8005d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ca      	bne.n	8005ce0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fb4c 	bl	80063ec <SPI_EndRxTransaction>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
 8005d6c:	e000      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

error :
 8005d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b08a      	sub	sp, #40	; 0x28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_SPI_TransmitReceive+0x26>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e1fb      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x41e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db8:	f7fc f8b4 	bl	8001f24 <HAL_GetTick>
 8005dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd4:	7efb      	ldrb	r3, [r7, #27]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00e      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x6e>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x66>
 8005dea:	7efb      	ldrb	r3, [r7, #27]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d003      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005df6:	e1cd      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x80>
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e10:	e1c0      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d003      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2205      	movs	r2, #5
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	887a      	ldrh	r2, [r7, #2]
 8005e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	887a      	ldrh	r2, [r7, #2]
 8005e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	887a      	ldrh	r2, [r7, #2]
 8005e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e68:	d802      	bhi.n	8005e70 <HAL_SPI_TransmitReceive+0xe6>
 8005e6a:	8a3b      	ldrh	r3, [r7, #16]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d908      	bls.n	8005e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e007      	b.n	8005e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d007      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb8:	d97c      	bls.n	8005fb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x13e>
 8005ec2:	8a7b      	ldrh	r3, [r7, #18]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d169      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eec:	e056      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d11b      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d113      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d11c      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x1f2>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f7c:	f7fb ffd2 	bl	8001f24 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d807      	bhi.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d003      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f9a:	e0fb      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1a3      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x164>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d19d      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x164>
 8005fb2:	e0df      	b.n	8006174 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x23a>
 8005fbc:	8a7b      	ldrh	r3, [r7, #18]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	f040 80cb 	bne.w	800615a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d912      	bls.n	8005ff4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b02      	subs	r3, #2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ff2:	e0b2      	b.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601a:	e09e      	b.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d134      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02f      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b01      	cmp	r3, #1
 8006038:	d12c      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d912      	bls.n	800606a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b02      	subs	r3, #2
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006068:	e012      	b.n	8006090 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d148      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x3aa>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d042      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d923      	bls.n	8006102 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b02      	subs	r3, #2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d81f      	bhi.n	8006130 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e016      	b.n	8006130 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f103 020c 	add.w	r2, r3, #12
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006130:	2301      	movs	r3, #1
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006134:	f7fb fef6 	bl	8001f24 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x3c2>
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d102      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x3c8>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006158:	e01c      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af5b 	bne.w	800601c <HAL_SPI_TransmitReceive+0x292>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af54 	bne.w	800601c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9b3 	bl	80064e4 <SPI_EndRxTxTransaction>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	661a      	str	r2, [r3, #96]	; 0x60
 8006190:	e000      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	; 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c0:	f7fb feb0 	bl	8001f24 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	4413      	add	r3, r2
 80061ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d0:	f7fb fea8 	bl	8001f24 <HAL_GetTick>
 80061d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	015b      	lsls	r3, r3, #5
 80061dc:	0d1b      	lsrs	r3, r3, #20
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061e6:	e054      	b.n	8006292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d050      	beq.n	8006292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f0:	f7fb fe98 	bl	8001f24 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d902      	bls.n	8006206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d13d      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621e:	d111      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006228:	d004      	beq.n	8006234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006232:	d107      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d10f      	bne.n	800626e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e017      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	3b01      	subs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	bf0c      	ite	eq
 80062a2:	2301      	moveq	r3, #1
 80062a4:	2300      	movne	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d19b      	bne.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000000 	.word	0x20000000

080062c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062d2:	f7fb fe27 	bl	8001f24 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062e2:	f7fb fe1f 	bl	8001f24 <HAL_GetTick>
 80062e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062f0:	4b3d      	ldr	r3, [pc, #244]	; (80063e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	00da      	lsls	r2, r3, #3
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	0d1b      	lsrs	r3, r3, #20
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006308:	e060      	b.n	80063cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006310:	d107      	bne.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006320:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d050      	beq.n	80063cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800632a:	f7fb fdfb 	bl	8001f24 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006336:	429a      	cmp	r2, r3
 8006338:	d902      	bls.n	8006340 <SPI_WaitFifoStateUntilTimeout+0x80>
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d13d      	bne.n	80063bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800634e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006358:	d111      	bne.n	800637e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006362:	d004      	beq.n	800636e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636c:	d107      	bne.n	800637e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d10f      	bne.n	80063a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e010      	b.n	80063de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d196      	bne.n	800630a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3728      	adds	r7, #40	; 0x28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000000 	.word	0x20000000

080063ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006400:	d111      	bne.n	8006426 <SPI_EndRxTransaction+0x3a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d004      	beq.n	8006416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d107      	bne.n	8006426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006424:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d112      	bne.n	8006456 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff feb8 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e03d      	b.n	80064d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006456:	4b21      	ldr	r3, [pc, #132]	; (80064dc <SPI_EndRxTransaction+0xf0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <SPI_EndRxTransaction+0xf4>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	0d5b      	lsrs	r3, r3, #21
 8006462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3b01      	subs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d0f2      	beq.n	800646c <SPI_EndRxTransaction+0x80>
 8006486:	e000      	b.n	800648a <SPI_EndRxTransaction+0x9e>
        break;
 8006488:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006492:	d11d      	bne.n	80064d0 <SPI_EndRxTransaction+0xe4>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649c:	d004      	beq.n	80064a8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a6:	d113      	bne.n	80064d0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff ff03 	bl	80062c0 <SPI_WaitFifoStateUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e000      	b.n	80064d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000000 	.word	0x20000000
 80064e0:	165e9f81 	.word	0x165e9f81

080064e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff fedf 	bl	80062c0 <SPI_WaitFifoStateUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650c:	f043 0220 	orr.w	r2, r3, #32
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e046      	b.n	80065a6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <SPI_EndRxTxTransaction+0xcc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <SPI_EndRxTxTransaction+0xd0>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	0d5b      	lsrs	r3, r3, #21
 8006524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006536:	d112      	bne.n	800655e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2200      	movs	r2, #0
 8006540:	2180      	movs	r1, #128	; 0x80
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff fe34 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006552:	f043 0220 	orr.w	r2, r3, #32
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e023      	b.n	80065a6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3b01      	subs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d0f2      	beq.n	800655e <SPI_EndRxTxTransaction+0x7a>
 8006578:	e000      	b.n	800657c <SPI_EndRxTxTransaction+0x98>
        break;
 800657a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff fe99 	bl	80062c0 <SPI_WaitFifoStateUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e000      	b.n	80065a6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000
 80065b4:	165e9f81 	.word	0x165e9f81

080065b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e049      	b.n	800665e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fb f9c6 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f000 fa74 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e049      	b.n	800670c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f841 	bl	8006714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f000 fa1d 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006742:	2302      	movs	r3, #2
 8006744:	e0ff      	b.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b14      	cmp	r3, #20
 8006752:	f200 80f0 	bhi.w	8006936 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067b1 	.word	0x080067b1
 8006760:	08006937 	.word	0x08006937
 8006764:	08006937 	.word	0x08006937
 8006768:	08006937 	.word	0x08006937
 800676c:	080067f1 	.word	0x080067f1
 8006770:	08006937 	.word	0x08006937
 8006774:	08006937 	.word	0x08006937
 8006778:	08006937 	.word	0x08006937
 800677c:	08006833 	.word	0x08006833
 8006780:	08006937 	.word	0x08006937
 8006784:	08006937 	.word	0x08006937
 8006788:	08006937 	.word	0x08006937
 800678c:	08006873 	.word	0x08006873
 8006790:	08006937 	.word	0x08006937
 8006794:	08006937 	.word	0x08006937
 8006798:	08006937 	.word	0x08006937
 800679c:	080068b5 	.word	0x080068b5
 80067a0:	08006937 	.word	0x08006937
 80067a4:	08006937 	.word	0x08006937
 80067a8:	08006937 	.word	0x08006937
 80067ac:	080068f5 	.word	0x080068f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fa34 	bl	8006c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0208 	orr.w	r2, r2, #8
 80067ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6999      	ldr	r1, [r3, #24]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	619a      	str	r2, [r3, #24]
      break;
 80067ee:	e0a5      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fa86 	bl	8006d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6999      	ldr	r1, [r3, #24]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	619a      	str	r2, [r3, #24]
      break;
 8006830:	e084      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fadd 	bl	8006df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0208 	orr.w	r2, r2, #8
 800684c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0204 	bic.w	r2, r2, #4
 800685c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69d9      	ldr	r1, [r3, #28]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	61da      	str	r2, [r3, #28]
      break;
 8006870:	e064      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fb33 	bl	8006ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69d9      	ldr	r1, [r3, #28]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	61da      	str	r2, [r3, #28]
      break;
 80068b2:	e043      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fb6a 	bl	8006f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0208 	orr.w	r2, r2, #8
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0204 	bic.w	r2, r2, #4
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068f2:	e023      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fb9c 	bl	8007038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800690e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	021a      	lsls	r2, r3, #8
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006934:	e002      	b.n	800693c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
      break;
 800693a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIM_ConfigClockSource+0x1c>
 8006968:	2302      	movs	r3, #2
 800696a:	e0b4      	b.n	8006ad6 <HAL_TIM_ConfigClockSource+0x186>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	4b56      	ldr	r3, [pc, #344]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x190>)
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a4:	d03e      	beq.n	8006a24 <HAL_TIM_ConfigClockSource+0xd4>
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069aa:	f200 8087 	bhi.w	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b2:	f000 8086 	beq.w	8006ac2 <HAL_TIM_ConfigClockSource+0x172>
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d87f      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069bc:	2b70      	cmp	r3, #112	; 0x70
 80069be:	d01a      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0xa6>
 80069c0:	2b70      	cmp	r3, #112	; 0x70
 80069c2:	d87b      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069c4:	2b60      	cmp	r3, #96	; 0x60
 80069c6:	d050      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0x11a>
 80069c8:	2b60      	cmp	r3, #96	; 0x60
 80069ca:	d877      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069cc:	2b50      	cmp	r3, #80	; 0x50
 80069ce:	d03c      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0xfa>
 80069d0:	2b50      	cmp	r3, #80	; 0x50
 80069d2:	d873      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d058      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x13a>
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d86f      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b30      	cmp	r3, #48	; 0x30
 80069de:	d064      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x15a>
 80069e0:	2b30      	cmp	r3, #48	; 0x30
 80069e2:	d86b      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d060      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x15a>
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d867      	bhi.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05c      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x15a>
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d05a      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x15a>
 80069f4:	e062      	b.n	8006abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6899      	ldr	r1, [r3, #8]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f000 fbe5 	bl	80071d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	609a      	str	r2, [r3, #8]
      break;
 8006a22:	e04f      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	6899      	ldr	r1, [r3, #8]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f000 fbce 	bl	80071d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a46:	609a      	str	r2, [r3, #8]
      break;
 8006a48:	e03c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	6859      	ldr	r1, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f000 fb42 	bl	80070e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2150      	movs	r1, #80	; 0x50
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fb9b 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a68:	e02c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f000 fb61 	bl	800713e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2160      	movs	r1, #96	; 0x60
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fb8b 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a88:	e01c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fb22 	bl	80070e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2140      	movs	r1, #64	; 0x40
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fb7b 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e00c      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 fb72 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006aba:	e003      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	fffeff88 	.word	0xfffeff88

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d027      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d023      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <TIM_Base_SetConfig+0x134>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <TIM_Base_SetConfig+0x138>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a23      	ldr	r2, [pc, #140]	; (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40010400 	.word	0x40010400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	40001c00 	.word	0x40001c00
 8006c20:	40002000 	.word	0x40002000

08006c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <TIM_OC1_SetConfig+0xd8>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0302 	bic.w	r3, r3, #2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC1_SetConfig+0x64>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <TIM_OC1_SetConfig+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10c      	bne.n	8006ca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0308 	bic.w	r3, r3, #8
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC1_SetConfig+0x8e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <TIM_OC1_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d111      	bne.n	8006cd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	fffeff8f 	.word	0xfffeff8f
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400

08006d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0210 	bic.w	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4b2e      	ldr	r3, [pc, #184]	; (8006dec <TIM_OC2_SetConfig+0xe4>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <TIM_OC2_SetConfig+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC2_SetConfig+0x68>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <TIM_OC2_SetConfig+0xec>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10d      	bne.n	8006d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <TIM_OC2_SetConfig+0xe8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC2_SetConfig+0x94>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <TIM_OC2_SetConfig+0xec>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d113      	bne.n	8006dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	feff8fff 	.word	0xfeff8fff
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <TIM_OC3_SetConfig+0xe0>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC3_SetConfig+0x66>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <TIM_OC3_SetConfig+0xe8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10d      	bne.n	8006e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC3_SetConfig+0x92>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <TIM_OC3_SetConfig+0xe8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d113      	bne.n	8006eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	fffeff8f 	.word	0xfffeff8f
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <TIM_OC4_SetConfig+0xa4>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	031b      	lsls	r3, r3, #12
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <TIM_OC4_SetConfig+0xa8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC4_SetConfig+0x68>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a12      	ldr	r2, [pc, #72]	; (8006f90 <TIM_OC4_SetConfig+0xac>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d109      	bne.n	8006f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	019b      	lsls	r3, r3, #6
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	feff8fff 	.word	0xfeff8fff
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400

08006f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	; (800702c <TIM_OC5_SetConfig+0x98>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <TIM_OC5_SetConfig+0x9c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_OC5_SetConfig+0x5e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a11      	ldr	r2, [pc, #68]	; (8007034 <TIM_OC5_SetConfig+0xa0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d109      	bne.n	8007006 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	621a      	str	r2, [r3, #32]
}
 8007020:	bf00      	nop
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	fffeff8f 	.word	0xfffeff8f
 8007030:	40010000 	.word	0x40010000
 8007034:	40010400 	.word	0x40010400

08007038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <TIM_OC6_SetConfig+0x9c>)
 8007064:	4013      	ands	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800707a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <TIM_OC6_SetConfig+0xa0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC6_SetConfig+0x60>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <TIM_OC6_SetConfig+0xa4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d109      	bne.n	80070ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	feff8fff 	.word	0xfeff8fff
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40010400 	.word	0x40010400

080070e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f023 030a 	bic.w	r3, r3, #10
 800711c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713e:	b480      	push	{r7}
 8007140:	b087      	sub	sp, #28
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0210 	bic.w	r2, r3, #16
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	031b      	lsls	r3, r3, #12
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800717a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f043 0307 	orr.w	r3, r3, #7
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007228:	2302      	movs	r3, #2
 800722a:	e06d      	b.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a30      	ldr	r2, [pc, #192]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a2f      	ldr	r2, [pc, #188]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d108      	bne.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a20      	ldr	r2, [pc, #128]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d022      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d01d      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1d      	ldr	r2, [pc, #116]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d018      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1c      	ldr	r2, [pc, #112]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1a      	ldr	r2, [pc, #104]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00e      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d009      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d10c      	bne.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40010000 	.word	0x40010000
 8007318:	40010400 	.word	0x40010400
 800731c:	40000400 	.word	0x40000400
 8007320:	40000800 	.word	0x40000800
 8007324:	40000c00 	.word	0x40000c00
 8007328:	40014000 	.word	0x40014000
 800732c:	40001800 	.word	0x40001800

08007330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e040      	b.n	80073c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa fc6e 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2224      	movs	r2, #36	; 0x24
 800735c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc2c 	bl	8007bcc <UART_SetConfig>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e022      	b.n	80073c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fe82 	bl	8008090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800739a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 ff09 	bl	80081d4 <UART_CheckIdleState>
 80073c2:	4603      	mov	r3, r0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	f040 8081 	bne.w	80074e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_UART_Transmit+0x26>
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e079      	b.n	80074ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Transmit+0x38>
 8007400:	2302      	movs	r3, #2
 8007402:	e072      	b.n	80074ea <HAL_UART_Transmit+0x11e>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2221      	movs	r2, #33	; 0x21
 8007418:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800741a:	f7fa fd83 	bl	8001f24 <HAL_GetTick>
 800741e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007438:	d108      	bne.n	800744c <HAL_UART_Transmit+0x80>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	e003      	b.n	8007454 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800745c:	e02c      	b.n	80074b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fefc 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e038      	b.n	80074ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	3302      	adds	r3, #2
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e007      	b.n	80074a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	781a      	ldrb	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1cc      	bne.n	800745e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	2140      	movs	r1, #64	; 0x40
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fec9 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e005      	b.n	80074ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e000      	b.n	80074ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b08a      	sub	sp, #40	; 0x28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007504:	2b20      	cmp	r3, #32
 8007506:	d13d      	bne.n	8007584 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <HAL_UART_Receive_DMA+0x22>
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e036      	b.n	8007586 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_UART_Receive_DMA+0x34>
 8007522:	2302      	movs	r3, #2
 8007524:	e02f      	b.n	8007586 <HAL_UART_Receive_DMA+0x94>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d018      	beq.n	8007574 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	613b      	str	r3, [r7, #16]
   return(result);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	623b      	str	r3, [r7, #32]
 8007562:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	69f9      	ldr	r1, [r7, #28]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	61bb      	str	r3, [r7, #24]
   return(result);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	461a      	mov	r2, r3
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 ff38 	bl	80083f0 <UART_Start_Receive_DMA>
 8007580:	4603      	mov	r3, r0
 8007582:	e000      	b.n	8007586 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3728      	adds	r7, #40	; 0x28
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b0ba      	sub	sp, #232	; 0xe8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80075be:	4013      	ands	r3, r2
 80075c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d115      	bne.n	80075f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00f      	beq.n	80075f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 82a4 	beq.w	8007b36 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
      }
      return;
 80075f6:	e29e      	b.n	8007b36 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8117 	beq.w	8007830 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800760e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007612:	4b85      	ldr	r3, [pc, #532]	; (8007828 <HAL_UART_IRQHandler+0x298>)
 8007614:	4013      	ands	r3, r2
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 810a 	beq.w	8007830 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d011      	beq.n	800764c <HAL_UART_IRQHandler+0xbc>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2201      	movs	r2, #1
 800763a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007642:	f043 0201 	orr.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d011      	beq.n	800767c <HAL_UART_IRQHandler+0xec>
 8007658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2202      	movs	r2, #2
 800766a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007672:	f043 0204 	orr.w	r2, r3, #4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800767c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d011      	beq.n	80076ac <HAL_UART_IRQHandler+0x11c>
 8007688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2204      	movs	r2, #4
 800769a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d017      	beq.n	80076e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2208      	movs	r2, #8
 80076d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076de:	f043 0208 	orr.w	r2, r3, #8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <HAL_UART_IRQHandler+0x18a>
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007710:	f043 0220 	orr.w	r2, r3, #32
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 820a 	beq.w	8007b3a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d005      	beq.n	8007772 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800776a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800776e:	2b00      	cmp	r3, #0
 8007770:	d04f      	beq.n	8007812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 ff08 	bl	8008588 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d141      	bne.n	800780a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800779c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1d9      	bne.n	8007786 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	4a13      	ldr	r2, [pc, #76]	; (800782c <HAL_UART_IRQHandler+0x29c>)
 80077e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fb f960 	bl	8002aac <HAL_DMA_Abort_IT>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	e00f      	b.n	8007822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9c2 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007808:	e00b      	b.n	8007822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9be 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	e007      	b.n	8007822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9ba 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007820:	e18b      	b.n	8007b3a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007822:	bf00      	nop
    return;
 8007824:	e189      	b.n	8007b3a <HAL_UART_IRQHandler+0x5aa>
 8007826:	bf00      	nop
 8007828:	04000120 	.word	0x04000120
 800782c:	08008823 	.word	0x08008823

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 8144 	bne.w	8007ac2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783e:	f003 0310 	and.w	r3, r3, #16
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 813d 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 8136 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2210      	movs	r2, #16
 800785c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	f040 80b2 	bne.w	80079d2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800787a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 815d 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800788a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800788e:	429a      	cmp	r2, r3
 8007890:	f080 8155 	bcs.w	8007b3e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800789a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a8:	f000 8085 	beq.w	80079b6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1da      	bne.n	80078ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800791a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800791e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e1      	bne.n	80078f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3308      	adds	r3, #8
 8007952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800795c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007986:	f023 0310 	bic.w	r3, r3, #16
 800798a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007998:	65bb      	str	r3, [r7, #88]	; 0x58
 800799a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800799e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e4      	bne.n	8007976 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fb f80b 	bl	80029cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8e8 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079d0:	e0b5      	b.n	8007b3e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80a7 	beq.w	8007b42 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80079f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a2 	beq.w	8007b42 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a20:	647b      	str	r3, [r7, #68]	; 0x44
 8007a22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	623b      	str	r3, [r7, #32]
   return(result);
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a58:	633a      	str	r2, [r7, #48]	; 0x30
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e3      	bne.n	8007a34 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	617b      	str	r3, [r7, #20]
   return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f870 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ac0:	e03f      	b.n	8007b42 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <HAL_UART_IRQHandler+0x55c>
 8007ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f867 	bl	8007bb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aea:	e02d      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01c      	beq.n	8007b46 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
    }
    return;
 8007b14:	e017      	b.n	8007b46 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d012      	beq.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
 8007b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fe8d 	bl	800884e <UART_EndTransmit_IT>
    return;
 8007b34:	e008      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007b36:	bf00      	nop
 8007b38:	e006      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007b3a:	bf00      	nop
 8007b3c:	e004      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007b46:	bf00      	nop
  }

}
 8007b48:	37e8      	adds	r7, #232	; 0xe8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4ba7      	ldr	r3, [pc, #668]	; (8007e94 <UART_SetConfig+0x2c8>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6812      	ldr	r2, [r2, #0]
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a95      	ldr	r2, [pc, #596]	; (8007e98 <UART_SetConfig+0x2cc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d120      	bne.n	8007c8a <UART_SetConfig+0xbe>
 8007c48:	4b94      	ldr	r3, [pc, #592]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d816      	bhi.n	8007c84 <UART_SetConfig+0xb8>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0x90>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c79 	.word	0x08007c79
 8007c64:	08007c73 	.word	0x08007c73
 8007c68:	08007c7f 	.word	0x08007c7f
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e14f      	b.n	8007f12 <UART_SetConfig+0x346>
 8007c72:	2302      	movs	r3, #2
 8007c74:	77fb      	strb	r3, [r7, #31]
 8007c76:	e14c      	b.n	8007f12 <UART_SetConfig+0x346>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e149      	b.n	8007f12 <UART_SetConfig+0x346>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e146      	b.n	8007f12 <UART_SetConfig+0x346>
 8007c84:	2310      	movs	r3, #16
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e143      	b.n	8007f12 <UART_SetConfig+0x346>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a84      	ldr	r2, [pc, #528]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d132      	bne.n	8007cfa <UART_SetConfig+0x12e>
 8007c94:	4b81      	ldr	r3, [pc, #516]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	f003 030c 	and.w	r3, r3, #12
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d828      	bhi.n	8007cf4 <UART_SetConfig+0x128>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0xdc>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cdd 	.word	0x08007cdd
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007cf5 	.word	0x08007cf5
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007cf5 	.word	0x08007cf5
 8007cc0:	08007cf5 	.word	0x08007cf5
 8007cc4:	08007cf5 	.word	0x08007cf5
 8007cc8:	08007ce3 	.word	0x08007ce3
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007cef 	.word	0x08007cef
 8007cdc:	2300      	movs	r3, #0
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e117      	b.n	8007f12 <UART_SetConfig+0x346>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	77fb      	strb	r3, [r7, #31]
 8007ce6:	e114      	b.n	8007f12 <UART_SetConfig+0x346>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e111      	b.n	8007f12 <UART_SetConfig+0x346>
 8007cee:	2308      	movs	r3, #8
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e10e      	b.n	8007f12 <UART_SetConfig+0x346>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e10b      	b.n	8007f12 <UART_SetConfig+0x346>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a69      	ldr	r2, [pc, #420]	; (8007ea4 <UART_SetConfig+0x2d8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d120      	bne.n	8007d46 <UART_SetConfig+0x17a>
 8007d04:	4b65      	ldr	r3, [pc, #404]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d0e:	2b30      	cmp	r3, #48	; 0x30
 8007d10:	d013      	beq.n	8007d3a <UART_SetConfig+0x16e>
 8007d12:	2b30      	cmp	r3, #48	; 0x30
 8007d14:	d814      	bhi.n	8007d40 <UART_SetConfig+0x174>
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d009      	beq.n	8007d2e <UART_SetConfig+0x162>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d810      	bhi.n	8007d40 <UART_SetConfig+0x174>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <UART_SetConfig+0x15c>
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d006      	beq.n	8007d34 <UART_SetConfig+0x168>
 8007d26:	e00b      	b.n	8007d40 <UART_SetConfig+0x174>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e0f1      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e0ee      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d34:	2304      	movs	r3, #4
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e0eb      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e0e8      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d40:	2310      	movs	r3, #16
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e0e5      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a57      	ldr	r2, [pc, #348]	; (8007ea8 <UART_SetConfig+0x2dc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d120      	bne.n	8007d92 <UART_SetConfig+0x1c6>
 8007d50:	4b52      	ldr	r3, [pc, #328]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d5c:	d013      	beq.n	8007d86 <UART_SetConfig+0x1ba>
 8007d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d60:	d814      	bhi.n	8007d8c <UART_SetConfig+0x1c0>
 8007d62:	2b80      	cmp	r3, #128	; 0x80
 8007d64:	d009      	beq.n	8007d7a <UART_SetConfig+0x1ae>
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d810      	bhi.n	8007d8c <UART_SetConfig+0x1c0>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <UART_SetConfig+0x1a8>
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d006      	beq.n	8007d80 <UART_SetConfig+0x1b4>
 8007d72:	e00b      	b.n	8007d8c <UART_SetConfig+0x1c0>
 8007d74:	2300      	movs	r3, #0
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e0cb      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e0c8      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d80:	2304      	movs	r3, #4
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e0c5      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d86:	2308      	movs	r3, #8
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e0c2      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e0bf      	b.n	8007f12 <UART_SetConfig+0x346>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a45      	ldr	r2, [pc, #276]	; (8007eac <UART_SetConfig+0x2e0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d125      	bne.n	8007de8 <UART_SetConfig+0x21c>
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007daa:	d017      	beq.n	8007ddc <UART_SetConfig+0x210>
 8007dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db0:	d817      	bhi.n	8007de2 <UART_SetConfig+0x216>
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db6:	d00b      	beq.n	8007dd0 <UART_SetConfig+0x204>
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dbc:	d811      	bhi.n	8007de2 <UART_SetConfig+0x216>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <UART_SetConfig+0x1fe>
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	d006      	beq.n	8007dd6 <UART_SetConfig+0x20a>
 8007dc8:	e00b      	b.n	8007de2 <UART_SetConfig+0x216>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e0a0      	b.n	8007f12 <UART_SetConfig+0x346>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e09d      	b.n	8007f12 <UART_SetConfig+0x346>
 8007dd6:	2304      	movs	r3, #4
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e09a      	b.n	8007f12 <UART_SetConfig+0x346>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e097      	b.n	8007f12 <UART_SetConfig+0x346>
 8007de2:	2310      	movs	r3, #16
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e094      	b.n	8007f12 <UART_SetConfig+0x346>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a30      	ldr	r2, [pc, #192]	; (8007eb0 <UART_SetConfig+0x2e4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d125      	bne.n	8007e3e <UART_SetConfig+0x272>
 8007df2:	4b2a      	ldr	r3, [pc, #168]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e00:	d017      	beq.n	8007e32 <UART_SetConfig+0x266>
 8007e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e06:	d817      	bhi.n	8007e38 <UART_SetConfig+0x26c>
 8007e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e0c:	d00b      	beq.n	8007e26 <UART_SetConfig+0x25a>
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e12:	d811      	bhi.n	8007e38 <UART_SetConfig+0x26c>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <UART_SetConfig+0x254>
 8007e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1c:	d006      	beq.n	8007e2c <UART_SetConfig+0x260>
 8007e1e:	e00b      	b.n	8007e38 <UART_SetConfig+0x26c>
 8007e20:	2301      	movs	r3, #1
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e075      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e26:	2302      	movs	r3, #2
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e072      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e06f      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e32:	2308      	movs	r3, #8
 8007e34:	77fb      	strb	r3, [r7, #31]
 8007e36:	e06c      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e069      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <UART_SetConfig+0x2e8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d137      	bne.n	8007eb8 <UART_SetConfig+0x2ec>
 8007e48:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e56:	d017      	beq.n	8007e88 <UART_SetConfig+0x2bc>
 8007e58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e5c:	d817      	bhi.n	8007e8e <UART_SetConfig+0x2c2>
 8007e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e62:	d00b      	beq.n	8007e7c <UART_SetConfig+0x2b0>
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e68:	d811      	bhi.n	8007e8e <UART_SetConfig+0x2c2>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <UART_SetConfig+0x2aa>
 8007e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e72:	d006      	beq.n	8007e82 <UART_SetConfig+0x2b6>
 8007e74:	e00b      	b.n	8007e8e <UART_SetConfig+0x2c2>
 8007e76:	2300      	movs	r3, #0
 8007e78:	77fb      	strb	r3, [r7, #31]
 8007e7a:	e04a      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e047      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e82:	2304      	movs	r3, #4
 8007e84:	77fb      	strb	r3, [r7, #31]
 8007e86:	e044      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e041      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e8e:	2310      	movs	r3, #16
 8007e90:	77fb      	strb	r3, [r7, #31]
 8007e92:	e03e      	b.n	8007f12 <UART_SetConfig+0x346>
 8007e94:	efff69f3 	.word	0xefff69f3
 8007e98:	40011000 	.word	0x40011000
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	40004400 	.word	0x40004400
 8007ea4:	40004800 	.word	0x40004800
 8007ea8:	40004c00 	.word	0x40004c00
 8007eac:	40005000 	.word	0x40005000
 8007eb0:	40011400 	.word	0x40011400
 8007eb4:	40007800 	.word	0x40007800
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a71      	ldr	r2, [pc, #452]	; (8008084 <UART_SetConfig+0x4b8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d125      	bne.n	8007f0e <UART_SetConfig+0x342>
 8007ec2:	4b71      	ldr	r3, [pc, #452]	; (8008088 <UART_SetConfig+0x4bc>)
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ecc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ed0:	d017      	beq.n	8007f02 <UART_SetConfig+0x336>
 8007ed2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ed6:	d817      	bhi.n	8007f08 <UART_SetConfig+0x33c>
 8007ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007edc:	d00b      	beq.n	8007ef6 <UART_SetConfig+0x32a>
 8007ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee2:	d811      	bhi.n	8007f08 <UART_SetConfig+0x33c>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <UART_SetConfig+0x324>
 8007ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eec:	d006      	beq.n	8007efc <UART_SetConfig+0x330>
 8007eee:	e00b      	b.n	8007f08 <UART_SetConfig+0x33c>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e00d      	b.n	8007f12 <UART_SetConfig+0x346>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e00a      	b.n	8007f12 <UART_SetConfig+0x346>
 8007efc:	2304      	movs	r3, #4
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e007      	b.n	8007f12 <UART_SetConfig+0x346>
 8007f02:	2308      	movs	r3, #8
 8007f04:	77fb      	strb	r3, [r7, #31]
 8007f06:	e004      	b.n	8007f12 <UART_SetConfig+0x346>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	77fb      	strb	r3, [r7, #31]
 8007f0c:	e001      	b.n	8007f12 <UART_SetConfig+0x346>
 8007f0e:	2310      	movs	r3, #16
 8007f10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1a:	d15a      	bne.n	8007fd2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007f1c:	7ffb      	ldrb	r3, [r7, #31]
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d827      	bhi.n	8007f72 <UART_SetConfig+0x3a6>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0x35c>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	08007f73 	.word	0x08007f73
 8007f38:	08007f63 	.word	0x08007f63
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007f73 	.word	0x08007f73
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f6b 	.word	0x08007f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4c:	f7fc ff84 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 8007f50:	61b8      	str	r0, [r7, #24]
        break;
 8007f52:	e013      	b.n	8007f7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f54:	f7fc ff94 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8007f58:	61b8      	str	r0, [r7, #24]
        break;
 8007f5a:	e00f      	b.n	8007f7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f5c:	4b4b      	ldr	r3, [pc, #300]	; (800808c <UART_SetConfig+0x4c0>)
 8007f5e:	61bb      	str	r3, [r7, #24]
        break;
 8007f60:	e00c      	b.n	8007f7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f62:	f7fc fe8b 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8007f66:	61b8      	str	r0, [r7, #24]
        break;
 8007f68:	e008      	b.n	8007f7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f6e:	61bb      	str	r3, [r7, #24]
        break;
 8007f70:	e004      	b.n	8007f7c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	77bb      	strb	r3, [r7, #30]
        break;
 8007f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d074      	beq.n	800806c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	005a      	lsls	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	441a      	add	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b0f      	cmp	r3, #15
 8007f9c:	d916      	bls.n	8007fcc <UART_SetConfig+0x400>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa4:	d212      	bcs.n	8007fcc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f023 030f 	bic.w	r3, r3, #15
 8007fae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	89fa      	ldrh	r2, [r7, #14]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	e04f      	b.n	800806c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	77bb      	strb	r3, [r7, #30]
 8007fd0:	e04c      	b.n	800806c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fd2:	7ffb      	ldrb	r3, [r7, #31]
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d828      	bhi.n	800802a <UART_SetConfig+0x45e>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <UART_SetConfig+0x414>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	0800802b 	.word	0x0800802b
 8007ff0:	0800801b 	.word	0x0800801b
 8007ff4:	0800802b 	.word	0x0800802b
 8007ff8:	0800802b 	.word	0x0800802b
 8007ffc:	0800802b 	.word	0x0800802b
 8008000:	08008023 	.word	0x08008023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008004:	f7fc ff28 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 8008008:	61b8      	str	r0, [r7, #24]
        break;
 800800a:	e013      	b.n	8008034 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800800c:	f7fc ff38 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8008010:	61b8      	str	r0, [r7, #24]
        break;
 8008012:	e00f      	b.n	8008034 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <UART_SetConfig+0x4c0>)
 8008016:	61bb      	str	r3, [r7, #24]
        break;
 8008018:	e00c      	b.n	8008034 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800801a:	f7fc fe2f 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 800801e:	61b8      	str	r0, [r7, #24]
        break;
 8008020:	e008      	b.n	8008034 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008026:	61bb      	str	r3, [r7, #24]
        break;
 8008028:	e004      	b.n	8008034 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	77bb      	strb	r3, [r7, #30]
        break;
 8008032:	bf00      	nop
    }

    if (pclk != 0U)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d018      	beq.n	800806c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	085a      	lsrs	r2, r3, #1
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	441a      	add	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	fbb2 f3f3 	udiv	r3, r2, r3
 800804c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b0f      	cmp	r3, #15
 8008052:	d909      	bls.n	8008068 <UART_SetConfig+0x49c>
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805a:	d205      	bcs.n	8008068 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e001      	b.n	800806c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008078:	7fbb      	ldrb	r3, [r7, #30]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40007c00 	.word	0x40007c00
 8008088:	40023800 	.word	0x40023800
 800808c:	00f42400 	.word	0x00f42400

08008090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01a      	beq.n	80081a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818e:	d10a      	bne.n	80081a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	605a      	str	r2, [r3, #4]
  }
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081e4:	f7f9 fe9e 	bl	8001f24 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d10e      	bne.n	8008216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f82d 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e023      	b.n	800825e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b04      	cmp	r3, #4
 8008222:	d10e      	bne.n	8008242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f817 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e00d      	b.n	800825e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b09c      	sub	sp, #112	; 0x70
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008276:	e0a5      	b.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	f000 80a1 	beq.w	80083c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008282:	f7f9 fe4f 	bl	8001f24 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <UART_WaitOnFlagUntilTimeout+0x32>
 8008292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008294:	2b00      	cmp	r3, #0
 8008296:	d13e      	bne.n	8008316 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082ac:	667b      	str	r3, [r7, #100]	; 0x64
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e6      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	663b      	str	r3, [r7, #96]	; 0x60
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80082ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e5      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e067      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d04f      	beq.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008332:	d147      	bne.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800833c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e6      	bne.n	800833e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	613b      	str	r3, [r7, #16]
   return(result);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f023 0301 	bic.w	r3, r3, #1
 8008386:	66bb      	str	r3, [r7, #104]	; 0x68
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008390:	623a      	str	r2, [r7, #32]
 8008392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	6a3a      	ldr	r2, [r7, #32]
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	61bb      	str	r3, [r7, #24]
   return(result);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e010      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69da      	ldr	r2, [r3, #28]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	429a      	cmp	r2, r3
 80083e0:	f43f af4a 	beq.w	8008278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3770      	adds	r7, #112	; 0x70
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b096      	sub	sp, #88	; 0x58
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2222      	movs	r2, #34	; 0x22
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	2b00      	cmp	r3, #0
 8008420:	d02b      	beq.n	800847a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	4a42      	ldr	r2, [pc, #264]	; (8008530 <UART_Start_Receive_DMA+0x140>)
 8008428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	4a41      	ldr	r2, [pc, #260]	; (8008534 <UART_Start_Receive_DMA+0x144>)
 8008430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	4a40      	ldr	r2, [pc, #256]	; (8008538 <UART_Start_Receive_DMA+0x148>)
 8008438:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	2200      	movs	r2, #0
 8008440:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3324      	adds	r3, #36	; 0x24
 800844c:	4619      	mov	r1, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	461a      	mov	r2, r3
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	f7fa fa59 	bl	800290c <HAL_DMA_Start_IT>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2210      	movs	r2, #16
 8008464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2220      	movs	r2, #32
 8008474:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e055      	b.n	8008526 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d018      	beq.n	80084bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849e:	657b      	str	r3, [r7, #84]	; 0x54
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e6      	bne.n	800848a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	f043 0301 	orr.w	r3, r3, #1
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084dc:	637a      	str	r2, [r7, #52]	; 0x34
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e5      	bne.n	80084bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008510:	623a      	str	r2, [r7, #32]
 8008512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	61bb      	str	r3, [r7, #24]
   return(result);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3758      	adds	r7, #88	; 0x58
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	0800864f 	.word	0x0800864f
 8008534:	0800876f 	.word	0x0800876f
 8008538:	080087a7 	.word	0x080087a7

0800853c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	60bb      	str	r3, [r7, #8]
   return(result);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	613b      	str	r3, [r7, #16]
   return(result);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800857c:	bf00      	nop
 800857e:	3724      	adds	r7, #36	; 0x24
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b095      	sub	sp, #84	; 0x54
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ae:	643b      	str	r3, [r7, #64]	; 0x40
 80085b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e6      	bne.n	8008590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d118      	bne.n	8008630 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	60bb      	str	r3, [r7, #8]
   return(result);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f023 0310 	bic.w	r3, r3, #16
 8008612:	647b      	str	r3, [r7, #68]	; 0x44
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800861c:	61bb      	str	r3, [r7, #24]
 800861e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6979      	ldr	r1, [r7, #20]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	613b      	str	r3, [r7, #16]
   return(result);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e6      	bne.n	80085fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008642:	bf00      	nop
 8008644:	3754      	adds	r7, #84	; 0x54
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b09c      	sub	sp, #112	; 0x70
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008664:	d070      	beq.n	8008748 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008668:	2200      	movs	r2, #0
 800866a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800867c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008682:	66bb      	str	r3, [r7, #104]	; 0x68
 8008684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800868c:	65bb      	str	r3, [r7, #88]	; 0x58
 800868e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800869a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e6      	bne.n	800866e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	667b      	str	r3, [r7, #100]	; 0x64
 80086b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086c0:	647a      	str	r2, [r7, #68]	; 0x44
 80086c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	623b      	str	r3, [r7, #32]
   return(result);
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ea:	663b      	str	r3, [r7, #96]	; 0x60
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086f4:	633a      	str	r2, [r7, #48]	; 0x30
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e5      	bne.n	80086d4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870a:	2220      	movs	r2, #32
 800870c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008712:	2b01      	cmp	r3, #1
 8008714:	d118      	bne.n	8008748 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	60fb      	str	r3, [r7, #12]
   return(result);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0310 	bic.w	r3, r3, #16
 800872a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	69b9      	ldr	r1, [r7, #24]
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	617b      	str	r3, [r7, #20]
   return(result);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e6      	bne.n	8008716 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874c:	2b01      	cmp	r3, #1
 800874e:	d107      	bne.n	8008760 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008756:	4619      	mov	r1, r3
 8008758:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800875a:	f7ff fa21 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800875e:	e002      	b.n	8008766 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8008760:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008762:	f7ff f9ff 	bl	8007b64 <HAL_UART_RxCpltCallback>
}
 8008766:	bf00      	nop
 8008768:	3770      	adds	r7, #112	; 0x70
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	2b01      	cmp	r3, #1
 8008782:	d109      	bne.n	8008798 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fa05 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008796:	e002      	b.n	800879e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff f9ed 	bl	8007b78 <HAL_UART_RxHalfCpltCallback>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d109      	bne.n	80087e2 <UART_DMAError+0x3c>
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b21      	cmp	r3, #33	; 0x21
 80087d2:	d106      	bne.n	80087e2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80087dc:	6978      	ldr	r0, [r7, #20]
 80087de:	f7ff fead 	bl	800853c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d109      	bne.n	8008804 <UART_DMAError+0x5e>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b22      	cmp	r3, #34	; 0x22
 80087f4:	d106      	bne.n	8008804 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80087fe:	6978      	ldr	r0, [r7, #20]
 8008800:	f7ff fec2 	bl	8008588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880a:	f043 0210 	orr.w	r2, r3, #16
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008814:	6978      	ldr	r0, [r7, #20]
 8008816:	f7ff f9b9 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881a:	bf00      	nop
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff f9a3 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b088      	sub	sp, #32
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	60bb      	str	r3, [r7, #8]
   return(result);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6979      	ldr	r1, [r7, #20]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	613b      	str	r3, [r7, #16]
   return(result);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff f95b 	bl	8007b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800889a:	bf00      	nop
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <ESP_CheckRX>:
				     uint32_t blockingTimeOut,
					 U32_pFn_pC_pC_U32_pC_pU32 processFn,
					 char * keyWord,
					 char **retStr,
					 uint32_t * retU32)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b08b      	sub	sp, #44	; 0x2c
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
	uint32_t rxResult = ESP_HARD_ERR;
 80088b2:	f06f 0305 	mvn.w	r3, #5
 80088b6:	61bb      	str	r3, [r7, #24]
	uint32_t processingResult = ESP_HARD_ERR;
 80088b8:	f06f 0305 	mvn.w	r3, #5
 80088bc:	61fb      	str	r3, [r7, #28]
	uint32_t okAlreadyArrived = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

	if(blockingTimeOut)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d04c      	beq.n	8008962 <ESP_CheckRX+0xbe>
	{
		do
		{
			rxResult = ESP_CheckRX_DMA_XUART(timeOut);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f951 	bl	8008b70 <ESP_CheckRX_DMA_XUART>
 80088ce:	61b8      	str	r0, [r7, #24]
		}
		while(rxResult == ESP_RX_PENDING /*|| rxResult == ESP_TX_TIMEOUT*/ || rxResult == ESP_RX_SILENT);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f113 0f04 	cmn.w	r3, #4
 80088d6:	d0f7      	beq.n	80088c8 <ESP_CheckRX+0x24>
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f113 0f02 	cmn.w	r3, #2
 80088de:	d0f3      	beq.n	80088c8 <ESP_CheckRX+0x24>

		if(rxResult == ESP_OK)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d13a      	bne.n	800895c <ESP_CheckRX+0xb8>
		{
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 80088e6:	e032      	b.n	800894e <ESP_CheckRX+0xaa>
			{
#if PRINT_EACH_RECEIVE
				HAL_UART_Transmit(&huart3,
						(uint8_t*)comUsrBuffer[comUserBufferMsgReadIdx],
 80088e8:	4b46      	ldr	r3, [pc, #280]	; (8008a04 <ESP_CheckRX+0x160>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	029b      	lsls	r3, r3, #10
 80088f0:	4413      	add	r3, r2
 80088f2:	4a45      	ldr	r2, [pc, #276]	; (8008a08 <ESP_CheckRX+0x164>)
 80088f4:	1899      	adds	r1, r3, r2
						(uint16_t)comUsrBufferLen[comUserBufferMsgReadIdx],
 80088f6:	4b43      	ldr	r3, [pc, #268]	; (8008a04 <ESP_CheckRX+0x160>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a44      	ldr	r2, [pc, #272]	; (8008a0c <ESP_CheckRX+0x168>)
 80088fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				HAL_UART_Transmit(&huart3,
 8008900:	b29a      	uxth	r2, r3
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	4842      	ldr	r0, [pc, #264]	; (8008a10 <ESP_CheckRX+0x16c>)
 8008908:	f7fe fd60 	bl	80073cc <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*)("\r\n"), 2, HAL_MAX_DELAY);
 800890c:	f04f 33ff 	mov.w	r3, #4294967295
 8008910:	2202      	movs	r2, #2
 8008912:	4940      	ldr	r1, [pc, #256]	; (8008a14 <ESP_CheckRX+0x170>)
 8008914:	483e      	ldr	r0, [pc, #248]	; (8008a10 <ESP_CheckRX+0x16c>)
 8008916:	f7fe fd59 	bl	80073cc <HAL_UART_Transmit>
#endif
				processingResult = processFn(keyWord,
											comUsrBuffer[comUserBufferMsgReadIdx],
 800891a:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <ESP_CheckRX+0x160>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	029b      	lsls	r3, r3, #10
 8008922:	4413      	add	r3, r2
 8008924:	4a38      	ldr	r2, [pc, #224]	; (8008a08 <ESP_CheckRX+0x164>)
 8008926:	1899      	adds	r1, r3, r2
				processingResult = processFn(keyWord,
 8008928:	4b36      	ldr	r3, [pc, #216]	; (8008a04 <ESP_CheckRX+0x160>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a37      	ldr	r2, [pc, #220]	; (8008a0c <ESP_CheckRX+0x168>)
 800892e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	687c      	ldr	r4, [r7, #4]
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6838      	ldr	r0, [r7, #0]
 800893c:	47a0      	blx	r4
 800893e:	61f8      	str	r0, [r7, #28]
											comUsrBufferLen[comUserBufferMsgReadIdx],
											retStr,
											retU32);
				comUserBufferMsgReadIdx = (comUserBufferMsgReadIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 8008940:	4b30      	ldr	r3, [pc, #192]	; (8008a04 <ESP_CheckRX+0x160>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	4a2e      	ldr	r2, [pc, #184]	; (8008a04 <ESP_CheckRX+0x160>)
 800894c:	6013      	str	r3, [r2, #0]
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 800894e:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <ESP_CheckRX+0x174>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <ESP_CheckRX+0x160>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d1c6      	bne.n	80088e8 <ESP_CheckRX+0x44>
 800895a:	e046      	b.n	80089ea <ESP_CheckRX+0x146>
			}
		}
		else
		{
			processingResult = rxResult;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	e043      	b.n	80089ea <ESP_CheckRX+0x146>
		}
	}
	else
	{
		if ((rxResult = ESP_CheckRX_DMA_XUART(timeOut)) == ESP_OK)
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 f904 	bl	8008b70 <ESP_CheckRX_DMA_XUART>
 8008968:	61b8      	str	r0, [r7, #24]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d13a      	bne.n	80089e6 <ESP_CheckRX+0x142>
		{
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 8008970:	e032      	b.n	80089d8 <ESP_CheckRX+0x134>
			{
#if PRINT_EACH_RECEIVE
				HAL_UART_Transmit(&huart3,
						(uint8_t*)comUsrBuffer[comUserBufferMsgReadIdx],
 8008972:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <ESP_CheckRX+0x160>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	029b      	lsls	r3, r3, #10
 800897a:	4413      	add	r3, r2
 800897c:	4a22      	ldr	r2, [pc, #136]	; (8008a08 <ESP_CheckRX+0x164>)
 800897e:	1899      	adds	r1, r3, r2
						(uint16_t)comUsrBufferLen[comUserBufferMsgReadIdx],
 8008980:	4b20      	ldr	r3, [pc, #128]	; (8008a04 <ESP_CheckRX+0x160>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a21      	ldr	r2, [pc, #132]	; (8008a0c <ESP_CheckRX+0x168>)
 8008986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				HAL_UART_Transmit(&huart3,
 800898a:	b29a      	uxth	r2, r3
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	481f      	ldr	r0, [pc, #124]	; (8008a10 <ESP_CheckRX+0x16c>)
 8008992:	f7fe fd1b 	bl	80073cc <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart3, (uint8_t*)("\r\n"), 2, HAL_MAX_DELAY);
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	2202      	movs	r2, #2
 800899c:	491d      	ldr	r1, [pc, #116]	; (8008a14 <ESP_CheckRX+0x170>)
 800899e:	481c      	ldr	r0, [pc, #112]	; (8008a10 <ESP_CheckRX+0x16c>)
 80089a0:	f7fe fd14 	bl	80073cc <HAL_UART_Transmit>
#endif
				processingResult = processFn(keyWord,
											comUsrBuffer[comUserBufferMsgReadIdx],
 80089a4:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <ESP_CheckRX+0x160>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	029b      	lsls	r3, r3, #10
 80089ac:	4413      	add	r3, r2
 80089ae:	4a16      	ldr	r2, [pc, #88]	; (8008a08 <ESP_CheckRX+0x164>)
 80089b0:	1899      	adds	r1, r3, r2
				processingResult = processFn(keyWord,
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <ESP_CheckRX+0x160>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <ESP_CheckRX+0x168>)
 80089b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	687c      	ldr	r4, [r7, #4]
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	6838      	ldr	r0, [r7, #0]
 80089c6:	47a0      	blx	r4
 80089c8:	61f8      	str	r0, [r7, #28]
											comUsrBufferLen[comUserBufferMsgReadIdx],
											retStr,
											retU32);
				comUserBufferMsgReadIdx = (comUserBufferMsgReadIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 80089ca:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <ESP_CheckRX+0x160>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3301      	adds	r3, #1
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	4a0b      	ldr	r2, [pc, #44]	; (8008a04 <ESP_CheckRX+0x160>)
 80089d6:	6013      	str	r3, [r2, #0]
			while(comUserBufferMsgIdx != comUserBufferMsgReadIdx)
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <ESP_CheckRX+0x174>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <ESP_CheckRX+0x160>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d1c6      	bne.n	8008972 <ESP_CheckRX+0xce>
 80089e4:	e001      	b.n	80089ea <ESP_CheckRX+0x146>
			}
		}
		else
		{
			processingResult = rxResult;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	61fb      	str	r3, [r7, #28]
		}
	}


	if(okAlreadyArrived && processingResult != ESP_OK)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <ESP_CheckRX+0x156>
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <ESP_CheckRX+0x156>
	{
		processingResult = ESP_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
	}

	return processingResult;
 80089fa:	69fb      	ldr	r3, [r7, #28]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3724      	adds	r7, #36	; 0x24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd90      	pop	{r4, r7, pc}
 8008a04:	200014b8 	.word	0x200014b8
 8008a08:	200004a0 	.word	0x200004a0
 8008a0c:	200014a4 	.word	0x200014a4
 8008a10:	20001840 	.word	0x20001840
 8008a14:	0800b080 	.word	0x0800b080
 8008a18:	200014b4 	.word	0x200014b4

08008a1c <ESP_CheckResponse>:

uint8_t* ESP_CheckResponse(char *pCmd, uint32_t cmdLng, uint32_t timeOut)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
	const uint32_t blockingTimeoutYes = 1u;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	61fb      	str	r3, [r7, #28]

	uint32_t result = ESP_RSP_ERR;
 8008a2c:	f06f 0306 	mvn.w	r3, #6
 8008a30:	61bb      	str	r3, [r7, #24]
	uint32_t pDummyU32;

	char *pDummyC = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]

	result = ESP_CheckRX(timeOut, blockingTimeoutYes, ESP_CheckForKeyWord, pCmd, &pDummyC, &pDummyU32);
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <ESP_CheckResponse+0x48>)
 8008a46:	69f9      	ldr	r1, [r7, #28]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff2b 	bl	80088a4 <ESP_CheckRX>
 8008a4e:	61b8      	str	r0, [r7, #24]

	if (ESP_OK != result)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <ESP_CheckResponse+0x3e>
	{
		pDummyC = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
	}

	return (uint8_t*)pDummyC;
 8008a5a:	693b      	ldr	r3, [r7, #16]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	08008d75 	.word	0x08008d75

08008a68 <ESP_HTTPinit>:
#define atCmd_CWJAP_LNG		(uint32_t)(strlen("AT+CWJAP="))

static char httpReqBuff[MAX_HTTP_REQ_SIZE + 1] = {0};

uint32_t ESP_HTTPinit (void)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b0a5      	sub	sp, #148	; 0x94
 8008a6c:	af00      	add	r7, sp, #0

	uint32_t result = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint8_t* subResult = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint8_t pSSIDpassword[EEPROM_PAGE_SIZE/2];

	// UART init and activate-deactivate RST pin of ESP8266
	ESP_ComInit();
 8008a7a:	f000 f93b 	bl	8008cf4 <ESP_ComInit>

	// Software reset
	for(uint8_t resetAttempts = 0; resetAttempts < 3; resetAttempts++)
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8008a84:	e02b      	b.n	8008ade <ESP_HTTPinit+0x76>
	{
	    ESP_SendCommand(atCmd_RST, strlen(atCmd_RST));
 8008a86:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <ESP_HTTPinit+0x88>)
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <ESP_HTTPinit+0x88>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f7 fbd6 	bl	8000240 <strlen>
 8008a94:	4603      	mov	r3, r0
 8008a96:	4619      	mov	r1, r3
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 f93b 	bl	8008d14 <ESP_SendCommand>
	    if(NULL == ESP_CheckResponse((char*)atRsp_ready, strlen(atRsp_ready), ESP_TIMEOUT_2s))
 8008a9e:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <ESP_HTTPinit+0x8c>)
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <ESP_HTTPinit+0x8c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f7 fbca 	bl	8000240 <strlen>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff ffb1 	bl	8008a1c <ESP_CheckResponse>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <ESP_HTTPinit+0x64>
	    {
	    	result++;
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008aca:	e003      	b.n	8008ad4 <ESP_HTTPinit+0x6c>
	    }
	    else
	    {
	    	result = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	    	break;
 8008ad2:	e008      	b.n	8008ae6 <ESP_HTTPinit+0x7e>
	for(uint8_t resetAttempts = 0; resetAttempts < 3; resetAttempts++)
 8008ad4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ad8:	3301      	adds	r3, #1
 8008ada:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8008ade:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d9cf      	bls.n	8008a86 <ESP_HTTPinit+0x1e>
	    }
	}

#warning CUT HERE
	return 0;
 8008ae6:	2300      	movs	r3, #0
    if(NULL == ESP_CheckResponse((char*)atRsp_OK, strlen(atRsp_OK), ESP_TIMEOUT_300ms)) result++;

    result = (result) ? ESP_HARD_ERR : ESP_OK;

    return result;
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3794      	adds	r7, #148	; 0x94
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}
 8008af0:	2000000c 	.word	0x2000000c
 8008af4:	20000010 	.word	0x20000010

08008af8 <Do_2Sec_Reset>:
static uint32_t sendTimeOut = 0;
static uint32_t sendTimeOutStarted = 0;


static uint32_t Do_2Sec_Reset(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8008afc:	2200      	movs	r2, #0
 8008afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b02:	4810      	ldr	r0, [pc, #64]	; (8008b44 <Do_2Sec_Reset+0x4c>)
 8008b04:	f7fb f88c 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_SET);
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b0e:	480d      	ldr	r0, [pc, #52]	; (8008b44 <Do_2Sec_Reset+0x4c>)
 8008b10:	f7fb f886 	bl	8003c20 <HAL_GPIO_WritePin>
	PLATFORM_DELAY_MS(ESP_TIMEOUT_1s);
 8008b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b18:	f7f9 fa10 	bl	8001f3c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b22:	4808      	ldr	r0, [pc, #32]	; (8008b44 <Do_2Sec_Reset+0x4c>)
 8008b24:	f7fb f87c 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_RESET);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b2e:	4805      	ldr	r0, [pc, #20]	; (8008b44 <Do_2Sec_Reset+0x4c>)
 8008b30:	f7fb f876 	bl	8003c20 <HAL_GPIO_WritePin>
	PLATFORM_DELAY_MS(ESP_TIMEOUT_1s);
 8008b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b38:	f7f9 fa00 	bl	8001f3c <HAL_Delay>
	return 0;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40021000 	.word	0x40021000

08008b48 <Start_DMA_XUART>:

uint32_t Start_DMA_XUART(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	uint32_t result;
	result = (uint32_t)HAL_UART_Receive_DMA(&huart7, (uint8_t*)uartX_rx_buf, ESP_COM_BUFF_LNG);
 8008b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b52:	4905      	ldr	r1, [pc, #20]	; (8008b68 <Start_DMA_XUART+0x20>)
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <Start_DMA_XUART+0x24>)
 8008b56:	f7fe fccc 	bl	80074f2 <HAL_UART_Receive_DMA>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	607b      	str	r3, [r7, #4]
	return result;
 8008b5e:	687b      	ldr	r3, [r7, #4]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	200000a0 	.word	0x200000a0
 8008b6c:	200017bc 	.word	0x200017bc

08008b70 <ESP_CheckRX_DMA_XUART>:
 * ESP_NEVER_VALUE - initial value which must not be ever returned
 *
 */

uint32_t ESP_CheckRX_DMA_XUART(const uint32_t timeout)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]

	uint32_t result = ESP_NEVER_VALUE;
 8008b78:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008b7c:	617b      	str	r3, [r7, #20]
	uint32_t writtenChars = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]

	static uint32_t timeOut = 0;
	static uint32_t timeOutStarted = 0;

	/* If any bytes were received */
	if (uartX_rx_read_ptr != (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR))
 8008b82:	4b52      	ldr	r3, [pc, #328]	; (8008ccc <ESP_CheckRX_DMA_XUART+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8008b8c:	4b50      	ldr	r3, [pc, #320]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d07b      	beq.n	8008c8c <ESP_CheckRX_DMA_XUART+0x11c>
	{
		/* and was expected response from previous command, cancel timeout timer of the command */
		if(sendTimeOutStarted)
 8008b94:	4b4f      	ldr	r3, [pc, #316]	; (8008cd4 <ESP_CheckRX_DMA_XUART+0x164>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <ESP_CheckRX_DMA_XUART+0x32>
		{
			sendTimeOutStarted = 0;
 8008b9c:	4b4d      	ldr	r3, [pc, #308]	; (8008cd4 <ESP_CheckRX_DMA_XUART+0x164>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
		}

		/* If timer to receive all bytes was not started yet*/
		if(!timeOutStarted)
 8008ba2:	4b4d      	ldr	r3, [pc, #308]	; (8008cd8 <ESP_CheckRX_DMA_XUART+0x168>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <ESP_CheckRX_DMA_XUART+0x52>
		{
			/* start timer to wait until all bytes can arrive*/
			timeOutStarted = 1;
 8008baa:	4b4b      	ldr	r3, [pc, #300]	; (8008cd8 <ESP_CheckRX_DMA_XUART+0x168>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	601a      	str	r2, [r3, #0]
			timeOut = HAL_GetTick();
 8008bb0:	f7f9 f9b8 	bl	8001f24 <HAL_GetTick>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	4a49      	ldr	r2, [pc, #292]	; (8008cdc <ESP_CheckRX_DMA_XUART+0x16c>)
 8008bb8:	6013      	str	r3, [r2, #0]
			result = ESP_RX_PENDING;
 8008bba:	f06f 0303 	mvn.w	r3, #3
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e07b      	b.n	8008cba <ESP_CheckRX_DMA_XUART+0x14a>
		}
		else
		{
			/* If timer was started and timeout elapsed, retrieve bytes */
			if (timeOut + timeout < HAL_GetTick())
 8008bc2:	4b46      	ldr	r3, [pc, #280]	; (8008cdc <ESP_CheckRX_DMA_XUART+0x16c>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	18d4      	adds	r4, r2, r3
 8008bca:	f7f9 f9ab 	bl	8001f24 <HAL_GetTick>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d257      	bcs.n	8008c84 <ESP_CheckRX_DMA_XUART+0x114>
			{
				/* cancel timer to receive all bytes */
				timeOutStarted = 0;
 8008bd4:	4b40      	ldr	r3, [pc, #256]	; (8008cd8 <ESP_CheckRX_DMA_XUART+0x168>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
				uint32_t uartX_rx_write_ptr = (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR);
 8008bda:	4b3c      	ldr	r3, [pc, #240]	; (8008ccc <ESP_CheckRX_DMA_XUART+0x15c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008be4:	60fb      	str	r3, [r7, #12]
				while (uartX_rx_read_ptr != uartX_rx_write_ptr)
 8008be6:	e047      	b.n	8008c78 <ESP_CheckRX_DMA_XUART+0x108>
  __ASM volatile ("isb 0xF":::"memory");
 8008be8:	f3bf 8f6f 	isb	sy
}
 8008bec:	bf00      	nop
				{
					/* Said my teacher that like this it is better ... to really get DMA content actualized .. Don't Know*/
					__ISB(); // something like synchronize internal barriers and force core to refresh contents
					/* Write received char into user buffer */
					comUsrBuffer[comUserBufferMsgIdx][writtenChars] = uartX_rx_buf[uartX_rx_read_ptr];
 8008bee:	4b38      	ldr	r3, [pc, #224]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a3b      	ldr	r2, [pc, #236]	; (8008ce0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	493b      	ldr	r1, [pc, #236]	; (8008ce4 <ESP_CheckRX_DMA_XUART+0x174>)
 8008bf8:	5cc8      	ldrb	r0, [r1, r3]
 8008bfa:	493b      	ldr	r1, [pc, #236]	; (8008ce8 <ESP_CheckRX_DMA_XUART+0x178>)
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	029b      	lsls	r3, r3, #10
 8008c00:	4413      	add	r3, r2
 8008c02:	18ca      	adds	r2, r1, r3
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4413      	add	r3, r2
 8008c08:	4602      	mov	r2, r0
 8008c0a:	701a      	strb	r2, [r3, #0]
					/* Always push in front a null character (buffer element is UART_BUFFSIZE + 1) for better string handling */
					comUsrBuffer[comUserBufferMsgIdx][writtenChars+1] = '\0';
 8008c0c:	4b34      	ldr	r3, [pc, #208]	; (8008ce0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	1c59      	adds	r1, r3, #1
 8008c14:	4834      	ldr	r0, [pc, #208]	; (8008ce8 <ESP_CheckRX_DMA_XUART+0x178>)
 8008c16:	4613      	mov	r3, r2
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	4413      	add	r3, r2
 8008c1c:	4403      	add	r3, r0
 8008c1e:	440b      	add	r3, r1
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]

					uartX_rx_read_ptr = (uartX_rx_read_ptr + (uint32_t)1u) % ESP_COM_BUFF_LNG;
 8008c24:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2e:	4a28      	ldr	r2, [pc, #160]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008c30:	6013      	str	r3, [r2, #0]

					/* If the end of the string arrived or string is too long for one line, jump on the next line of comUsrBuffer*/
					if (uartX_rx_read_ptr == uartX_rx_write_ptr || (writtenChars >= (ESP_COM_BUFF_LNG-1)))
 8008c32:	4b27      	ldr	r3, [pc, #156]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d004      	beq.n	8008c46 <ESP_CheckRX_DMA_XUART+0xd6>
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d90f      	bls.n	8008c66 <ESP_CheckRX_DMA_XUART+0xf6>
					{
						/* Non-<CR><LF> message received> .. some exception mechanism */
						comUsrBufferLen[comUserBufferMsgIdx] = writtenChars+1;
 8008c46:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	3201      	adds	r2, #1
 8008c4e:	4927      	ldr	r1, [pc, #156]	; (8008cec <ESP_CheckRX_DMA_XUART+0x17c>)
 8008c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						comUserBufferMsgIdx = (comUserBufferMsgIdx + (uint32_t)1u) % COM_USR_RX_MESSAGES_MAX;
 8008c54:	4b22      	ldr	r3, [pc, #136]	; (8008ce0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a20      	ldr	r2, [pc, #128]	; (8008ce0 <ESP_CheckRX_DMA_XUART+0x170>)
 8008c60:	6013      	str	r3, [r2, #0]
						result = ESP_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
					}
					writtenChars++;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
					uartX_rx_write_ptr = (ESP_COM_BUFF_LNG - hdma_uart7_rx.Instance->NDTR);
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <ESP_CheckRX_DMA_XUART+0x15c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008c76:	60fb      	str	r3, [r7, #12]
				while (uartX_rx_read_ptr != uartX_rx_write_ptr)
 8008c78:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <ESP_CheckRX_DMA_XUART+0x160>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d1b2      	bne.n	8008be8 <ESP_CheckRX_DMA_XUART+0x78>
 8008c82:	e01a      	b.n	8008cba <ESP_CheckRX_DMA_XUART+0x14a>
				}
			}
			else
			{
				/*Otherwise say timeout is pending*/
				result = ESP_RX_PENDING;
 8008c84:	f06f 0303 	mvn.w	r3, #3
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e016      	b.n	8008cba <ESP_CheckRX_DMA_XUART+0x14a>
		}
	}
	else
	{
		/* and was expected response from previous command, cancel timeout timer of the command */
		if(sendTimeOutStarted && sendTimeOut + TX_TIMETOUT < HAL_GetTick())
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <ESP_CheckRX_DMA_XUART+0x164>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00f      	beq.n	8008cb4 <ESP_CheckRX_DMA_XUART+0x144>
 8008c94:	4b16      	ldr	r3, [pc, #88]	; (8008cf0 <ESP_CheckRX_DMA_XUART+0x180>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8008c9c:	f7f9 f942 	bl	8001f24 <HAL_GetTick>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d206      	bcs.n	8008cb4 <ESP_CheckRX_DMA_XUART+0x144>
		{
			sendTimeOutStarted = 0;
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <ESP_CheckRX_DMA_XUART+0x164>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
			result = ESP_TX_TIMEOUT;
 8008cac:	f06f 0304 	mvn.w	r3, #4
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e002      	b.n	8008cba <ESP_CheckRX_DMA_XUART+0x14a>
		}
		else
		{
			result = ESP_RX_SILENT;
 8008cb4:	f06f 0301 	mvn.w	r3, #1
 8008cb8:	617b      	str	r3, [r7, #20]

		}
	}

	while(result == ESP_NEVER_VALUE);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8008cc0:	d0fb      	beq.n	8008cba <ESP_CheckRX_DMA_XUART+0x14a>

	return result;
 8008cc2:	697b      	ldr	r3, [r7, #20]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd90      	pop	{r4, r7, pc}
 8008ccc:	200018c4 	.word	0x200018c4
 8008cd0:	200014bc 	.word	0x200014bc
 8008cd4:	200014c4 	.word	0x200014c4
 8008cd8:	200014c8 	.word	0x200014c8
 8008cdc:	200014cc 	.word	0x200014cc
 8008ce0:	200014b4 	.word	0x200014b4
 8008ce4:	200000a0 	.word	0x200000a0
 8008ce8:	200004a0 	.word	0x200004a0
 8008cec:	200014a4 	.word	0x200014a4
 8008cf0:	200014c0 	.word	0x200014c0

08008cf4 <ESP_ComInit>:

uint32_t ESP_ComInit(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	607b      	str	r3, [r7, #4]

	Do_2Sec_Reset();
 8008cfe:	f7ff fefb 	bl	8008af8 <Do_2Sec_Reset>

	result = Start_DMA_XUART();
 8008d02:	f7ff ff21 	bl	8008b48 <Start_DMA_XUART>
 8008d06:	6078      	str	r0, [r7, #4]

	return result;
 8008d08:	687b      	ldr	r3, [r7, #4]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <ESP_SendCommand>:

uint32_t ESP_SendCommand(const char* const pStrCmd, const uint32_t lng)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	uint32_t result = ESP_NEVER_VALUE;
 8008d1e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008d22:	60fb      	str	r3, [r7, #12]

	if(!sendTimeOutStarted)
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <ESP_SendCommand+0x54>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d114      	bne.n	8008d56 <ESP_SendCommand+0x42>
	{
		result = (uint32_t)HAL_UART_Transmit(&huart7, (uint8_t*)pStrCmd, lng, HAL_MAX_DELAY);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	480d      	ldr	r0, [pc, #52]	; (8008d6c <ESP_SendCommand+0x58>)
 8008d38:	f7fe fb48 	bl	80073cc <HAL_UART_Transmit>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	60fb      	str	r3, [r7, #12]
		sendTimeOutStarted = 1;
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <ESP_SendCommand+0x54>)
 8008d42:	2201      	movs	r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
		sendTimeOut = HAL_GetTick();
 8008d46:	f7f9 f8ed 	bl	8001f24 <HAL_GetTick>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <ESP_SendCommand+0x5c>)
 8008d4e:	6013      	str	r3, [r2, #0]
		result = ESP_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e002      	b.n	8008d5c <ESP_SendCommand+0x48>
	}
	else
	{
		result = ESP_COMMAND_BUSY;
 8008d56:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5a:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	200014c4 	.word	0x200014c4
 8008d6c:	200017bc 	.word	0x200017bc
 8008d70:	200014c0 	.word	0x200014c0

08008d74 <ESP_CheckForKeyWord>:
 */

#include "esp8266_utils.h"

uint32_t ESP_CheckForKeyWord(char * key, char * buff, uint32_t buff_lng, char **ppRetStr, uint32_t *retVal)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
	uint32_t result = ESP_RSP_ERR, key_lng = strlen(key);
 8008d82:	f06f 0306 	mvn.w	r3, #6
 8008d86:	61fb      	str	r3, [r7, #28]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7f7 fa59 	bl	8000240 <strlen>
 8008d8e:	6138      	str	r0, [r7, #16]
	char* pBuff = buff;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	61bb      	str	r3, [r7, #24]

	UNUSED(ppRetStr);

	if(key == NULL || buff == NULL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <ESP_CheckForKeyWord+0x2c>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d102      	bne.n	8008da6 <ESP_CheckForKeyWord+0x32>
	{
		return ESP_HARD_ERR;
 8008da0:	f06f 0305 	mvn.w	r3, #5
 8008da4:	e030      	b.n	8008e08 <ESP_CheckForKeyWord+0x94>
	}
	if(key_lng > buff_lng)
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d901      	bls.n	8008db2 <ESP_CheckForKeyWord+0x3e>
	{
		return result;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	e02a      	b.n	8008e08 <ESP_CheckForKeyWord+0x94>
	}

	for (uint32_t idx = 0; idx < buff_lng - key_lng + 1; idx++)
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e016      	b.n	8008de6 <ESP_CheckForKeyWord+0x72>
	{
		if(!memcmp(pBuff, key, key_lng))
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	69b8      	ldr	r0, [r7, #24]
 8008dbe:	f000 ff7f 	bl	8009cc0 <memcmp>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d108      	bne.n	8008dda <ESP_CheckForKeyWord+0x66>
		{
			result = ESP_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61fb      	str	r3, [r7, #28]
			*ppRetStr = pBuff;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	601a      	str	r2, [r3, #0]
			*retVal = key_lng;
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	601a      	str	r2, [r3, #0]
			break;
 8008dd8:	e00c      	b.n	8008df4 <ESP_CheckForKeyWord+0x80>
		}

		(uint8_t*)pBuff++;
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	61bb      	str	r3, [r7, #24]
	for (uint32_t idx = 0; idx < buff_lng - key_lng + 1; idx++)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	3301      	adds	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	3301      	adds	r3, #1
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d3e1      	bcc.n	8008db8 <ESP_CheckForKeyWord+0x44>

	}
	if(result!= ESP_OK)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <ESP_CheckForKeyWord+0x92>
	{
		*retVal = 0;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
		*ppRetStr = NULL;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
	}

	return result;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <NRF_configure>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure(bool ptx_nprx)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 8008e1a:	230f      	movs	r3, #15
 8008e1c:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 8008e1e:	230e      	movs	r3, #14
 8008e20:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 8008e22:	2301      	movs	r3, #1
 8008e24:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 8008e26:	2301      	movs	r3, #1
 8008e28:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 8008e2e:	23ff      	movs	r3, #255	; 0xff
 8008e30:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 8008e32:	2302      	movs	r3, #2
 8008e34:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 8008e36:	230e      	movs	r3, #14
 8008e38:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 8008e3a:	2371      	movs	r3, #113	; 0x71
 8008e3c:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 8008e42:	2306      	movs	r3, #6
 8008e44:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 8008e46:	4a2b      	ldr	r2, [pc, #172]	; (8008ef4 <NRF_configure+0xe4>)
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e50:	6018      	str	r0, [r3, #0]
 8008e52:	3304      	adds	r3, #4
 8008e54:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 8008e56:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <NRF_configure+0xe4>)
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	3304      	adds	r3, #4
 8008e64:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <NRF_configure+0x66>
	{
		NRF_setCONFIG(config_ptx);
 8008e6c:	7fbb      	ldrb	r3, [r7, #30]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f84a 	bl	8008f08 <NRF_setCONFIG>
 8008e74:	e003      	b.n	8008e7e <NRF_configure+0x6e>
	}
	else
	{
		NRF_setCONFIG(config_prx);
 8008e76:	7ffb      	ldrb	r3, [r7, #31]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f845 	bl	8008f08 <NRF_setCONFIG>
	}

	NRF_setEN_AA(en_aa);
 8008e7e:	7f7b      	ldrb	r3, [r7, #29]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f84f 	bl	8008f24 <NRF_setEN_AA>
	NRF_setEN_RXADDR(en_rxaddr);
 8008e86:	7f3b      	ldrb	r3, [r7, #28]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f859 	bl	8008f40 <NRF_setEN_RXADDR>
	NRF_setSETUP_AW(setup_aw);
 8008e8e:	7efb      	ldrb	r3, [r7, #27]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f863 	bl	8008f5c <NRF_setSETUP_AW>
	NRF_setSETUP_RETR(setup_retr);
 8008e96:	7ebb      	ldrb	r3, [r7, #26]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 f86d 	bl	8008f78 <NRF_setSETUP_RETR>
	NRF_setRF_CH(rf_ch);
 8008e9e:	7e7b      	ldrb	r3, [r7, #25]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 f877 	bl	8008f94 <NRF_setRF_CH>
	NRF_setRF_SETUP(rf_setup);
 8008ea6:	7e3b      	ldrb	r3, [r7, #24]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f881 	bl	8008fb0 <NRF_setRF_SETUP>
	NRF_setSTATUS(status);
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f88b 	bl	8008fcc <NRF_setSTATUS>
	NRF_setDYNPD(dynpd);
 8008eb6:	7dbb      	ldrb	r3, [r7, #22]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f8f1 	bl	80090a0 <NRF_setDYNPD>
	NRF_setFEATURE(feature);
 8008ebe:	7d7b      	ldrb	r3, [r7, #21]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 f8fb 	bl	80090bc <NRF_setFEATURE>

	if(ptx_nprx)
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <NRF_configure+0xc8>
	{
		NRF_setTX_ADDR((uint8_t*)tx_adr, NRF_ADR_MAX);
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	2105      	movs	r1, #5
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f8b6 	bl	8009044 <NRF_setTX_ADDR>
	}

	NRF_setRX_ADDR_P0((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 8008ed8:	f107 0310 	add.w	r3, r7, #16
 8008edc:	2105      	movs	r1, #5
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f882 	bl	8008fe8 <NRF_setRX_ADDR_P0>

	NRF_setFLUSH_RX();
 8008ee4:	f000 f975 	bl	80091d2 <NRF_setFLUSH_RX>
	NRF_setFLUSH_TX();
 8008ee8:	f000 f962 	bl	80091b0 <NRF_setFLUSH_TX>
}
 8008eec:	bf00      	nop
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	0800b764 	.word	0x0800b764

08008ef8 <NRF_getSTATUS>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
	return nrfport_readByte(STATUS_ADR);
 8008efc:	2007      	movs	r0, #7
 8008efe:	f000 fd1e 	bl	800993e <nrfport_readByte>
 8008f02:	4603      	mov	r3, r0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <NRF_setCONFIG>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG(uint8_t arg)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(CONFIG_ADR, arg);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4619      	mov	r1, r3
 8008f16:	2000      	movs	r0, #0
 8008f18:	f000 fcf2 	bl	8009900 <nrfport_writeByte>
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <NRF_setEN_AA>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA(uint8_t arg)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_AA_ADR, arg);
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	4619      	mov	r1, r3
 8008f32:	2001      	movs	r0, #1
 8008f34:	f000 fce4 	bl	8009900 <nrfport_writeByte>
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <NRF_setEN_RXADDR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR(uint8_t arg)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(EN_RXADDR_ADR, arg);
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	2002      	movs	r0, #2
 8008f50:	f000 fcd6 	bl	8009900 <nrfport_writeByte>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <NRF_setSETUP_AW>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW(uint8_t arg)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_AW_ADR, arg);
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	2003      	movs	r0, #3
 8008f6c:	f000 fcc8 	bl	8009900 <nrfport_writeByte>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <NRF_setSETUP_RETR>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR(uint8_t arg)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(SETUP_RETR_ADR, arg);
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	4619      	mov	r1, r3
 8008f86:	2004      	movs	r0, #4
 8008f88:	f000 fcba 	bl	8009900 <nrfport_writeByte>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <NRF_setRF_CH>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH(uint8_t arg)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_CH_ADR, arg);
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	2005      	movs	r0, #5
 8008fa4:	f000 fcac 	bl	8009900 <nrfport_writeByte>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <NRF_setRF_SETUP>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP(uint8_t arg)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(RF_SETUP_ADR, arg);
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	2006      	movs	r0, #6
 8008fc0:	f000 fc9e 	bl	8009900 <nrfport_writeByte>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <NRF_setSTATUS>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS(uint8_t arg)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(STATUS_ADR, arg);
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	2007      	movs	r0, #7
 8008fdc:	f000 fc90 	bl	8009900 <nrfport_writeByte>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <NRF_setRX_ADDR_P0>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0(uint8_t* arg, uint32_t lng)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d921      	bls.n	800903c <NRF_setRX_ADDR_P0+0x54>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d81e      	bhi.n	800903c <NRF_setRX_ADDR_P0+0x54>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01b      	beq.n	800903c <NRF_setRX_ADDR_P0+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8009004:	2300      	movs	r3, #0
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	2300      	movs	r3, #0
 800900a:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 800900c:	2300      	movs	r3, #0
 800900e:	60bb      	str	r3, [r7, #8]
 8009010:	2300      	movs	r3, #0
 8009012:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8009014:	f107 0310 	add.w	r3, r7, #16
 8009018:	3301      	adds	r3, #1
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fe5c 	bl	8009cdc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 8009024:	232a      	movs	r3, #42	; 0x2a
 8009026:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fc39 	bl	80098ac <nrfport_spiTransaction>
 800903a:	e000      	b.n	800903e <NRF_setRX_ADDR_P0+0x56>
		return;
 800903c:	bf00      	nop
}
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <NRF_setTX_ADDR>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR(uint8_t* arg, uint32_t lng)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d921      	bls.n	8009098 <NRF_setTX_ADDR+0x54>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b05      	cmp	r3, #5
 8009058:	d81e      	bhi.n	8009098 <NRF_setTX_ADDR+0x54>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01b      	beq.n	8009098 <NRF_setTX_ADDR+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	2300      	movs	r3, #0
 8009066:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8009068:	2300      	movs	r3, #0
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	2300      	movs	r3, #0
 800906e:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 8009070:	f107 0310 	add.w	r3, r7, #16
 8009074:	3301      	adds	r3, #1
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fe2e 	bl	8009cdc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 8009080:	2330      	movs	r3, #48	; 0x30
 8009082:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction(tx, rx, lng + 1);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	f107 0310 	add.w	r3, r7, #16
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fc0b 	bl	80098ac <nrfport_spiTransaction>
 8009096:	e000      	b.n	800909a <NRF_setTX_ADDR+0x56>
		return;
 8009098:	bf00      	nop
}
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <NRF_setDYNPD>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD(uint8_t arg)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(DYNPD_ADR, arg);
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4619      	mov	r1, r3
 80090ae:	201c      	movs	r0, #28
 80090b0:	f000 fc26 	bl	8009900 <nrfport_writeByte>
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <NRF_setFEATURE>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE(uint8_t arg)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte(FEATURE_ADR, arg);
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	4619      	mov	r1, r3
 80090ca:	201d      	movs	r0, #29
 80090cc:	f000 fc18 	bl	8009900 <nrfport_writeByte>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <NRF_getR_RX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b094      	sub	sp, #80	; 0x50
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d029      	beq.n	800913c <NRF_getR_RX_PAYLOAD+0x64>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d826      	bhi.n	800913c <NRF_getR_RX_PAYLOAD+0x64>

	uint8_t tx[33] = {0};
 80090ee:	2300      	movs	r3, #0
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090f6:	221d      	movs	r2, #29
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fdfc 	bl	8009cf8 <memset>
	uint8_t rx[33] = {0};
 8009100:	2300      	movs	r3, #0
 8009102:	60bb      	str	r3, [r7, #8]
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	221d      	movs	r2, #29
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fdf3 	bl	8009cf8 <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 8009112:	2361      	movs	r3, #97	; 0x61
 8009114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction(tx, rx, lng + 1);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	f107 0108 	add.w	r1, r7, #8
 8009120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fbc1 	bl	80098ac <nrfport_spiTransaction>
	memcpy(arg, rx + 1, lng);
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	3301      	adds	r3, #1
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fdd1 	bl	8009cdc <memcpy>
 800913a:	e000      	b.n	800913e <NRF_getR_RX_PAYLOAD+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 800913c:	bf00      	nop
}
 800913e:	3750      	adds	r7, #80	; 0x50
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <NRF_setW_TX_PAYLOAD>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_setW_TX_PAYLOAD(uint8_t* arg, uint32_t lng)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b094      	sub	sp, #80	; 0x50
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b20      	cmp	r3, #32
 8009152:	d829      	bhi.n	80091a8 <NRF_setW_TX_PAYLOAD+0x64>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d026      	beq.n	80091a8 <NRF_setW_TX_PAYLOAD+0x64>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 800915a:	2300      	movs	r3, #0
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009162:	221d      	movs	r2, #29
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fdc6 	bl	8009cf8 <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 800916c:	2300      	movs	r3, #0
 800916e:	60bb      	str	r3, [r7, #8]
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	221d      	movs	r2, #29
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fdbd 	bl	8009cf8 <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD;
 800917e:	23a0      	movs	r3, #160	; 0xa0
 8009180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	memcpy(tx+1, arg, lng);
 8009184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009188:	3301      	adds	r3, #1
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fda4 	bl	8009cdc <memcpy>
	nrfport_spiTransaction(tx, rx, lng+1);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	f107 0108 	add.w	r1, r7, #8
 800919c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fb83 	bl	80098ac <nrfport_spiTransaction>
 80091a6:	e000      	b.n	80091aa <NRF_setW_TX_PAYLOAD+0x66>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 80091a8:	bf00      	nop
}
 80091aa:	3750      	adds	r7, #80	; 0x50
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <NRF_setFLUSH_TX>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 80091b6:	23e1      	movs	r3, #225	; 0xe1
 80091b8:	71fb      	strb	r3, [r7, #7]
 80091ba:	2300      	movs	r3, #0
 80091bc:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 80091be:	1db9      	adds	r1, r7, #6
 80091c0:	1dfb      	adds	r3, r7, #7
 80091c2:	2201      	movs	r2, #1
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fb71 	bl	80098ac <nrfport_spiTransaction>
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <NRF_setFLUSH_RX>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX(void)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 80091d8:	23e2      	movs	r3, #226	; 0xe2
 80091da:	71fb      	strb	r3, [r7, #7]
 80091dc:	2300      	movs	r3, #0
 80091de:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction(&tx, &rx, sizeof(tx));
 80091e0:	1db9      	adds	r1, r7, #6
 80091e2:	1dfb      	adds	r3, r7, #7
 80091e4:	2201      	movs	r2, #1
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fb60 	bl	80098ac <nrfport_spiTransaction>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <NRF_getR_RX_PL_WID>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
	return nrfport_readByte(CMD_R_RX_PL_WID);
 80091f8:	2060      	movs	r0, #96	; 0x60
 80091fa:	f000 fba0 	bl	800993e <nrfport_readByte>
 80091fe:	4603      	mov	r3, r0
}
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}

08009204 <NRF_getIRQ>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
	return nrfport_getIRQ();
 8009208:	f000 fbe2 	bl	80099d0 <nrfport_getIRQ>
 800920c:	4603      	mov	r3, r0
}
 800920e:	4618      	mov	r0, r3
 8009210:	bd80      	pop	{r7, pc}

08009212 <NRF_CEactivate>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate(void)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	af00      	add	r7, sp, #0
	nrfport_ceHigh();
 8009216:	f000 fbab 	bl	8009970 <nrfport_ceHigh>
}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}

0800921e <NRF_CEdeactivate>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate(void)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	af00      	add	r7, sp, #0
	nrfport_ceLow();
 8009222:	f000 fbb1 	bl	8009988 <nrfport_ceLow>
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}

0800922a <NRF_powerUp>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp(void)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	af00      	add	r7, sp, #0
	nrfport_powerUp();
 800922e:	f000 fbb7 	bl	80099a0 <nrfport_powerUp>
}
 8009232:	bf00      	nop
 8009234:	bd80      	pop	{r7, pc}

08009236 <NRF_powerDown>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown(void)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	af00      	add	r7, sp, #0
	nrfport_powerDown();
 800923a:	f000 fbbd 	bl	80099b8 <nrfport_powerDown>
}
 800923e:	bf00      	nop
 8009240:	bd80      	pop	{r7, pc}

08009242 <NRF_postProcess>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess(uint8_t pipe, uint8_t* rxBuff)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	4603      	mov	r3, r0
 800924a:	6039      	str	r1, [r7, #0]
 800924c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 8009256:	23ff      	movs	r3, #255	; 0xff
 8009258:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS();
 800925a:	f7ff fe4d 	bl	8008ef8 <NRF_getSTATUS>
 800925e:	4603      	mov	r3, r0
 8009260:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 8009262:	7b3b      	ldrb	r3, [r7, #12]
 8009264:	f003 0310 	and.w	r3, r3, #16
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <NRF_postProcess+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	f043 0310 	orr.w	r3, r3, #16
 8009272:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 8009274:	7b3b      	ldrb	r3, [r7, #12]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <NRF_postProcess+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 8009286:	7b3b      	ldrb	r3, [r7, #12]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <NRF_postProcess+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	f043 0320 	orr.w	r3, r3, #32
 8009296:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 8009298:	23ff      	movs	r3, #255	; 0xff
 800929a:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 800929c:	7b3b      	ldrb	r3, [r7, #12]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d016      	beq.n	80092d4 <NRF_postProcess+0x92>
	{
		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 80092a6:	7b3b      	ldrb	r3, [r7, #12]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 80092ac:	f003 0306 	and.w	r3, r3, #6
 80092b0:	737b      	strb	r3, [r7, #13]
	  if(rPipe == pipe)
 80092b2:	7b7a      	ldrb	r2, [r7, #13]
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d10c      	bne.n	80092d4 <NRF_postProcess+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID();
 80092ba:	f7ff ff9b 	bl	80091f4 <NRF_getR_RX_PL_WID>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD(rxBuff, rxBytes);
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6838      	ldr	r0, [r7, #0]
 80092c8:	f7ff ff06 	bl	80090d8 <NRF_getR_RX_PAYLOAD>
		  wStatus |= (1 << RX_DR);
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d2:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <NRF_postProcess+0xae>
	{
		NRF_setSTATUS(wStatus);
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fe75 	bl	8008fcc <NRF_setSTATUS>
		if(rStatus & (1 << MAX_RT))
 80092e2:	7b3b      	ldrb	r3, [r7, #12]
 80092e4:	f003 0310 	and.w	r3, r3, #16
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <NRF_postProcess+0xae>
		{
			NRF_setFLUSH_TX();
 80092ec:	f7ff ff60 	bl	80091b0 <NRF_setFLUSH_TX>
		}
	}
	return rxBytes;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <NRF_powerCycle>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle(void (*msDelay)(uint32_t))
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown();
 8009306:	f7ff ff96 	bl	8009236 <NRF_powerDown>
	  msDelay(100);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2064      	movs	r0, #100	; 0x64
 800930e:	4798      	blx	r3
	  NRF_powerUp();
 8009310:	f7ff ff8b 	bl	800922a <NRF_powerUp>
	  msDelay(100);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2064      	movs	r0, #100	; 0x64
 8009318:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS();
 800931a:	f7ff fded 	bl	8008ef8 <NRF_getSTATUS>
 800931e:	4603      	mov	r3, r0
 8009320:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2064      	movs	r0, #100	; 0x64
 800932c:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b0e      	cmp	r3, #14
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2da      	uxtb	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b03      	cmp	r3, #3
 800933e:	bf94      	ite	ls
 8009340:	2301      	movls	r3, #1
 8009342:	2300      	movhi	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <NRF_powerCycle+0x20>


	  return (uint32_t)status;
 800934e:	7afb      	ldrb	r3, [r7, #11]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <NRF_configure_B>:
 * as well as maximal rx timeout. At the end RX and TX FIFO are flushed.
 *
 * See datasheet of the NRF24L01+ to extend or change configuring routine.
 */
void NRF_configure_B(bool ptx_nprx)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
	const uint8_t config_prx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP | 1 << PRIM_RX);
 8009362:	230f      	movs	r3, #15
 8009364:	77fb      	strb	r3, [r7, #31]
	const uint8_t config_ptx = (1 << EN_CRC | 1 << CRCO | 1 << PWR_UP);
 8009366:	230e      	movs	r3, #14
 8009368:	77bb      	strb	r3, [r7, #30]

	const uint8_t en_aa = (1 << ENAA_P0);
 800936a:	2301      	movs	r3, #1
 800936c:	777b      	strb	r3, [r7, #29]
	const uint8_t en_rxaddr = (1 << ERX_P0);
 800936e:	2301      	movs	r3, #1
 8009370:	773b      	strb	r3, [r7, #28]
	const uint8_t setup_aw = (1 << AW_1 | 1 << AW_0);
 8009372:	2303      	movs	r3, #3
 8009374:	76fb      	strb	r3, [r7, #27]

	const uint8_t setup_retr = (1 << ARD_3 | 1 << ARD_2 | 1 << ARD_1 | 1 << ARD_0 |
 8009376:	23ff      	movs	r3, #255	; 0xff
 8009378:	76bb      	strb	r3, [r7, #26]
				   1 << ARC_3 | 1 << ARC_2 | 1 << ARC_1 | 1 << ARC_0);

	const uint8_t rf_ch = (1 << RF_CH_1);
 800937a:	2302      	movs	r3, #2
 800937c:	767b      	strb	r3, [r7, #25]
	const uint8_t rf_setup = (1 << RF_DR_HIGH | 1 << RF_PWR_1 | 1 << RF_PWR_0);
 800937e:	230e      	movs	r3, #14
 8009380:	763b      	strb	r3, [r7, #24]
	const uint8_t status = (1 << RX_DR | 1 << TX_DS | 1 << MAX_RT | 1 << TX_FULL);
 8009382:	2371      	movs	r3, #113	; 0x71
 8009384:	75fb      	strb	r3, [r7, #23]
	const uint8_t dynpd = (1 << DPL_P0);
 8009386:	2301      	movs	r3, #1
 8009388:	75bb      	strb	r3, [r7, #22]
	const uint8_t feature = (1 << EN_DPL | 1 << EN_ACK_PAY);
 800938a:	2306      	movs	r3, #6
 800938c:	757b      	strb	r3, [r7, #21]


	const char rx_adr_p0[NRF_ADR_MAX] = {"ADR01"};
 800938e:	4a2b      	ldr	r2, [pc, #172]	; (800943c <NRF_configure_B+0xe4>)
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009398:	6018      	str	r0, [r3, #0]
 800939a:	3304      	adds	r3, #4
 800939c:	7019      	strb	r1, [r3, #0]
	const char tx_adr[NRF_ADR_MAX] = {"ADR01"};
 800939e:	4a27      	ldr	r2, [pc, #156]	; (800943c <NRF_configure_B+0xe4>)
 80093a0:	f107 0308 	add.w	r3, r7, #8
 80093a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093a8:	6018      	str	r0, [r3, #0]
 80093aa:	3304      	adds	r3, #4
 80093ac:	7019      	strb	r1, [r3, #0]

	if(ptx_nprx)
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <NRF_configure_B+0x66>
	{
		NRF_setCONFIG_B(config_ptx);
 80093b4:	7fbb      	ldrb	r3, [r7, #30]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f84a 	bl	8009450 <NRF_setCONFIG_B>
 80093bc:	e003      	b.n	80093c6 <NRF_configure_B+0x6e>
	}
	else
	{
		NRF_setCONFIG_B(config_prx);
 80093be:	7ffb      	ldrb	r3, [r7, #31]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f845 	bl	8009450 <NRF_setCONFIG_B>
	}

	NRF_setEN_AA_B(en_aa);
 80093c6:	7f7b      	ldrb	r3, [r7, #29]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f84f 	bl	800946c <NRF_setEN_AA_B>
	NRF_setEN_RXADDR_B(en_rxaddr);
 80093ce:	7f3b      	ldrb	r3, [r7, #28]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 f859 	bl	8009488 <NRF_setEN_RXADDR_B>
	NRF_setSETUP_AW_B(setup_aw);
 80093d6:	7efb      	ldrb	r3, [r7, #27]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f863 	bl	80094a4 <NRF_setSETUP_AW_B>
	NRF_setSETUP_RETR_B(setup_retr);
 80093de:	7ebb      	ldrb	r3, [r7, #26]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f86d 	bl	80094c0 <NRF_setSETUP_RETR_B>
	NRF_setRF_CH_B(rf_ch);
 80093e6:	7e7b      	ldrb	r3, [r7, #25]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f877 	bl	80094dc <NRF_setRF_CH_B>
	NRF_setRF_SETUP_B(rf_setup);
 80093ee:	7e3b      	ldrb	r3, [r7, #24]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 f881 	bl	80094f8 <NRF_setRF_SETUP_B>
	NRF_setSTATUS_B(status);
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f88b 	bl	8009514 <NRF_setSTATUS_B>
	NRF_setDYNPD_B(dynpd);
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f8f1 	bl	80095e8 <NRF_setDYNPD_B>
	NRF_setFEATURE_B(feature);
 8009406:	7d7b      	ldrb	r3, [r7, #21]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f8fb 	bl	8009604 <NRF_setFEATURE_B>

	if(ptx_nprx)
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <NRF_configure_B+0xc8>
	{
		NRF_setTX_ADDR_B((uint8_t*)tx_adr, NRF_ADR_MAX);
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	2105      	movs	r1, #5
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f8b6 	bl	800958c <NRF_setTX_ADDR_B>
	}

	NRF_setRX_ADDR_P0_B((uint8_t*)rx_adr_p0, NRF_ADR_MAX);
 8009420:	f107 0310 	add.w	r3, r7, #16
 8009424:	2105      	movs	r1, #5
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f882 	bl	8009530 <NRF_setRX_ADDR_P0_B>

	NRF_setFLUSH_RX_B();
 800942c:	f000 f93f 	bl	80096ae <NRF_setFLUSH_RX_B>
	NRF_setFLUSH_TX_B();
 8009430:	f000 f92c 	bl	800968c <NRF_setFLUSH_TX_B>
}
 8009434:	bf00      	nop
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0800b76c 	.word	0x0800b76c

08009440 <NRF_getSTATUS_B>:
  * @brief Get the STATUS register.
  *
  * @return 8-bit register content.
  */
uint8_t NRF_getSTATUS_B(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(STATUS_ADR);
 8009444:	2007      	movs	r0, #7
 8009446:	f000 fb22 	bl	8009a8e <nrfport_readByte_B>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	bd80      	pop	{r7, pc}

08009450 <NRF_setCONFIG_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setCONFIG_B(uint8_t arg)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(CONFIG_ADR, arg);
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	4619      	mov	r1, r3
 800945e:	2000      	movs	r0, #0
 8009460:	f000 faf6 	bl	8009a50 <nrfport_writeByte_B>
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <NRF_setEN_AA_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_AA_B(uint8_t arg)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_AA_ADR, arg);
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	4619      	mov	r1, r3
 800947a:	2001      	movs	r0, #1
 800947c:	f000 fae8 	bl	8009a50 <nrfport_writeByte_B>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <NRF_setEN_RXADDR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setEN_RXADDR_B(uint8_t arg)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(EN_RXADDR_ADR, arg);
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	4619      	mov	r1, r3
 8009496:	2002      	movs	r0, #2
 8009498:	f000 fada 	bl	8009a50 <nrfport_writeByte_B>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <NRF_setSETUP_AW_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_AW_B(uint8_t arg)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_AW_ADR, arg);
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2003      	movs	r0, #3
 80094b4:	f000 facc 	bl	8009a50 <nrfport_writeByte_B>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <NRF_setSETUP_RETR_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSETUP_RETR_B(uint8_t arg)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(SETUP_RETR_ADR, arg);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4619      	mov	r1, r3
 80094ce:	2004      	movs	r0, #4
 80094d0:	f000 fabe 	bl	8009a50 <nrfport_writeByte_B>
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <NRF_setRF_CH_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_CH_B(uint8_t arg)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_CH_ADR, arg);
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	4619      	mov	r1, r3
 80094ea:	2005      	movs	r0, #5
 80094ec:	f000 fab0 	bl	8009a50 <nrfport_writeByte_B>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <NRF_setRF_SETUP_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setRF_SETUP_B(uint8_t arg)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(RF_SETUP_ADR, arg);
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	4619      	mov	r1, r3
 8009506:	2006      	movs	r0, #6
 8009508:	f000 faa2 	bl	8009a50 <nrfport_writeByte_B>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <NRF_setSTATUS_B>:
  * @brief Set the CONFIG register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setSTATUS_B(uint8_t arg)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(STATUS_ADR, arg);
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	4619      	mov	r1, r3
 8009522:	2007      	movs	r0, #7
 8009524:	f000 fa94 	bl	8009a50 <nrfport_writeByte_B>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <NRF_setRX_ADDR_P0_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setRX_ADDR_P0_B(uint8_t* arg, uint32_t lng)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d921      	bls.n	8009584 <NRF_setRX_ADDR_P0_B+0x54>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b05      	cmp	r3, #5
 8009544:	d81e      	bhi.n	8009584 <NRF_setRX_ADDR_P0_B+0x54>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01b      	beq.n	8009584 <NRF_setRX_ADDR_P0_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	2300      	movs	r3, #0
 8009552:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
 8009558:	2300      	movs	r3, #0
 800955a:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 800955c:	f107 0310 	add.w	r3, r7, #16
 8009560:	3301      	adds	r3, #1
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fbb8 	bl	8009cdc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | RX_ADR_P0_ADR;
 800956c:	232a      	movs	r3, #42	; 0x2a
 800956e:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	f107 0108 	add.w	r1, r7, #8
 8009578:	f107 0310 	add.w	r3, r7, #16
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fa3d 	bl	80099fc <nrfport_spiTransaction_B>
 8009582:	e000      	b.n	8009586 <NRF_setRX_ADDR_P0_B+0x56>
		return;
 8009584:	bf00      	nop
}
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <NRF_setTX_ADDR_B>:
  * @param arg buffer where address is stored.
  * @param lng of the address (3-5).
  *
  */
void NRF_setTX_ADDR_B(uint8_t* arg, uint32_t lng)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	if (lng < NRF_ADR_MIN || lng > NRF_ADR_MAX || arg == NULL)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d921      	bls.n	80095e0 <NRF_setTX_ADDR_B+0x54>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d81e      	bhi.n	80095e0 <NRF_setTX_ADDR_B+0x54>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01b      	beq.n	80095e0 <NRF_setTX_ADDR_B+0x54>
		return;

	uint8_t tx[WR_RX_ADR_P0_LNG] = {0};
 80095a8:	2300      	movs	r3, #0
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	2300      	movs	r3, #0
 80095ae:	82bb      	strh	r3, [r7, #20]
	uint8_t rx[WR_RX_ADR_P0_LNG] = {0};
 80095b0:	2300      	movs	r3, #0
 80095b2:	60bb      	str	r3, [r7, #8]
 80095b4:	2300      	movs	r3, #0
 80095b6:	81bb      	strh	r3, [r7, #12]

	memcpy(tx + 1, arg, lng);
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	3301      	adds	r3, #1
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb8a 	bl	8009cdc <memcpy>

	tx[RD_BYTE_CMD] = CMD_W_REGISTER | TX_ADR_ADR;
 80095c8:	2330      	movs	r3, #48	; 0x30
 80095ca:	743b      	strb	r3, [r7, #16]

	nrfport_spiTransaction_B(tx, rx, lng + 1);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	f107 0108 	add.w	r1, r7, #8
 80095d4:	f107 0310 	add.w	r3, r7, #16
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fa0f 	bl	80099fc <nrfport_spiTransaction_B>
 80095de:	e000      	b.n	80095e2 <NRF_setTX_ADDR_B+0x56>
		return;
 80095e0:	bf00      	nop
}
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <NRF_setDYNPD_B>:
  * @brief Set the DYNPD register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setDYNPD_B(uint8_t arg)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(DYNPD_ADR, arg);
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	4619      	mov	r1, r3
 80095f6:	201c      	movs	r0, #28
 80095f8:	f000 fa2a 	bl	8009a50 <nrfport_writeByte_B>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <NRF_setFEATURE_B>:
  * @brief Set the FEATURE register.
  *
  * @param arg 8-bit register content to be set.
  */
void NRF_setFEATURE_B(uint8_t arg)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
	nrfport_writeByte_B(FEATURE_ADR, arg);
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	4619      	mov	r1, r3
 8009612:	201d      	movs	r0, #29
 8009614:	f000 fa1c 	bl	8009a50 <nrfport_writeByte_B>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <NRF_getR_RX_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_getR_RX_PAYLOAD_B(uint8_t* arg, uint32_t lng)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b094      	sub	sp, #80	; 0x50
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d029      	beq.n	8009684 <NRF_getR_RX_PAYLOAD_B+0x64>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b20      	cmp	r3, #32
 8009634:	d826      	bhi.n	8009684 <NRF_getR_RX_PAYLOAD_B+0x64>

	uint8_t tx[33] = {0};
 8009636:	2300      	movs	r3, #0
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800963a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800963e:	221d      	movs	r2, #29
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fb58 	bl	8009cf8 <memset>
	uint8_t rx[33] = {0};
 8009648:	2300      	movs	r3, #0
 800964a:	60bb      	str	r3, [r7, #8]
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	221d      	movs	r2, #29
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fb4f 	bl	8009cf8 <memset>

	tx[RD_BYTE_CMD] = CMD_R_RX_PAYLOAD;
 800965a:	2361      	movs	r3, #97	; 0x61
 800965c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrfport_spiTransaction_B(tx, rx, lng + 1);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	f107 0108 	add.w	r1, r7, #8
 8009668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f9c5 	bl	80099fc <nrfport_spiTransaction_B>
	memcpy(arg, rx + 1, lng);
 8009672:	f107 0308 	add.w	r3, r7, #8
 8009676:	3301      	adds	r3, #1
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb2d 	bl	8009cdc <memcpy>
 8009682:	e000      	b.n	8009686 <NRF_getR_RX_PAYLOAD_B+0x66>
	if(NULL == arg || lng > PAYLOAD_MAX || lng < PAYLOAD_MIN) return;
 8009684:	bf00      	nop
}
 8009686:	3750      	adds	r7, #80	; 0x50
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <NRF_setFLUSH_TX_B>:

/**
  * @brief Flush all payloads in the TX FIFO.
  */
void NRF_setFLUSH_TX_B(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_TX, rx = 0;
 8009692:	23e1      	movs	r3, #225	; 0xe1
 8009694:	71fb      	strb	r3, [r7, #7]
 8009696:	2300      	movs	r3, #0
 8009698:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 800969a:	1db9      	adds	r1, r7, #6
 800969c:	1dfb      	adds	r3, r7, #7
 800969e:	2201      	movs	r2, #1
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f9ab 	bl	80099fc <nrfport_spiTransaction_B>
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <NRF_setFLUSH_RX_B>:

/**
  * @brief Flush all payloads in the RX FIFO.
  */
void NRF_setFLUSH_RX_B(void)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
	uint8_t tx = CMD_FLUSH_RX, rx = 0;
 80096b4:	23e2      	movs	r3, #226	; 0xe2
 80096b6:	71fb      	strb	r3, [r7, #7]
 80096b8:	2300      	movs	r3, #0
 80096ba:	71bb      	strb	r3, [r7, #6]
	nrfport_spiTransaction_B(&tx, &rx, sizeof(tx));
 80096bc:	1db9      	adds	r1, r7, #6
 80096be:	1dfb      	adds	r3, r7, #7
 80096c0:	2201      	movs	r2, #1
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f99a 	bl	80099fc <nrfport_spiTransaction_B>
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <NRF_getR_RX_PL_WID_B>:
  * @brief Get width of the received payload.
  *
  * @return 8-bit value of the width (0-32 bytes).
  */
uint8_t NRF_getR_RX_PL_WID_B(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
	return nrfport_readByte_B(CMD_R_RX_PL_WID);
 80096d4:	2060      	movs	r0, #96	; 0x60
 80096d6:	f000 f9da 	bl	8009a8e <nrfport_readByte_B>
 80096da:	4603      	mov	r3, r0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	bd80      	pop	{r7, pc}

080096e0 <NRF_set_W_ACK_PAYLOAD_B>:
  *
  * @note arg size must be as big as length specifies.
  * Maximal possible payload length is 32 byte.
  */
void NRF_set_W_ACK_PAYLOAD_B(uint8_t pipe, uint8_t* arg, uint32_t lng)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b096      	sub	sp, #88	; 0x58
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	73fb      	strb	r3, [r7, #15]
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d82c      	bhi.n	800974e <NRF_set_W_ACK_PAYLOAD_B+0x6e>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d029      	beq.n	800974e <NRF_set_W_ACK_PAYLOAD_B+0x6e>

	uint8_t tx[PAYLOAD_MAX + 1] = {0};
 80096fa:	2300      	movs	r3, #0
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34
 80096fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009702:	221d      	movs	r2, #29
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f000 faf6 	bl	8009cf8 <memset>
	uint8_t rx[PAYLOAD_MAX + 1] = {0};
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	221d      	movs	r2, #29
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f000 faed 	bl	8009cf8 <memset>

	tx[RD_BYTE_CMD] = CMD_W_TX_PAYLOAD|pipe;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	memcpy(tx+1, arg, lng);
 800972a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800972e:	3301      	adds	r3, #1
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fad1 	bl	8009cdc <memcpy>
	nrfport_spiTransaction_B(tx, rx, lng+1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	f107 0110 	add.w	r1, r7, #16
 8009742:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f958 	bl	80099fc <nrfport_spiTransaction_B>
 800974c:	e000      	b.n	8009750 <NRF_set_W_ACK_PAYLOAD_B+0x70>
	if(lng > PAYLOAD_MAX || lng < PAYLOAD_MIN || arg == NULL) return;
 800974e:	bf00      	nop
}
 8009750:	3758      	adds	r7, #88	; 0x58
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <NRF_getIRQ_B>:
/**
  * @brief Get interrupt flag. Shall be used by application to read whether IRQ fired.
  *
  */
uint8_t NRF_getIRQ_B(void)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	af00      	add	r7, sp, #0
	return nrfport_getIRQ_B();
 800975a:	f000 f9e1 	bl	8009b20 <nrfport_getIRQ_B>
 800975e:	4603      	mov	r3, r0
}
 8009760:	4618      	mov	r0, r3
 8009762:	bd80      	pop	{r7, pc}

08009764 <NRF_CEactivate_B>:
  * @note This causes transmit (PTX) or receive (PRX).
  * During the CE high the NRF24L01+ has way higher
  * current consumption as the RF module is active.
  */
void NRF_CEactivate_B(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
	nrfport_ceHigh_B();
 8009768:	f000 f9aa 	bl	8009ac0 <nrfport_ceHigh_B>
}
 800976c:	bf00      	nop
 800976e:	bd80      	pop	{r7, pc}

08009770 <NRF_CEdeactivate_B>:
  * @note This returns from transmit (PTX) or receive mode (PRX).
  * During the CE low the NRF24L01+ consumption is way smaller
  * than for CE high case as the RF module is deactivate.
  */
void NRF_CEdeactivate_B(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
	nrfport_ceLow_B();
 8009774:	f000 f9b0 	bl	8009ad8 <nrfport_ceLow_B>
}
 8009778:	bf00      	nop
 800977a:	bd80      	pop	{r7, pc}

0800977c <NRF_powerUp_B>:

/**
 * @brief Power up the device (power supply line).
 */
void NRF_powerUp_B(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
	nrfport_powerUp_B();
 8009780:	f000 f9b6 	bl	8009af0 <nrfport_powerUp_B>
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}

08009788 <NRF_powerDown_B>:

/**
 * @brief Power down the device (power supply line).
 */
void NRF_powerDown_B(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
	nrfport_powerDown_B();
 800978c:	f000 f9bc 	bl	8009b08 <nrfport_powerDown_B>
}
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}

08009794 <NRF_postProcess_B>:
 * @return 0 when receive or transmit did not succeed, 1 - 32 when receive
 * succeeded (amount of bytes) and 255 when only transmit (no ACK_PAYLOAD received)
 * succeeded.
 */
uint8_t NRF_postProcess_B(uint8_t pipe, uint8_t* rxBuff)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	6039      	str	r1, [r7, #0]
 800979e:	71fb      	strb	r3, [r7, #7]
    uint8_t rxBytes = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
	uint8_t wStatus = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]
	uint8_t rPipe = 0xFF;
 80097a8:	23ff      	movs	r3, #255	; 0xff
 80097aa:	737b      	strb	r3, [r7, #13]
	uint8_t rStatus = NRF_getSTATUS_B();
 80097ac:	f7ff fe48 	bl	8009440 <NRF_getSTATUS_B>
 80097b0:	4603      	mov	r3, r0
 80097b2:	733b      	strb	r3, [r7, #12]

	if(rStatus & (1 << MAX_RT))
 80097b4:	7b3b      	ldrb	r3, [r7, #12]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <NRF_postProcess_B+0x32>
	{
	  wStatus |= (1 << MAX_RT);
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	f043 0310 	orr.w	r3, r3, #16
 80097c4:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_FULL))
 80097c6:	7b3b      	ldrb	r3, [r7, #12]
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <NRF_postProcess_B+0x44>
	{
	  wStatus |= (1 << TX_FULL);
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	f043 0301 	orr.w	r3, r3, #1
 80097d6:	73bb      	strb	r3, [r7, #14]
	}
	if(rStatus & (1 << TX_DS))
 80097d8:	7b3b      	ldrb	r3, [r7, #12]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <NRF_postProcess_B+0x5a>
	{
	  wStatus |= (1 << TX_DS);
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	f043 0320 	orr.w	r3, r3, #32
 80097e8:	73bb      	strb	r3, [r7, #14]
	  rxBytes = (uint8_t)(-1);
 80097ea:	23ff      	movs	r3, #255	; 0xff
 80097ec:	73fb      	strb	r3, [r7, #15]
	}
	if(rStatus & (1 << RX_DR))
 80097ee:	7b3b      	ldrb	r3, [r7, #12]
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d016      	beq.n	8009826 <NRF_postProcess_B+0x92>
	{

		rPipe = ((rStatus & RX_P_NO_2) |
			  (rStatus & RX_P_NO_1) |
			  (rStatus & RX_P_NO_0)) << 1;
 80097f8:	7b3b      	ldrb	r3, [r7, #12]
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	b2db      	uxtb	r3, r3
		rPipe = ((rStatus & RX_P_NO_2) |
 80097fe:	f003 0306 	and.w	r3, r3, #6
 8009802:	737b      	strb	r3, [r7, #13]
	  if(pipe == rPipe)
 8009804:	79fa      	ldrb	r2, [r7, #7]
 8009806:	7b7b      	ldrb	r3, [r7, #13]
 8009808:	429a      	cmp	r2, r3
 800980a:	d10c      	bne.n	8009826 <NRF_postProcess_B+0x92>
	  {
		  rxBytes = NRF_getR_RX_PL_WID_B();
 800980c:	f7ff ff60 	bl	80096d0 <NRF_getR_RX_PL_WID_B>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
		  NRF_getR_RX_PAYLOAD_B(rxBuff, rxBytes);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4619      	mov	r1, r3
 8009818:	6838      	ldr	r0, [r7, #0]
 800981a:	f7ff ff01 	bl	8009620 <NRF_getR_RX_PAYLOAD_B>
		  wStatus |= (1 << RX_DR);
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009824:	73bb      	strb	r3, [r7, #14]
	  }
	}
	if(wStatus)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <NRF_postProcess_B+0xae>
	{
		NRF_setSTATUS_B(wStatus);
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fe70 	bl	8009514 <NRF_setSTATUS_B>
		if(rStatus & (1 << MAX_RT))
 8009834:	7b3b      	ldrb	r3, [r7, #12]
 8009836:	f003 0310 	and.w	r3, r3, #16
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <NRF_postProcess_B+0xae>
		{
			NRF_setFLUSH_TX_B();
 800983e:	f7ff ff25 	bl	800968c <NRF_setFLUSH_TX_B>
		}
	}
	return rxBytes;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <NRF_powerCycle_B>:
 * @param msDelay pointer to a HOST function implementing delay in milliseconds.
 *
 * @return 0x0E when functional, otherwise any different number.
 */
uint32_t NRF_powerCycle_B(void (*msDelay)(uint32_t))
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]

	  uint32_t attempts = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
	  uint8_t status;

	  NRF_powerDown_B();
 8009858:	f7ff ff96 	bl	8009788 <NRF_powerDown_B>
	  msDelay(100);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2064      	movs	r0, #100	; 0x64
 8009860:	4798      	blx	r3
	  NRF_powerUp_B();
 8009862:	f7ff ff8b 	bl	800977c <NRF_powerUp_B>
	  msDelay(100);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2064      	movs	r0, #100	; 0x64
 800986a:	4798      	blx	r3

	  do
	  {
		  status = NRF_getSTATUS_B();
 800986c:	f7ff fde8 	bl	8009440 <NRF_getSTATUS_B>
 8009870:	4603      	mov	r3, r0
 8009872:	72fb      	strb	r3, [r7, #11]
		  attempts++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
		  msDelay(100);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2064      	movs	r0, #100	; 0x64
 800987e:	4798      	blx	r3

	  } while ((status != 0x0E) | (attempts <= MAX_DEVICE_POWER_CYCLE_ATTEMPTS));
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	2b0e      	cmp	r3, #14
 8009884:	bf14      	ite	ne
 8009886:	2301      	movne	r3, #1
 8009888:	2300      	moveq	r3, #0
 800988a:	b2da      	uxtb	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b03      	cmp	r3, #3
 8009890:	bf94      	ite	ls
 8009892:	2301      	movls	r3, #1
 8009894:	2300      	movhi	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <NRF_powerCycle_B+0x20>


	  return (uint32_t)status;
 80098a0:	7afb      	ldrb	r3, [r7, #11]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <nrfport_spiTransaction>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d017      	beq.n	80098ee <nrfport_spiTransaction+0x42>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d014      	beq.n	80098ee <nrfport_spiTransaction+0x42>

	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_RESET);
 80098c4:	2200      	movs	r2, #0
 80098c6:	2104      	movs	r1, #4
 80098c8:	480b      	ldr	r0, [pc, #44]	; (80098f8 <nrfport_spiTransaction+0x4c>)
 80098ca:	f7fa f9a9 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	9200      	str	r2, [sp, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	4807      	ldr	r0, [pc, #28]	; (80098fc <nrfport_spiTransaction+0x50>)
 80098de:	f7fc fa54 	bl	8005d8a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS1_GPIO_Port, SPI3_NCS1_Pin, GPIO_PIN_SET);
 80098e2:	2201      	movs	r2, #1
 80098e4:	2104      	movs	r1, #4
 80098e6:	4804      	ldr	r0, [pc, #16]	; (80098f8 <nrfport_spiTransaction+0x4c>)
 80098e8:	f7fa f99a 	bl	8003c20 <HAL_GPIO_WritePin>
 80098ec:	e000      	b.n	80098f0 <nrfport_spiTransaction+0x44>
	if(NULL == tx || NULL == rx) return;
 80098ee:	bf00      	nop
}
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40020400 	.word	0x40020400
 80098fc:	200014d8 	.word	0x200014d8

08009900 <nrfport_writeByte>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte(uint8_t adr, uint8_t data)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	460a      	mov	r2, r1
 800990a:	71fb      	strb	r3, [r7, #7]
 800990c:	4613      	mov	r3, r2
 800990e:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 8009910:	2300      	movs	r3, #0
 8009912:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 8009914:	2300      	movs	r3, #0
 8009916:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	f043 0320 	orr.w	r3, r3, #32
 800991e:	b2db      	uxtb	r3, r3
 8009920:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 8009922:	79bb      	ldrb	r3, [r7, #6]
 8009924:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction(tx, rx, WR_BYTE_LNG);
 8009926:	f107 010c 	add.w	r1, r7, #12
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	2202      	movs	r2, #2
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff ffbb 	bl	80098ac <nrfport_spiTransaction>
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <nrfport_readByte>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte(uint8_t adr)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	4603      	mov	r3, r0
 8009946:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8009948:	2300      	movs	r3, #0
 800994a:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 800994c:	2300      	movs	r3, #0
 800994e:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction(tx, rx, RD_BYTE_LNG);
 8009954:	f107 010c 	add.w	r1, r7, #12
 8009958:	f107 0308 	add.w	r3, r7, #8
 800995c:	2202      	movs	r2, #2
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff ffa4 	bl	80098ac <nrfport_spiTransaction>

	return rx[RD_BYTE_PLD];
 8009964:	7b7b      	ldrb	r3, [r7, #13]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <nrfport_ceHigh>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_SET);
 8009974:	2201      	movs	r2, #1
 8009976:	2110      	movs	r1, #16
 8009978:	4802      	ldr	r0, [pc, #8]	; (8009984 <nrfport_ceHigh+0x14>)
 800997a:	f7fa f951 	bl	8003c20 <HAL_GPIO_WritePin>
}
 800997e:	bf00      	nop
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40021400 	.word	0x40021400

08009988 <nrfport_ceLow>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF1_CE_GPIO_Port, NRF1_CE_Pin, GPIO_PIN_RESET);
 800998c:	2200      	movs	r2, #0
 800998e:	2110      	movs	r1, #16
 8009990:	4802      	ldr	r0, [pc, #8]	; (800999c <nrfport_ceLow+0x14>)
 8009992:	f7fa f945 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8009996:	bf00      	nop
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	40021400 	.word	0x40021400

080099a0 <nrfport_powerUp>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_RESET);
 80099a4:	2200      	movs	r2, #0
 80099a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099aa:	4802      	ldr	r0, [pc, #8]	; (80099b4 <nrfport_powerUp+0x14>)
 80099ac:	f7fa f938 	bl	8003c20 <HAL_GPIO_WritePin>
}
 80099b0:	bf00      	nop
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40020400 	.word	0x40020400

080099b8 <nrfport_powerDown>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF1_PWR_GPIO_Port, NRF1_PWR_Pin, GPIO_PIN_SET);
 80099bc:	2201      	movs	r2, #1
 80099be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099c2:	4802      	ldr	r0, [pc, #8]	; (80099cc <nrfport_powerDown+0x14>)
 80099c4:	f7fa f92c 	bl	8003c20 <HAL_GPIO_WritePin>
}
 80099c8:	bf00      	nop
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	40020400 	.word	0x40020400

080099d0 <nrfport_getIRQ>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF1_IRQ_GPIO_Port, NRF1_IRQ_Pin)) ? 1 : 0;
 80099d6:	2140      	movs	r1, #64	; 0x40
 80099d8:	4807      	ldr	r0, [pc, #28]	; (80099f8 <nrfport_getIRQ+0x28>)
 80099da:	f7fa f909 	bl	8003bf0 <HAL_GPIO_ReadPin>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bf0c      	ite	eq
 80099e4:	2301      	moveq	r3, #1
 80099e6:	2300      	movne	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 80099ec:	79fb      	ldrb	r3, [r7, #7]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40020400 	.word	0x40020400

080099fc <nrfport_spiTransaction_B>:
  * @note NRF24L01+ is sampling input data on rising edge with LOW clock in idle:
  * This SPI may be described as: SPI_POLARITY_LOW and SPI_PHASE_1EDGE.
  * During the transaction must be Chip select low from 1st to last byte of lng.
  */
void nrfport_spiTransaction_B(uint8_t* tx, uint8_t *rx, uint32_t lng)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
	if(NULL == tx || NULL == rx) return;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d017      	beq.n	8009a3e <nrfport_spiTransaction_B+0x42>
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d014      	beq.n	8009a3e <nrfport_spiTransaction_B+0x42>

	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_RESET);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2102      	movs	r1, #2
 8009a18:	480b      	ldr	r0, [pc, #44]	; (8009a48 <nrfport_spiTransaction_B+0x4c>)
 8009a1a:	f7fa f901 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, tx, rx, lng, HAL_MAX_DELAY);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	9200      	str	r2, [sp, #0]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	4807      	ldr	r0, [pc, #28]	; (8009a4c <nrfport_spiTransaction_B+0x50>)
 8009a2e:	f7fc f9ac 	bl	8005d8a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI3_NCS2_GPIO_Port, SPI3_NCS2_Pin, GPIO_PIN_SET);
 8009a32:	2201      	movs	r2, #1
 8009a34:	2102      	movs	r1, #2
 8009a36:	4804      	ldr	r0, [pc, #16]	; (8009a48 <nrfport_spiTransaction_B+0x4c>)
 8009a38:	f7fa f8f2 	bl	8003c20 <HAL_GPIO_WritePin>
 8009a3c:	e000      	b.n	8009a40 <nrfport_spiTransaction_B+0x44>
	if(NULL == tx || NULL == rx) return;
 8009a3e:	bf00      	nop
}
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40020400 	.word	0x40020400
 8009a4c:	200014d8 	.word	0x200014d8

08009a50 <nrfport_writeByte_B>:
  * @param adr address of NRF24L01+ register
  * @param data content which will be in the register written
  *
  */
void nrfport_writeByte_B(uint8_t adr, uint8_t data)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	460a      	mov	r2, r1
 8009a5a:	71fb      	strb	r3, [r7, #7]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	71bb      	strb	r3, [r7, #6]
	uint8_t rx[WR_BYTE_LNG] = {0};
 8009a60:	2300      	movs	r3, #0
 8009a62:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[WR_BYTE_LNG] = {0};
 8009a64:	2300      	movs	r3, #0
 8009a66:	813b      	strh	r3, [r7, #8]

	tx[WR_BYTE_CMD] = CMD_W_REGISTER | adr;
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	f043 0320 	orr.w	r3, r3, #32
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	723b      	strb	r3, [r7, #8]
	tx[WR_BYTE_PLD] = data;
 8009a72:	79bb      	ldrb	r3, [r7, #6]
 8009a74:	727b      	strb	r3, [r7, #9]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 8009a76:	f107 010c 	add.w	r1, r7, #12
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	2202      	movs	r2, #2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff ffbb 	bl	80099fc <nrfport_spiTransaction_B>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <nrfport_readByte_B>:
  * @param adr address of NRF24L01+ register
  *
  * @return data content of the register
  */
uint8_t nrfport_readByte_B(uint8_t adr)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	4603      	mov	r3, r0
 8009a96:	71fb      	strb	r3, [r7, #7]
	uint8_t rx[RD_BYTE_LNG] = {0};
 8009a98:	2300      	movs	r3, #0
 8009a9a:	81bb      	strh	r3, [r7, #12]
	uint8_t tx[RD_BYTE_LNG] = {0};
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	813b      	strh	r3, [r7, #8]

	tx[RD_BYTE_CMD] = CMD_R_REGISTER | adr;
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	723b      	strb	r3, [r7, #8]

	nrfport_spiTransaction_B(tx, rx, WR_BYTE_LNG);
 8009aa4:	f107 010c 	add.w	r1, r7, #12
 8009aa8:	f107 0308 	add.w	r3, r7, #8
 8009aac:	2202      	movs	r2, #2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff ffa4 	bl	80099fc <nrfport_spiTransaction_B>

	return rx[RD_BYTE_PLD];
 8009ab4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <nrfport_ceHigh_B>:

/**
  * @brief Set RF Active pin high.
  */
void nrfport_ceHigh_B(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_SET);
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	2140      	movs	r1, #64	; 0x40
 8009ac8:	4802      	ldr	r0, [pc, #8]	; (8009ad4 <nrfport_ceHigh_B+0x14>)
 8009aca:	f7fa f8a9 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8009ace:	bf00      	nop
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40020800 	.word	0x40020800

08009ad8 <nrfport_ceLow_B>:

/**
  * @brief Set RF Active pin low.
  */
void nrfport_ceLow_B(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF2_CE_GPIO_Port, NRF2_CE_Pin, GPIO_PIN_RESET);
 8009adc:	2200      	movs	r2, #0
 8009ade:	2140      	movs	r1, #64	; 0x40
 8009ae0:	4802      	ldr	r0, [pc, #8]	; (8009aec <nrfport_ceLow_B+0x14>)
 8009ae2:	f7fa f89d 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8009ae6:	bf00      	nop
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40020800 	.word	0x40020800

08009af0 <nrfport_powerUp_B>:

/**
 * @brief Power up device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerUp_B(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_RESET);
 8009af4:	2200      	movs	r2, #0
 8009af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009afa:	4802      	ldr	r0, [pc, #8]	; (8009b04 <nrfport_powerUp_B+0x14>)
 8009afc:	f7fa f890 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8009b00:	bf00      	nop
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40020400 	.word	0x40020400

08009b08 <nrfport_powerDown_B>:

/**
 * @brief Power down device's supply line (depends on implementation N-FET, P-FET NPN, PNP)
 */
void nrfport_powerDown_B(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
	/* P-FET implementation */
	HAL_GPIO_WritePin(NRF2_PWR_GPIO_Port, NRF2_PWR_Pin, GPIO_PIN_SET);
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b12:	4802      	ldr	r0, [pc, #8]	; (8009b1c <nrfport_powerDown_B+0x14>)
 8009b14:	f7fa f884 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8009b18:	bf00      	nop
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40020400 	.word	0x40020400

08009b20 <nrfport_getIRQ_B>:

/*
 * @brief Read the IRQ pin (IRQ fired when the pin is LOW).
 */
uint8_t nrfport_getIRQ_B(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
	uint8_t irqFired = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(NRF2_IRQ_GPIO_Port, NRF2_IRQ_Pin)) ? 1 : 0;
 8009b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b2a:	4807      	ldr	r0, [pc, #28]	; (8009b48 <nrfport_getIRQ_B+0x28>)
 8009b2c:	f7fa f860 	bl	8003bf0 <HAL_GPIO_ReadPin>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bf0c      	ite	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	2300      	movne	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	71fb      	strb	r3, [r7, #7]
	return irqFired;
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40020400 	.word	0x40020400

08009b4c <twi_writeToSlave>:
{
	HAL_I2C_Master_Receive(&hi2c4, DevAddress, pData, Size, HAL_MAX_DELAY);
}

static void twi_writeToSlave(uint8_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c4, DevAddress, pData, Size, HAL_MAX_DELAY);
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	b299      	uxth	r1, r3
 8009b60:	88bb      	ldrh	r3, [r7, #4]
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	9200      	str	r2, [sp, #0]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	4803      	ldr	r0, [pc, #12]	; (8009b78 <twi_writeToSlave+0x2c>)
 8009b6c:	f7fa f902 	bl	8003d74 <HAL_I2C_Master_Transmit>

}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	20001640 	.word	0x20001640

08009b7c <RDA5807mInit>:
{
	RDA5807mPowerOff();
}

void RDA5807mInit(uint16_t freq, uint8_t volm)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	460a      	mov	r2, r1
 8009b86:	80fb      	strh	r3, [r7, #6]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	717b      	strb	r3, [r7, #5]

	/* Power up and wait */
	//RDA5807mReset();
	RDA5807mPowerOn();
 8009b8c:	f000 f85e 	bl	8009c4c <RDA5807mPowerOn>

    freq -= RDA5807mWW_FREQ_MIN;
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	f5a3 53ed 	sub.w	r3, r3, #7584	; 0x1da0
 8009b96:	3b10      	subs	r3, #16
 8009b98:	80fb      	strh	r3, [r7, #6]
    freq /= 10;
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <RDA5807mInit+0xcc>)
 8009b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba2:	08db      	lsrs	r3, r3, #3
 8009ba4:	80fb      	strh	r3, [r7, #6]
    freq <<= CHAN_0;
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	019b      	lsls	r3, r3, #6
 8009baa:	80fb      	strh	r3, [r7, #6]

    /* For complete initialization, 6 (out of 7) registers must be written */
    uint16_t RDA5807Registers[6] = {0};
 8009bac:	f107 0308 	add.w	r3, r7, #8
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	605a      	str	r2, [r3, #4]
 8009bb6:	609a      	str	r2, [r3, #8]
	/* Register REG_ADR_02 */
#if RDS_USED
    RDA5807Registers[0] = (1 << DHIZ) | (1 << DMUTE) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << RDS_EN) | (1 << ENABLE);
 8009bb8:	f24d 4309 	movw	r3, #54281	; 0xd409
 8009bbc:	813b      	strh	r3, [r7, #8]
#else
    RDA5807Registers[0] = (1 << DHIZ) | (1 << BASS) | (1 << RCLK_DIR_MODE) | (1 << ENABLE);
#endif
	/* Register REG_ADR_03 */
	RDA5807Registers[1] = freq | (1 << TUNE) | (1 << BAND_1) ;
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	f043 0318 	orr.w	r3, r3, #24
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	817b      	strh	r3, [r7, #10]
	/* Register REG_ADR_04 */
#if RDS_USED
	RDA5807Registers[2] = (1 << RDS_FIFO_EN) | (1 << RDS_FIFO_CLR);
 8009bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009bcc:	81bb      	strh	r3, [r7, #12]
#else
    RDA5807Registers[2]= 0u;
#endif
	/* Register REG_ADR_05 */
	RDA5807Registers[3] = (1 << LNA_PORT_SEL_1) | (1 << LNA_ICSEL_1) | volm;
 8009bce:	797b      	ldrb	r3, [r7, #5]
 8009bd0:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	81fb      	strh	r3, [r7, #14]
    /* Register REG_ADR_06 */
    RDA5807Registers[4] = 0u;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	823b      	strh	r3, [r7, #16]
    /* Register REG_ADR_07 */
	RDA5807Registers[5] = (1 << TH_SOFRBLEND_4) | (1 << SEEK_TH_OLD_2) | (1 << SOFTBLEND_EN);
 8009bde:	f244 0312 	movw	r3, #16402	; 0x4012
 8009be2:	827b      	strh	r3, [r7, #18]

    for(uint8_t idx = 0; idx < 6; idx++) {
 8009be4:	2300      	movs	r3, #0
 8009be6:	75fb      	strb	r3, [r7, #23]
 8009be8:	e01f      	b.n	8009c2a <RDA5807mInit+0xae>

        RDA5807Registers[idx] = swapbytes(RDA5807Registers[idx]);
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	f107 0218 	add.w	r2, r7, #24
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	b21a      	sxth	r2, r3
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	f107 0118 	add.w	r1, r7, #24
 8009c04:	440b      	add	r3, r1
 8009c06:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	4313      	orrs	r3, r2
 8009c12:	b21a      	sxth	r2, r3
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	b292      	uxth	r2, r2
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	f107 0118 	add.w	r1, r7, #24
 8009c1e:	440b      	add	r3, r1
 8009c20:	f823 2c10 	strh.w	r2, [r3, #-16]
    for(uint8_t idx = 0; idx < 6; idx++) {
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	3301      	adds	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b05      	cmp	r3, #5
 8009c2e:	d9dc      	bls.n	8009bea <RDA5807mInit+0x6e>
    }

    twi_writeToSlave(RDA5807M_I2C_ADR, (uint8_t*)RDA5807Registers, RDA5807M_REG_SIZE*6);
 8009c30:	f107 0308 	add.w	r3, r7, #8
 8009c34:	220c      	movs	r2, #12
 8009c36:	4619      	mov	r1, r3
 8009c38:	2020      	movs	r0, #32
 8009c3a:	f7ff ff87 	bl	8009b4c <twi_writeToSlave>

}
 8009c3e:	bf00      	nop
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	cccccccd 	.word	0xcccccccd

08009c4c <RDA5807mPowerOn>:
	HAL_GPIO_WritePin(RDA_PWR_GPIO_Port, RDA_PWR_Pin, GPIO_PIN_SET);
	PLATFORM_DELAY_MS(500);
}

void RDA5807mPowerOn(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RDA_PWR_GPIO_Port, RDA_PWR_Pin, GPIO_PIN_SET);
 8009c50:	2201      	movs	r2, #1
 8009c52:	2101      	movs	r1, #1
 8009c54:	4804      	ldr	r0, [pc, #16]	; (8009c68 <RDA5807mPowerOn+0x1c>)
 8009c56:	f7f9 ffe3 	bl	8003c20 <HAL_GPIO_WritePin>
	PLATFORM_DELAY_MS(500);
 8009c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c5e:	f7f8 f96d 	bl	8001f3c <HAL_Delay>
}
 8009c62:	bf00      	nop
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	40021000 	.word	0x40021000

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	; (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000014 	.word	0x20000014

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4d0d      	ldr	r5, [pc, #52]	; (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	; (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2600      	movs	r6, #0
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4d0b      	ldr	r5, [pc, #44]	; (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	; (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f001 f9cc 	bl	800b028 <_init>
 8009c90:	1b64      	subs	r4, r4, r5
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2600      	movs	r6, #0
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca0:	4798      	blx	r3
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009caa:	4798      	blx	r3
 8009cac:	3601      	adds	r6, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	0800b834 	.word	0x0800b834
 8009cb4:	0800b834 	.word	0x0800b834
 8009cb8:	0800b834 	.word	0x0800b834
 8009cbc:	0800b838 	.word	0x0800b838

08009cc0 <memcmp>:
 8009cc0:	b530      	push	{r4, r5, lr}
 8009cc2:	3901      	subs	r1, #1
 8009cc4:	2400      	movs	r4, #0
 8009cc6:	42a2      	cmp	r2, r4
 8009cc8:	d101      	bne.n	8009cce <memcmp+0xe>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e005      	b.n	8009cda <memcmp+0x1a>
 8009cce:	5d03      	ldrb	r3, [r0, r4]
 8009cd0:	3401      	adds	r4, #1
 8009cd2:	5d0d      	ldrb	r5, [r1, r4]
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	d0f6      	beq.n	8009cc6 <memcmp+0x6>
 8009cd8:	1b58      	subs	r0, r3, r5
 8009cda:	bd30      	pop	{r4, r5, pc}

08009cdc <memcpy>:
 8009cdc:	440a      	add	r2, r1
 8009cde:	4291      	cmp	r1, r2
 8009ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce4:	d100      	bne.n	8009ce8 <memcpy+0xc>
 8009ce6:	4770      	bx	lr
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	d1f9      	bne.n	8009cea <memcpy+0xe>
 8009cf6:	bd10      	pop	{r4, pc}

08009cf8 <memset>:
 8009cf8:	4402      	add	r2, r0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d100      	bne.n	8009d02 <memset+0xa>
 8009d00:	4770      	bx	lr
 8009d02:	f803 1b01 	strb.w	r1, [r3], #1
 8009d06:	e7f9      	b.n	8009cfc <memset+0x4>

08009d08 <iprintf>:
 8009d08:	b40f      	push	{r0, r1, r2, r3}
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <iprintf+0x2c>)
 8009d0c:	b513      	push	{r0, r1, r4, lr}
 8009d0e:	681c      	ldr	r4, [r3, #0]
 8009d10:	b124      	cbz	r4, 8009d1c <iprintf+0x14>
 8009d12:	69a3      	ldr	r3, [r4, #24]
 8009d14:	b913      	cbnz	r3, 8009d1c <iprintf+0x14>
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fa7e 	bl	800a218 <__sinit>
 8009d1c:	ab05      	add	r3, sp, #20
 8009d1e:	9a04      	ldr	r2, [sp, #16]
 8009d20:	68a1      	ldr	r1, [r4, #8]
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 fdab 	bl	800a880 <_vfiprintf_r>
 8009d2a:	b002      	add	sp, #8
 8009d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d30:	b004      	add	sp, #16
 8009d32:	4770      	bx	lr
 8009d34:	20000014 	.word	0x20000014

08009d38 <_puts_r>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	460e      	mov	r6, r1
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	b118      	cbz	r0, 8009d48 <_puts_r+0x10>
 8009d40:	6983      	ldr	r3, [r0, #24]
 8009d42:	b90b      	cbnz	r3, 8009d48 <_puts_r+0x10>
 8009d44:	f000 fa68 	bl	800a218 <__sinit>
 8009d48:	69ab      	ldr	r3, [r5, #24]
 8009d4a:	68ac      	ldr	r4, [r5, #8]
 8009d4c:	b913      	cbnz	r3, 8009d54 <_puts_r+0x1c>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 fa62 	bl	800a218 <__sinit>
 8009d54:	4b2c      	ldr	r3, [pc, #176]	; (8009e08 <_puts_r+0xd0>)
 8009d56:	429c      	cmp	r4, r3
 8009d58:	d120      	bne.n	8009d9c <_puts_r+0x64>
 8009d5a:	686c      	ldr	r4, [r5, #4]
 8009d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d5e:	07db      	lsls	r3, r3, #31
 8009d60:	d405      	bmi.n	8009d6e <_puts_r+0x36>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	0598      	lsls	r0, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_puts_r+0x36>
 8009d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6a:	f000 faf3 	bl	800a354 <__retarget_lock_acquire_recursive>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	0719      	lsls	r1, r3, #28
 8009d72:	d51d      	bpl.n	8009db0 <_puts_r+0x78>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	b1db      	cbz	r3, 8009db0 <_puts_r+0x78>
 8009d78:	3e01      	subs	r6, #1
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d80:	3b01      	subs	r3, #1
 8009d82:	60a3      	str	r3, [r4, #8]
 8009d84:	bb39      	cbnz	r1, 8009dd6 <_puts_r+0x9e>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da38      	bge.n	8009dfc <_puts_r+0xc4>
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	210a      	movs	r1, #10
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f868 	bl	8009e64 <__swbuf_r>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d011      	beq.n	8009dbc <_puts_r+0x84>
 8009d98:	250a      	movs	r5, #10
 8009d9a:	e011      	b.n	8009dc0 <_puts_r+0x88>
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <_puts_r+0xd4>)
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d101      	bne.n	8009da6 <_puts_r+0x6e>
 8009da2:	68ac      	ldr	r4, [r5, #8]
 8009da4:	e7da      	b.n	8009d5c <_puts_r+0x24>
 8009da6:	4b1a      	ldr	r3, [pc, #104]	; (8009e10 <_puts_r+0xd8>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	bf08      	it	eq
 8009dac:	68ec      	ldreq	r4, [r5, #12]
 8009dae:	e7d5      	b.n	8009d5c <_puts_r+0x24>
 8009db0:	4621      	mov	r1, r4
 8009db2:	4628      	mov	r0, r5
 8009db4:	f000 f8a8 	bl	8009f08 <__swsetup_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d0dd      	beq.n	8009d78 <_puts_r+0x40>
 8009dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8009dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dc2:	07da      	lsls	r2, r3, #31
 8009dc4:	d405      	bmi.n	8009dd2 <_puts_r+0x9a>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	059b      	lsls	r3, r3, #22
 8009dca:	d402      	bmi.n	8009dd2 <_puts_r+0x9a>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dce:	f000 fac2 	bl	800a356 <__retarget_lock_release_recursive>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da04      	bge.n	8009de4 <_puts_r+0xac>
 8009dda:	69a2      	ldr	r2, [r4, #24]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	dc06      	bgt.n	8009dee <_puts_r+0xb6>
 8009de0:	290a      	cmp	r1, #10
 8009de2:	d004      	beq.n	8009dee <_puts_r+0xb6>
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	6022      	str	r2, [r4, #0]
 8009dea:	7019      	strb	r1, [r3, #0]
 8009dec:	e7c5      	b.n	8009d7a <_puts_r+0x42>
 8009dee:	4622      	mov	r2, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f000 f837 	bl	8009e64 <__swbuf_r>
 8009df6:	3001      	adds	r0, #1
 8009df8:	d1bf      	bne.n	8009d7a <_puts_r+0x42>
 8009dfa:	e7df      	b.n	8009dbc <_puts_r+0x84>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	250a      	movs	r5, #10
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	6022      	str	r2, [r4, #0]
 8009e04:	701d      	strb	r5, [r3, #0]
 8009e06:	e7db      	b.n	8009dc0 <_puts_r+0x88>
 8009e08:	0800b7b8 	.word	0x0800b7b8
 8009e0c:	0800b7d8 	.word	0x0800b7d8
 8009e10:	0800b798 	.word	0x0800b798

08009e14 <puts>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <puts+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bf8d 	b.w	8009d38 <_puts_r>
 8009e1e:	bf00      	nop
 8009e20:	20000014 	.word	0x20000014

08009e24 <siprintf>:
 8009e24:	b40e      	push	{r1, r2, r3}
 8009e26:	b500      	push	{lr}
 8009e28:	b09c      	sub	sp, #112	; 0x70
 8009e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e2c:	9002      	str	r0, [sp, #8]
 8009e2e:	9006      	str	r0, [sp, #24]
 8009e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e34:	4809      	ldr	r0, [pc, #36]	; (8009e5c <siprintf+0x38>)
 8009e36:	9107      	str	r1, [sp, #28]
 8009e38:	9104      	str	r1, [sp, #16]
 8009e3a:	4909      	ldr	r1, [pc, #36]	; (8009e60 <siprintf+0x3c>)
 8009e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e40:	9105      	str	r1, [sp, #20]
 8009e42:	6800      	ldr	r0, [r0, #0]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	a902      	add	r1, sp, #8
 8009e48:	f000 fbf0 	bl	800a62c <_svfiprintf_r>
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
 8009e52:	b01c      	add	sp, #112	; 0x70
 8009e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e58:	b003      	add	sp, #12
 8009e5a:	4770      	bx	lr
 8009e5c:	20000014 	.word	0x20000014
 8009e60:	ffff0208 	.word	0xffff0208

08009e64 <__swbuf_r>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	460e      	mov	r6, r1
 8009e68:	4614      	mov	r4, r2
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	b118      	cbz	r0, 8009e76 <__swbuf_r+0x12>
 8009e6e:	6983      	ldr	r3, [r0, #24]
 8009e70:	b90b      	cbnz	r3, 8009e76 <__swbuf_r+0x12>
 8009e72:	f000 f9d1 	bl	800a218 <__sinit>
 8009e76:	4b21      	ldr	r3, [pc, #132]	; (8009efc <__swbuf_r+0x98>)
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	d12b      	bne.n	8009ed4 <__swbuf_r+0x70>
 8009e7c:	686c      	ldr	r4, [r5, #4]
 8009e7e:	69a3      	ldr	r3, [r4, #24]
 8009e80:	60a3      	str	r3, [r4, #8]
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	071a      	lsls	r2, r3, #28
 8009e86:	d52f      	bpl.n	8009ee8 <__swbuf_r+0x84>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	b36b      	cbz	r3, 8009ee8 <__swbuf_r+0x84>
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	6820      	ldr	r0, [r4, #0]
 8009e90:	1ac0      	subs	r0, r0, r3
 8009e92:	6963      	ldr	r3, [r4, #20]
 8009e94:	b2f6      	uxtb	r6, r6
 8009e96:	4283      	cmp	r3, r0
 8009e98:	4637      	mov	r7, r6
 8009e9a:	dc04      	bgt.n	8009ea6 <__swbuf_r+0x42>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f926 	bl	800a0f0 <_fflush_r>
 8009ea4:	bb30      	cbnz	r0, 8009ef4 <__swbuf_r+0x90>
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	60a3      	str	r3, [r4, #8]
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	6022      	str	r2, [r4, #0]
 8009eb2:	701e      	strb	r6, [r3, #0]
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	4283      	cmp	r3, r0
 8009eba:	d004      	beq.n	8009ec6 <__swbuf_r+0x62>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	07db      	lsls	r3, r3, #31
 8009ec0:	d506      	bpl.n	8009ed0 <__swbuf_r+0x6c>
 8009ec2:	2e0a      	cmp	r6, #10
 8009ec4:	d104      	bne.n	8009ed0 <__swbuf_r+0x6c>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f000 f911 	bl	800a0f0 <_fflush_r>
 8009ece:	b988      	cbnz	r0, 8009ef4 <__swbuf_r+0x90>
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed4:	4b0a      	ldr	r3, [pc, #40]	; (8009f00 <__swbuf_r+0x9c>)
 8009ed6:	429c      	cmp	r4, r3
 8009ed8:	d101      	bne.n	8009ede <__swbuf_r+0x7a>
 8009eda:	68ac      	ldr	r4, [r5, #8]
 8009edc:	e7cf      	b.n	8009e7e <__swbuf_r+0x1a>
 8009ede:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <__swbuf_r+0xa0>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	bf08      	it	eq
 8009ee4:	68ec      	ldreq	r4, [r5, #12]
 8009ee6:	e7ca      	b.n	8009e7e <__swbuf_r+0x1a>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 f80c 	bl	8009f08 <__swsetup_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d0cb      	beq.n	8009e8c <__swbuf_r+0x28>
 8009ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ef8:	e7ea      	b.n	8009ed0 <__swbuf_r+0x6c>
 8009efa:	bf00      	nop
 8009efc:	0800b7b8 	.word	0x0800b7b8
 8009f00:	0800b7d8 	.word	0x0800b7d8
 8009f04:	0800b798 	.word	0x0800b798

08009f08 <__swsetup_r>:
 8009f08:	4b32      	ldr	r3, [pc, #200]	; (8009fd4 <__swsetup_r+0xcc>)
 8009f0a:	b570      	push	{r4, r5, r6, lr}
 8009f0c:	681d      	ldr	r5, [r3, #0]
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	b125      	cbz	r5, 8009f1e <__swsetup_r+0x16>
 8009f14:	69ab      	ldr	r3, [r5, #24]
 8009f16:	b913      	cbnz	r3, 8009f1e <__swsetup_r+0x16>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 f97d 	bl	800a218 <__sinit>
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <__swsetup_r+0xd0>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	d10f      	bne.n	8009f44 <__swsetup_r+0x3c>
 8009f24:	686c      	ldr	r4, [r5, #4]
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f2c:	0719      	lsls	r1, r3, #28
 8009f2e:	d42c      	bmi.n	8009f8a <__swsetup_r+0x82>
 8009f30:	06dd      	lsls	r5, r3, #27
 8009f32:	d411      	bmi.n	8009f58 <__swsetup_r+0x50>
 8009f34:	2309      	movs	r3, #9
 8009f36:	6033      	str	r3, [r6, #0]
 8009f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f42:	e03e      	b.n	8009fc2 <__swsetup_r+0xba>
 8009f44:	4b25      	ldr	r3, [pc, #148]	; (8009fdc <__swsetup_r+0xd4>)
 8009f46:	429c      	cmp	r4, r3
 8009f48:	d101      	bne.n	8009f4e <__swsetup_r+0x46>
 8009f4a:	68ac      	ldr	r4, [r5, #8]
 8009f4c:	e7eb      	b.n	8009f26 <__swsetup_r+0x1e>
 8009f4e:	4b24      	ldr	r3, [pc, #144]	; (8009fe0 <__swsetup_r+0xd8>)
 8009f50:	429c      	cmp	r4, r3
 8009f52:	bf08      	it	eq
 8009f54:	68ec      	ldreq	r4, [r5, #12]
 8009f56:	e7e6      	b.n	8009f26 <__swsetup_r+0x1e>
 8009f58:	0758      	lsls	r0, r3, #29
 8009f5a:	d512      	bpl.n	8009f82 <__swsetup_r+0x7a>
 8009f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f5e:	b141      	cbz	r1, 8009f72 <__swsetup_r+0x6a>
 8009f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f64:	4299      	cmp	r1, r3
 8009f66:	d002      	beq.n	8009f6e <__swsetup_r+0x66>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 fa59 	bl	800a420 <_free_r>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6363      	str	r3, [r4, #52]	; 0x34
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	6063      	str	r3, [r4, #4]
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f043 0308 	orr.w	r3, r3, #8
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	b94b      	cbnz	r3, 8009fa2 <__swsetup_r+0x9a>
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f98:	d003      	beq.n	8009fa2 <__swsetup_r+0x9a>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f000 f9ff 	bl	800a3a0 <__smakebuf_r>
 8009fa2:	89a0      	ldrh	r0, [r4, #12]
 8009fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fa8:	f010 0301 	ands.w	r3, r0, #1
 8009fac:	d00a      	beq.n	8009fc4 <__swsetup_r+0xbc>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60a3      	str	r3, [r4, #8]
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	425b      	negs	r3, r3
 8009fb6:	61a3      	str	r3, [r4, #24]
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	b943      	cbnz	r3, 8009fce <__swsetup_r+0xc6>
 8009fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fc0:	d1ba      	bne.n	8009f38 <__swsetup_r+0x30>
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	0781      	lsls	r1, r0, #30
 8009fc6:	bf58      	it	pl
 8009fc8:	6963      	ldrpl	r3, [r4, #20]
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	e7f4      	b.n	8009fb8 <__swsetup_r+0xb0>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7f7      	b.n	8009fc2 <__swsetup_r+0xba>
 8009fd2:	bf00      	nop
 8009fd4:	20000014 	.word	0x20000014
 8009fd8:	0800b7b8 	.word	0x0800b7b8
 8009fdc:	0800b7d8 	.word	0x0800b7d8
 8009fe0:	0800b798 	.word	0x0800b798

08009fe4 <__sflush_r>:
 8009fe4:	898a      	ldrh	r2, [r1, #12]
 8009fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	4605      	mov	r5, r0
 8009fec:	0710      	lsls	r0, r2, #28
 8009fee:	460c      	mov	r4, r1
 8009ff0:	d458      	bmi.n	800a0a4 <__sflush_r+0xc0>
 8009ff2:	684b      	ldr	r3, [r1, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dc05      	bgt.n	800a004 <__sflush_r+0x20>
 8009ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dc02      	bgt.n	800a004 <__sflush_r+0x20>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a006:	2e00      	cmp	r6, #0
 800a008:	d0f9      	beq.n	8009ffe <__sflush_r+0x1a>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a010:	682f      	ldr	r7, [r5, #0]
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	d032      	beq.n	800a07c <__sflush_r+0x98>
 800a016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	075a      	lsls	r2, r3, #29
 800a01c:	d505      	bpl.n	800a02a <__sflush_r+0x46>
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	1ac0      	subs	r0, r0, r3
 800a022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a024:	b10b      	cbz	r3, 800a02a <__sflush_r+0x46>
 800a026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a028:	1ac0      	subs	r0, r0, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	4602      	mov	r2, r0
 800a02e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a030:	6a21      	ldr	r1, [r4, #32]
 800a032:	4628      	mov	r0, r5
 800a034:	47b0      	blx	r6
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	d106      	bne.n	800a04a <__sflush_r+0x66>
 800a03c:	6829      	ldr	r1, [r5, #0]
 800a03e:	291d      	cmp	r1, #29
 800a040:	d82c      	bhi.n	800a09c <__sflush_r+0xb8>
 800a042:	4a2a      	ldr	r2, [pc, #168]	; (800a0ec <__sflush_r+0x108>)
 800a044:	40ca      	lsrs	r2, r1
 800a046:	07d6      	lsls	r6, r2, #31
 800a048:	d528      	bpl.n	800a09c <__sflush_r+0xb8>
 800a04a:	2200      	movs	r2, #0
 800a04c:	6062      	str	r2, [r4, #4]
 800a04e:	04d9      	lsls	r1, r3, #19
 800a050:	6922      	ldr	r2, [r4, #16]
 800a052:	6022      	str	r2, [r4, #0]
 800a054:	d504      	bpl.n	800a060 <__sflush_r+0x7c>
 800a056:	1c42      	adds	r2, r0, #1
 800a058:	d101      	bne.n	800a05e <__sflush_r+0x7a>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b903      	cbnz	r3, 800a060 <__sflush_r+0x7c>
 800a05e:	6560      	str	r0, [r4, #84]	; 0x54
 800a060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a062:	602f      	str	r7, [r5, #0]
 800a064:	2900      	cmp	r1, #0
 800a066:	d0ca      	beq.n	8009ffe <__sflush_r+0x1a>
 800a068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d002      	beq.n	800a076 <__sflush_r+0x92>
 800a070:	4628      	mov	r0, r5
 800a072:	f000 f9d5 	bl	800a420 <_free_r>
 800a076:	2000      	movs	r0, #0
 800a078:	6360      	str	r0, [r4, #52]	; 0x34
 800a07a:	e7c1      	b.n	800a000 <__sflush_r+0x1c>
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	2301      	movs	r3, #1
 800a080:	4628      	mov	r0, r5
 800a082:	47b0      	blx	r6
 800a084:	1c41      	adds	r1, r0, #1
 800a086:	d1c7      	bne.n	800a018 <__sflush_r+0x34>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0c4      	beq.n	800a018 <__sflush_r+0x34>
 800a08e:	2b1d      	cmp	r3, #29
 800a090:	d001      	beq.n	800a096 <__sflush_r+0xb2>
 800a092:	2b16      	cmp	r3, #22
 800a094:	d101      	bne.n	800a09a <__sflush_r+0xb6>
 800a096:	602f      	str	r7, [r5, #0]
 800a098:	e7b1      	b.n	8009ffe <__sflush_r+0x1a>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	e7ad      	b.n	800a000 <__sflush_r+0x1c>
 800a0a4:	690f      	ldr	r7, [r1, #16]
 800a0a6:	2f00      	cmp	r7, #0
 800a0a8:	d0a9      	beq.n	8009ffe <__sflush_r+0x1a>
 800a0aa:	0793      	lsls	r3, r2, #30
 800a0ac:	680e      	ldr	r6, [r1, #0]
 800a0ae:	bf08      	it	eq
 800a0b0:	694b      	ldreq	r3, [r1, #20]
 800a0b2:	600f      	str	r7, [r1, #0]
 800a0b4:	bf18      	it	ne
 800a0b6:	2300      	movne	r3, #0
 800a0b8:	eba6 0807 	sub.w	r8, r6, r7
 800a0bc:	608b      	str	r3, [r1, #8]
 800a0be:	f1b8 0f00 	cmp.w	r8, #0
 800a0c2:	dd9c      	ble.n	8009ffe <__sflush_r+0x1a>
 800a0c4:	6a21      	ldr	r1, [r4, #32]
 800a0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0c8:	4643      	mov	r3, r8
 800a0ca:	463a      	mov	r2, r7
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b0      	blx	r6
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	dc06      	bgt.n	800a0e2 <__sflush_r+0xfe>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e0:	e78e      	b.n	800a000 <__sflush_r+0x1c>
 800a0e2:	4407      	add	r7, r0
 800a0e4:	eba8 0800 	sub.w	r8, r8, r0
 800a0e8:	e7e9      	b.n	800a0be <__sflush_r+0xda>
 800a0ea:	bf00      	nop
 800a0ec:	20400001 	.word	0x20400001

0800a0f0 <_fflush_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	690b      	ldr	r3, [r1, #16]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	b913      	cbnz	r3, 800a100 <_fflush_r+0x10>
 800a0fa:	2500      	movs	r5, #0
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	b118      	cbz	r0, 800a10a <_fflush_r+0x1a>
 800a102:	6983      	ldr	r3, [r0, #24]
 800a104:	b90b      	cbnz	r3, 800a10a <_fflush_r+0x1a>
 800a106:	f000 f887 	bl	800a218 <__sinit>
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <_fflush_r+0x6c>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	d11b      	bne.n	800a148 <_fflush_r+0x58>
 800a110:	686c      	ldr	r4, [r5, #4]
 800a112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0ef      	beq.n	800a0fa <_fflush_r+0xa>
 800a11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a11c:	07d0      	lsls	r0, r2, #31
 800a11e:	d404      	bmi.n	800a12a <_fflush_r+0x3a>
 800a120:	0599      	lsls	r1, r3, #22
 800a122:	d402      	bmi.n	800a12a <_fflush_r+0x3a>
 800a124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a126:	f000 f915 	bl	800a354 <__retarget_lock_acquire_recursive>
 800a12a:	4628      	mov	r0, r5
 800a12c:	4621      	mov	r1, r4
 800a12e:	f7ff ff59 	bl	8009fe4 <__sflush_r>
 800a132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a134:	07da      	lsls	r2, r3, #31
 800a136:	4605      	mov	r5, r0
 800a138:	d4e0      	bmi.n	800a0fc <_fflush_r+0xc>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	059b      	lsls	r3, r3, #22
 800a13e:	d4dd      	bmi.n	800a0fc <_fflush_r+0xc>
 800a140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a142:	f000 f908 	bl	800a356 <__retarget_lock_release_recursive>
 800a146:	e7d9      	b.n	800a0fc <_fflush_r+0xc>
 800a148:	4b05      	ldr	r3, [pc, #20]	; (800a160 <_fflush_r+0x70>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	d101      	bne.n	800a152 <_fflush_r+0x62>
 800a14e:	68ac      	ldr	r4, [r5, #8]
 800a150:	e7df      	b.n	800a112 <_fflush_r+0x22>
 800a152:	4b04      	ldr	r3, [pc, #16]	; (800a164 <_fflush_r+0x74>)
 800a154:	429c      	cmp	r4, r3
 800a156:	bf08      	it	eq
 800a158:	68ec      	ldreq	r4, [r5, #12]
 800a15a:	e7da      	b.n	800a112 <_fflush_r+0x22>
 800a15c:	0800b7b8 	.word	0x0800b7b8
 800a160:	0800b7d8 	.word	0x0800b7d8
 800a164:	0800b798 	.word	0x0800b798

0800a168 <std>:
 800a168:	2300      	movs	r3, #0
 800a16a:	b510      	push	{r4, lr}
 800a16c:	4604      	mov	r4, r0
 800a16e:	e9c0 3300 	strd	r3, r3, [r0]
 800a172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a176:	6083      	str	r3, [r0, #8]
 800a178:	8181      	strh	r1, [r0, #12]
 800a17a:	6643      	str	r3, [r0, #100]	; 0x64
 800a17c:	81c2      	strh	r2, [r0, #14]
 800a17e:	6183      	str	r3, [r0, #24]
 800a180:	4619      	mov	r1, r3
 800a182:	2208      	movs	r2, #8
 800a184:	305c      	adds	r0, #92	; 0x5c
 800a186:	f7ff fdb7 	bl	8009cf8 <memset>
 800a18a:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <std+0x38>)
 800a18c:	6263      	str	r3, [r4, #36]	; 0x24
 800a18e:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <std+0x3c>)
 800a190:	62a3      	str	r3, [r4, #40]	; 0x28
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <std+0x40>)
 800a194:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a196:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <std+0x44>)
 800a198:	6224      	str	r4, [r4, #32]
 800a19a:	6323      	str	r3, [r4, #48]	; 0x30
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800ae29 	.word	0x0800ae29
 800a1a4:	0800ae4b 	.word	0x0800ae4b
 800a1a8:	0800ae83 	.word	0x0800ae83
 800a1ac:	0800aea7 	.word	0x0800aea7

0800a1b0 <_cleanup_r>:
 800a1b0:	4901      	ldr	r1, [pc, #4]	; (800a1b8 <_cleanup_r+0x8>)
 800a1b2:	f000 b8af 	b.w	800a314 <_fwalk_reent>
 800a1b6:	bf00      	nop
 800a1b8:	0800a0f1 	.word	0x0800a0f1

0800a1bc <__sfmoreglue>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	1e4a      	subs	r2, r1, #1
 800a1c0:	2568      	movs	r5, #104	; 0x68
 800a1c2:	4355      	muls	r5, r2
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1ca:	f000 f979 	bl	800a4c0 <_malloc_r>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	b140      	cbz	r0, 800a1e4 <__sfmoreglue+0x28>
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1d8:	300c      	adds	r0, #12
 800a1da:	60a0      	str	r0, [r4, #8]
 800a1dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1e0:	f7ff fd8a 	bl	8009cf8 <memset>
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <__sfp_lock_acquire>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__sfp_lock_acquire+0x8>)
 800a1ea:	f000 b8b3 	b.w	800a354 <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20001930 	.word	0x20001930

0800a1f4 <__sfp_lock_release>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__sfp_lock_release+0x8>)
 800a1f6:	f000 b8ae 	b.w	800a356 <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20001930 	.word	0x20001930

0800a200 <__sinit_lock_acquire>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__sinit_lock_acquire+0x8>)
 800a202:	f000 b8a7 	b.w	800a354 <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	2000192b 	.word	0x2000192b

0800a20c <__sinit_lock_release>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__sinit_lock_release+0x8>)
 800a20e:	f000 b8a2 	b.w	800a356 <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	2000192b 	.word	0x2000192b

0800a218 <__sinit>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	4604      	mov	r4, r0
 800a21c:	f7ff fff0 	bl	800a200 <__sinit_lock_acquire>
 800a220:	69a3      	ldr	r3, [r4, #24]
 800a222:	b11b      	cbz	r3, 800a22c <__sinit+0x14>
 800a224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a228:	f7ff bff0 	b.w	800a20c <__sinit_lock_release>
 800a22c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a230:	6523      	str	r3, [r4, #80]	; 0x50
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <__sinit+0x68>)
 800a234:	4a13      	ldr	r2, [pc, #76]	; (800a284 <__sinit+0x6c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	62a2      	str	r2, [r4, #40]	; 0x28
 800a23a:	42a3      	cmp	r3, r4
 800a23c:	bf04      	itt	eq
 800a23e:	2301      	moveq	r3, #1
 800a240:	61a3      	streq	r3, [r4, #24]
 800a242:	4620      	mov	r0, r4
 800a244:	f000 f820 	bl	800a288 <__sfp>
 800a248:	6060      	str	r0, [r4, #4]
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 f81c 	bl	800a288 <__sfp>
 800a250:	60a0      	str	r0, [r4, #8]
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f818 	bl	800a288 <__sfp>
 800a258:	2200      	movs	r2, #0
 800a25a:	60e0      	str	r0, [r4, #12]
 800a25c:	2104      	movs	r1, #4
 800a25e:	6860      	ldr	r0, [r4, #4]
 800a260:	f7ff ff82 	bl	800a168 <std>
 800a264:	68a0      	ldr	r0, [r4, #8]
 800a266:	2201      	movs	r2, #1
 800a268:	2109      	movs	r1, #9
 800a26a:	f7ff ff7d 	bl	800a168 <std>
 800a26e:	68e0      	ldr	r0, [r4, #12]
 800a270:	2202      	movs	r2, #2
 800a272:	2112      	movs	r1, #18
 800a274:	f7ff ff78 	bl	800a168 <std>
 800a278:	2301      	movs	r3, #1
 800a27a:	61a3      	str	r3, [r4, #24]
 800a27c:	e7d2      	b.n	800a224 <__sinit+0xc>
 800a27e:	bf00      	nop
 800a280:	0800b794 	.word	0x0800b794
 800a284:	0800a1b1 	.word	0x0800a1b1

0800a288 <__sfp>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	4607      	mov	r7, r0
 800a28c:	f7ff ffac 	bl	800a1e8 <__sfp_lock_acquire>
 800a290:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <__sfp+0x84>)
 800a292:	681e      	ldr	r6, [r3, #0]
 800a294:	69b3      	ldr	r3, [r6, #24]
 800a296:	b913      	cbnz	r3, 800a29e <__sfp+0x16>
 800a298:	4630      	mov	r0, r6
 800a29a:	f7ff ffbd 	bl	800a218 <__sinit>
 800a29e:	3648      	adds	r6, #72	; 0x48
 800a2a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	d503      	bpl.n	800a2b0 <__sfp+0x28>
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	b30b      	cbz	r3, 800a2f0 <__sfp+0x68>
 800a2ac:	6836      	ldr	r6, [r6, #0]
 800a2ae:	e7f7      	b.n	800a2a0 <__sfp+0x18>
 800a2b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2b4:	b9d5      	cbnz	r5, 800a2ec <__sfp+0x64>
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <__sfp+0x88>)
 800a2b8:	60e3      	str	r3, [r4, #12]
 800a2ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2be:	6665      	str	r5, [r4, #100]	; 0x64
 800a2c0:	f000 f847 	bl	800a352 <__retarget_lock_init_recursive>
 800a2c4:	f7ff ff96 	bl	800a1f4 <__sfp_lock_release>
 800a2c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2d0:	6025      	str	r5, [r4, #0]
 800a2d2:	61a5      	str	r5, [r4, #24]
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2dc:	f7ff fd0c 	bl	8009cf8 <memset>
 800a2e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	3468      	adds	r4, #104	; 0x68
 800a2ee:	e7d9      	b.n	800a2a4 <__sfp+0x1c>
 800a2f0:	2104      	movs	r1, #4
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	f7ff ff62 	bl	800a1bc <__sfmoreglue>
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	6030      	str	r0, [r6, #0]
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d1d5      	bne.n	800a2ac <__sfp+0x24>
 800a300:	f7ff ff78 	bl	800a1f4 <__sfp_lock_release>
 800a304:	230c      	movs	r3, #12
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	e7ee      	b.n	800a2e8 <__sfp+0x60>
 800a30a:	bf00      	nop
 800a30c:	0800b794 	.word	0x0800b794
 800a310:	ffff0001 	.word	0xffff0001

0800a314 <_fwalk_reent>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4606      	mov	r6, r0
 800a31a:	4688      	mov	r8, r1
 800a31c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a320:	2700      	movs	r7, #0
 800a322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a326:	f1b9 0901 	subs.w	r9, r9, #1
 800a32a:	d505      	bpl.n	800a338 <_fwalk_reent+0x24>
 800a32c:	6824      	ldr	r4, [r4, #0]
 800a32e:	2c00      	cmp	r4, #0
 800a330:	d1f7      	bne.n	800a322 <_fwalk_reent+0xe>
 800a332:	4638      	mov	r0, r7
 800a334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a338:	89ab      	ldrh	r3, [r5, #12]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d907      	bls.n	800a34e <_fwalk_reent+0x3a>
 800a33e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a342:	3301      	adds	r3, #1
 800a344:	d003      	beq.n	800a34e <_fwalk_reent+0x3a>
 800a346:	4629      	mov	r1, r5
 800a348:	4630      	mov	r0, r6
 800a34a:	47c0      	blx	r8
 800a34c:	4307      	orrs	r7, r0
 800a34e:	3568      	adds	r5, #104	; 0x68
 800a350:	e7e9      	b.n	800a326 <_fwalk_reent+0x12>

0800a352 <__retarget_lock_init_recursive>:
 800a352:	4770      	bx	lr

0800a354 <__retarget_lock_acquire_recursive>:
 800a354:	4770      	bx	lr

0800a356 <__retarget_lock_release_recursive>:
 800a356:	4770      	bx	lr

0800a358 <__swhatbuf_r>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	460e      	mov	r6, r1
 800a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a360:	2900      	cmp	r1, #0
 800a362:	b096      	sub	sp, #88	; 0x58
 800a364:	4614      	mov	r4, r2
 800a366:	461d      	mov	r5, r3
 800a368:	da07      	bge.n	800a37a <__swhatbuf_r+0x22>
 800a36a:	2300      	movs	r3, #0
 800a36c:	602b      	str	r3, [r5, #0]
 800a36e:	89b3      	ldrh	r3, [r6, #12]
 800a370:	061a      	lsls	r2, r3, #24
 800a372:	d410      	bmi.n	800a396 <__swhatbuf_r+0x3e>
 800a374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a378:	e00e      	b.n	800a398 <__swhatbuf_r+0x40>
 800a37a:	466a      	mov	r2, sp
 800a37c:	f000 fdba 	bl	800aef4 <_fstat_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	dbf2      	blt.n	800a36a <__swhatbuf_r+0x12>
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a38a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a38e:	425a      	negs	r2, r3
 800a390:	415a      	adcs	r2, r3
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	e7ee      	b.n	800a374 <__swhatbuf_r+0x1c>
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	2000      	movs	r0, #0
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	b016      	add	sp, #88	; 0x58
 800a39e:	bd70      	pop	{r4, r5, r6, pc}

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b002      	add	sp, #8
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffca 	bl	800a358 <__swhatbuf_r>
 800a3c4:	9900      	ldr	r1, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f000 f879 	bl	800a4c0 <_malloc_r>
 800a3ce:	b948      	cbnz	r0, 800a3e4 <__smakebuf_r+0x44>
 800a3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d4:	059a      	lsls	r2, r3, #22
 800a3d6:	d4ef      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3d8:	f023 0303 	bic.w	r3, r3, #3
 800a3dc:	f043 0302 	orr.w	r3, r3, #2
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	e7e3      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <__smakebuf_r+0x7c>)
 800a3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	6020      	str	r0, [r4, #0]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	6163      	str	r3, [r4, #20]
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	6120      	str	r0, [r4, #16]
 800a3fa:	b15b      	cbz	r3, 800a414 <__smakebuf_r+0x74>
 800a3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a400:	4630      	mov	r0, r6
 800a402:	f000 fd89 	bl	800af18 <_isatty_r>
 800a406:	b128      	cbz	r0, 800a414 <__smakebuf_r+0x74>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	4305      	orrs	r5, r0
 800a418:	81a5      	strh	r5, [r4, #12]
 800a41a:	e7cd      	b.n	800a3b8 <__smakebuf_r+0x18>
 800a41c:	0800a1b1 	.word	0x0800a1b1

0800a420 <_free_r>:
 800a420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a422:	2900      	cmp	r1, #0
 800a424:	d048      	beq.n	800a4b8 <_free_r+0x98>
 800a426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42a:	9001      	str	r0, [sp, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f1a1 0404 	sub.w	r4, r1, #4
 800a432:	bfb8      	it	lt
 800a434:	18e4      	addlt	r4, r4, r3
 800a436:	f000 fdab 	bl	800af90 <__malloc_lock>
 800a43a:	4a20      	ldr	r2, [pc, #128]	; (800a4bc <_free_r+0x9c>)
 800a43c:	9801      	ldr	r0, [sp, #4]
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	4615      	mov	r5, r2
 800a442:	b933      	cbnz	r3, 800a452 <_free_r+0x32>
 800a444:	6063      	str	r3, [r4, #4]
 800a446:	6014      	str	r4, [r2, #0]
 800a448:	b003      	add	sp, #12
 800a44a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a44e:	f000 bda5 	b.w	800af9c <__malloc_unlock>
 800a452:	42a3      	cmp	r3, r4
 800a454:	d90b      	bls.n	800a46e <_free_r+0x4e>
 800a456:	6821      	ldr	r1, [r4, #0]
 800a458:	1862      	adds	r2, r4, r1
 800a45a:	4293      	cmp	r3, r2
 800a45c:	bf04      	itt	eq
 800a45e:	681a      	ldreq	r2, [r3, #0]
 800a460:	685b      	ldreq	r3, [r3, #4]
 800a462:	6063      	str	r3, [r4, #4]
 800a464:	bf04      	itt	eq
 800a466:	1852      	addeq	r2, r2, r1
 800a468:	6022      	streq	r2, [r4, #0]
 800a46a:	602c      	str	r4, [r5, #0]
 800a46c:	e7ec      	b.n	800a448 <_free_r+0x28>
 800a46e:	461a      	mov	r2, r3
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b10b      	cbz	r3, 800a478 <_free_r+0x58>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d9fa      	bls.n	800a46e <_free_r+0x4e>
 800a478:	6811      	ldr	r1, [r2, #0]
 800a47a:	1855      	adds	r5, r2, r1
 800a47c:	42a5      	cmp	r5, r4
 800a47e:	d10b      	bne.n	800a498 <_free_r+0x78>
 800a480:	6824      	ldr	r4, [r4, #0]
 800a482:	4421      	add	r1, r4
 800a484:	1854      	adds	r4, r2, r1
 800a486:	42a3      	cmp	r3, r4
 800a488:	6011      	str	r1, [r2, #0]
 800a48a:	d1dd      	bne.n	800a448 <_free_r+0x28>
 800a48c:	681c      	ldr	r4, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	6053      	str	r3, [r2, #4]
 800a492:	4421      	add	r1, r4
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	e7d7      	b.n	800a448 <_free_r+0x28>
 800a498:	d902      	bls.n	800a4a0 <_free_r+0x80>
 800a49a:	230c      	movs	r3, #12
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	e7d3      	b.n	800a448 <_free_r+0x28>
 800a4a0:	6825      	ldr	r5, [r4, #0]
 800a4a2:	1961      	adds	r1, r4, r5
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	bf04      	itt	eq
 800a4a8:	6819      	ldreq	r1, [r3, #0]
 800a4aa:	685b      	ldreq	r3, [r3, #4]
 800a4ac:	6063      	str	r3, [r4, #4]
 800a4ae:	bf04      	itt	eq
 800a4b0:	1949      	addeq	r1, r1, r5
 800a4b2:	6021      	streq	r1, [r4, #0]
 800a4b4:	6054      	str	r4, [r2, #4]
 800a4b6:	e7c7      	b.n	800a448 <_free_r+0x28>
 800a4b8:	b003      	add	sp, #12
 800a4ba:	bd30      	pop	{r4, r5, pc}
 800a4bc:	200014d0 	.word	0x200014d0

0800a4c0 <_malloc_r>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	1ccd      	adds	r5, r1, #3
 800a4c4:	f025 0503 	bic.w	r5, r5, #3
 800a4c8:	3508      	adds	r5, #8
 800a4ca:	2d0c      	cmp	r5, #12
 800a4cc:	bf38      	it	cc
 800a4ce:	250c      	movcc	r5, #12
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	db01      	blt.n	800a4da <_malloc_r+0x1a>
 800a4d6:	42a9      	cmp	r1, r5
 800a4d8:	d903      	bls.n	800a4e2 <_malloc_r+0x22>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	6033      	str	r3, [r6, #0]
 800a4de:	2000      	movs	r0, #0
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e2:	f000 fd55 	bl	800af90 <__malloc_lock>
 800a4e6:	4921      	ldr	r1, [pc, #132]	; (800a56c <_malloc_r+0xac>)
 800a4e8:	680a      	ldr	r2, [r1, #0]
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	b99c      	cbnz	r4, 800a516 <_malloc_r+0x56>
 800a4ee:	4f20      	ldr	r7, [pc, #128]	; (800a570 <_malloc_r+0xb0>)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	b923      	cbnz	r3, 800a4fe <_malloc_r+0x3e>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 fc86 	bl	800ae08 <_sbrk_r>
 800a4fc:	6038      	str	r0, [r7, #0]
 800a4fe:	4629      	mov	r1, r5
 800a500:	4630      	mov	r0, r6
 800a502:	f000 fc81 	bl	800ae08 <_sbrk_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d123      	bne.n	800a552 <_malloc_r+0x92>
 800a50a:	230c      	movs	r3, #12
 800a50c:	6033      	str	r3, [r6, #0]
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 fd44 	bl	800af9c <__malloc_unlock>
 800a514:	e7e3      	b.n	800a4de <_malloc_r+0x1e>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	1b5b      	subs	r3, r3, r5
 800a51a:	d417      	bmi.n	800a54c <_malloc_r+0x8c>
 800a51c:	2b0b      	cmp	r3, #11
 800a51e:	d903      	bls.n	800a528 <_malloc_r+0x68>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	441c      	add	r4, r3
 800a524:	6025      	str	r5, [r4, #0]
 800a526:	e004      	b.n	800a532 <_malloc_r+0x72>
 800a528:	6863      	ldr	r3, [r4, #4]
 800a52a:	42a2      	cmp	r2, r4
 800a52c:	bf0c      	ite	eq
 800a52e:	600b      	streq	r3, [r1, #0]
 800a530:	6053      	strne	r3, [r2, #4]
 800a532:	4630      	mov	r0, r6
 800a534:	f000 fd32 	bl	800af9c <__malloc_unlock>
 800a538:	f104 000b 	add.w	r0, r4, #11
 800a53c:	1d23      	adds	r3, r4, #4
 800a53e:	f020 0007 	bic.w	r0, r0, #7
 800a542:	1ac2      	subs	r2, r0, r3
 800a544:	d0cc      	beq.n	800a4e0 <_malloc_r+0x20>
 800a546:	1a1b      	subs	r3, r3, r0
 800a548:	50a3      	str	r3, [r4, r2]
 800a54a:	e7c9      	b.n	800a4e0 <_malloc_r+0x20>
 800a54c:	4622      	mov	r2, r4
 800a54e:	6864      	ldr	r4, [r4, #4]
 800a550:	e7cc      	b.n	800a4ec <_malloc_r+0x2c>
 800a552:	1cc4      	adds	r4, r0, #3
 800a554:	f024 0403 	bic.w	r4, r4, #3
 800a558:	42a0      	cmp	r0, r4
 800a55a:	d0e3      	beq.n	800a524 <_malloc_r+0x64>
 800a55c:	1a21      	subs	r1, r4, r0
 800a55e:	4630      	mov	r0, r6
 800a560:	f000 fc52 	bl	800ae08 <_sbrk_r>
 800a564:	3001      	adds	r0, #1
 800a566:	d1dd      	bne.n	800a524 <_malloc_r+0x64>
 800a568:	e7cf      	b.n	800a50a <_malloc_r+0x4a>
 800a56a:	bf00      	nop
 800a56c:	200014d0 	.word	0x200014d0
 800a570:	200014d4 	.word	0x200014d4

0800a574 <__ssputs_r>:
 800a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	688e      	ldr	r6, [r1, #8]
 800a57a:	429e      	cmp	r6, r3
 800a57c:	4682      	mov	sl, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	4690      	mov	r8, r2
 800a582:	461f      	mov	r7, r3
 800a584:	d838      	bhi.n	800a5f8 <__ssputs_r+0x84>
 800a586:	898a      	ldrh	r2, [r1, #12]
 800a588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a58c:	d032      	beq.n	800a5f4 <__ssputs_r+0x80>
 800a58e:	6825      	ldr	r5, [r4, #0]
 800a590:	6909      	ldr	r1, [r1, #16]
 800a592:	eba5 0901 	sub.w	r9, r5, r1
 800a596:	6965      	ldr	r5, [r4, #20]
 800a598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a59c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	444b      	add	r3, r9
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	429d      	cmp	r5, r3
 800a5a8:	bf38      	it	cc
 800a5aa:	461d      	movcc	r5, r3
 800a5ac:	0553      	lsls	r3, r2, #21
 800a5ae:	d531      	bpl.n	800a614 <__ssputs_r+0xa0>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7ff ff85 	bl	800a4c0 <_malloc_r>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	b950      	cbnz	r0, 800a5d0 <__ssputs_r+0x5c>
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	f8ca 3000 	str.w	r3, [sl]
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	6921      	ldr	r1, [r4, #16]
 800a5d2:	464a      	mov	r2, r9
 800a5d4:	f7ff fb82 	bl	8009cdc <memcpy>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	6126      	str	r6, [r4, #16]
 800a5e6:	6165      	str	r5, [r4, #20]
 800a5e8:	444e      	add	r6, r9
 800a5ea:	eba5 0509 	sub.w	r5, r5, r9
 800a5ee:	6026      	str	r6, [r4, #0]
 800a5f0:	60a5      	str	r5, [r4, #8]
 800a5f2:	463e      	mov	r6, r7
 800a5f4:	42be      	cmp	r6, r7
 800a5f6:	d900      	bls.n	800a5fa <__ssputs_r+0x86>
 800a5f8:	463e      	mov	r6, r7
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	4641      	mov	r1, r8
 800a600:	f000 fcac 	bl	800af5c <memmove>
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	1b9b      	subs	r3, r3, r6
 800a60a:	4432      	add	r2, r6
 800a60c:	60a3      	str	r3, [r4, #8]
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	2000      	movs	r0, #0
 800a612:	e7db      	b.n	800a5cc <__ssputs_r+0x58>
 800a614:	462a      	mov	r2, r5
 800a616:	f000 fcc7 	bl	800afa8 <_realloc_r>
 800a61a:	4606      	mov	r6, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1e1      	bne.n	800a5e4 <__ssputs_r+0x70>
 800a620:	6921      	ldr	r1, [r4, #16]
 800a622:	4650      	mov	r0, sl
 800a624:	f7ff fefc 	bl	800a420 <_free_r>
 800a628:	e7c7      	b.n	800a5ba <__ssputs_r+0x46>
	...

0800a62c <_svfiprintf_r>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	4698      	mov	r8, r3
 800a632:	898b      	ldrh	r3, [r1, #12]
 800a634:	061b      	lsls	r3, r3, #24
 800a636:	b09d      	sub	sp, #116	; 0x74
 800a638:	4607      	mov	r7, r0
 800a63a:	460d      	mov	r5, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	d50e      	bpl.n	800a65e <_svfiprintf_r+0x32>
 800a640:	690b      	ldr	r3, [r1, #16]
 800a642:	b963      	cbnz	r3, 800a65e <_svfiprintf_r+0x32>
 800a644:	2140      	movs	r1, #64	; 0x40
 800a646:	f7ff ff3b 	bl	800a4c0 <_malloc_r>
 800a64a:	6028      	str	r0, [r5, #0]
 800a64c:	6128      	str	r0, [r5, #16]
 800a64e:	b920      	cbnz	r0, 800a65a <_svfiprintf_r+0x2e>
 800a650:	230c      	movs	r3, #12
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e0d1      	b.n	800a7fe <_svfiprintf_r+0x1d2>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	616b      	str	r3, [r5, #20]
 800a65e:	2300      	movs	r3, #0
 800a660:	9309      	str	r3, [sp, #36]	; 0x24
 800a662:	2320      	movs	r3, #32
 800a664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a668:	f8cd 800c 	str.w	r8, [sp, #12]
 800a66c:	2330      	movs	r3, #48	; 0x30
 800a66e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a818 <_svfiprintf_r+0x1ec>
 800a672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a676:	f04f 0901 	mov.w	r9, #1
 800a67a:	4623      	mov	r3, r4
 800a67c:	469a      	mov	sl, r3
 800a67e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a682:	b10a      	cbz	r2, 800a688 <_svfiprintf_r+0x5c>
 800a684:	2a25      	cmp	r2, #37	; 0x25
 800a686:	d1f9      	bne.n	800a67c <_svfiprintf_r+0x50>
 800a688:	ebba 0b04 	subs.w	fp, sl, r4
 800a68c:	d00b      	beq.n	800a6a6 <_svfiprintf_r+0x7a>
 800a68e:	465b      	mov	r3, fp
 800a690:	4622      	mov	r2, r4
 800a692:	4629      	mov	r1, r5
 800a694:	4638      	mov	r0, r7
 800a696:	f7ff ff6d 	bl	800a574 <__ssputs_r>
 800a69a:	3001      	adds	r0, #1
 800a69c:	f000 80aa 	beq.w	800a7f4 <_svfiprintf_r+0x1c8>
 800a6a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a2:	445a      	add	r2, fp
 800a6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80a2 	beq.w	800a7f4 <_svfiprintf_r+0x1c8>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ba:	f10a 0a01 	add.w	sl, sl, #1
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c8:	4654      	mov	r4, sl
 800a6ca:	2205      	movs	r2, #5
 800a6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d0:	4851      	ldr	r0, [pc, #324]	; (800a818 <_svfiprintf_r+0x1ec>)
 800a6d2:	f7f5 fdbd 	bl	8000250 <memchr>
 800a6d6:	9a04      	ldr	r2, [sp, #16]
 800a6d8:	b9d8      	cbnz	r0, 800a712 <_svfiprintf_r+0xe6>
 800a6da:	06d0      	lsls	r0, r2, #27
 800a6dc:	bf44      	itt	mi
 800a6de:	2320      	movmi	r3, #32
 800a6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e4:	0711      	lsls	r1, r2, #28
 800a6e6:	bf44      	itt	mi
 800a6e8:	232b      	movmi	r3, #43	; 0x2b
 800a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f4:	d015      	beq.n	800a722 <_svfiprintf_r+0xf6>
 800a6f6:	9a07      	ldr	r2, [sp, #28]
 800a6f8:	4654      	mov	r4, sl
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f04f 0c0a 	mov.w	ip, #10
 800a700:	4621      	mov	r1, r4
 800a702:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a706:	3b30      	subs	r3, #48	; 0x30
 800a708:	2b09      	cmp	r3, #9
 800a70a:	d94e      	bls.n	800a7aa <_svfiprintf_r+0x17e>
 800a70c:	b1b0      	cbz	r0, 800a73c <_svfiprintf_r+0x110>
 800a70e:	9207      	str	r2, [sp, #28]
 800a710:	e014      	b.n	800a73c <_svfiprintf_r+0x110>
 800a712:	eba0 0308 	sub.w	r3, r0, r8
 800a716:	fa09 f303 	lsl.w	r3, r9, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	46a2      	mov	sl, r4
 800a720:	e7d2      	b.n	800a6c8 <_svfiprintf_r+0x9c>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	1d19      	adds	r1, r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9103      	str	r1, [sp, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfbb      	ittet	lt
 800a72e:	425b      	neglt	r3, r3
 800a730:	f042 0202 	orrlt.w	r2, r2, #2
 800a734:	9307      	strge	r3, [sp, #28]
 800a736:	9307      	strlt	r3, [sp, #28]
 800a738:	bfb8      	it	lt
 800a73a:	9204      	strlt	r2, [sp, #16]
 800a73c:	7823      	ldrb	r3, [r4, #0]
 800a73e:	2b2e      	cmp	r3, #46	; 0x2e
 800a740:	d10c      	bne.n	800a75c <_svfiprintf_r+0x130>
 800a742:	7863      	ldrb	r3, [r4, #1]
 800a744:	2b2a      	cmp	r3, #42	; 0x2a
 800a746:	d135      	bne.n	800a7b4 <_svfiprintf_r+0x188>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	bfb8      	it	lt
 800a754:	f04f 33ff 	movlt.w	r3, #4294967295
 800a758:	3402      	adds	r4, #2
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a828 <_svfiprintf_r+0x1fc>
 800a760:	7821      	ldrb	r1, [r4, #0]
 800a762:	2203      	movs	r2, #3
 800a764:	4650      	mov	r0, sl
 800a766:	f7f5 fd73 	bl	8000250 <memchr>
 800a76a:	b140      	cbz	r0, 800a77e <_svfiprintf_r+0x152>
 800a76c:	2340      	movs	r3, #64	; 0x40
 800a76e:	eba0 000a 	sub.w	r0, r0, sl
 800a772:	fa03 f000 	lsl.w	r0, r3, r0
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	4303      	orrs	r3, r0
 800a77a:	3401      	adds	r4, #1
 800a77c:	9304      	str	r3, [sp, #16]
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	4826      	ldr	r0, [pc, #152]	; (800a81c <_svfiprintf_r+0x1f0>)
 800a784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a788:	2206      	movs	r2, #6
 800a78a:	f7f5 fd61 	bl	8000250 <memchr>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d038      	beq.n	800a804 <_svfiprintf_r+0x1d8>
 800a792:	4b23      	ldr	r3, [pc, #140]	; (800a820 <_svfiprintf_r+0x1f4>)
 800a794:	bb1b      	cbnz	r3, 800a7de <_svfiprintf_r+0x1b2>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	3307      	adds	r3, #7
 800a79a:	f023 0307 	bic.w	r3, r3, #7
 800a79e:	3308      	adds	r3, #8
 800a7a0:	9303      	str	r3, [sp, #12]
 800a7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a4:	4433      	add	r3, r6
 800a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a8:	e767      	b.n	800a67a <_svfiprintf_r+0x4e>
 800a7aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	e7a5      	b.n	800a700 <_svfiprintf_r+0xd4>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	3401      	adds	r4, #1
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f04f 0c0a 	mov.w	ip, #10
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c6:	3a30      	subs	r2, #48	; 0x30
 800a7c8:	2a09      	cmp	r2, #9
 800a7ca:	d903      	bls.n	800a7d4 <_svfiprintf_r+0x1a8>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0c5      	beq.n	800a75c <_svfiprintf_r+0x130>
 800a7d0:	9105      	str	r1, [sp, #20]
 800a7d2:	e7c3      	b.n	800a75c <_svfiprintf_r+0x130>
 800a7d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d8:	4604      	mov	r4, r0
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e7f0      	b.n	800a7c0 <_svfiprintf_r+0x194>
 800a7de:	ab03      	add	r3, sp, #12
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <_svfiprintf_r+0x1f8>)
 800a7e6:	a904      	add	r1, sp, #16
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f3af 8000 	nop.w
 800a7ee:	1c42      	adds	r2, r0, #1
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	d1d6      	bne.n	800a7a2 <_svfiprintf_r+0x176>
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	065b      	lsls	r3, r3, #25
 800a7f8:	f53f af2c 	bmi.w	800a654 <_svfiprintf_r+0x28>
 800a7fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fe:	b01d      	add	sp, #116	; 0x74
 800a800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a804:	ab03      	add	r3, sp, #12
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	462a      	mov	r2, r5
 800a80a:	4b06      	ldr	r3, [pc, #24]	; (800a824 <_svfiprintf_r+0x1f8>)
 800a80c:	a904      	add	r1, sp, #16
 800a80e:	4638      	mov	r0, r7
 800a810:	f000 f9d4 	bl	800abbc <_printf_i>
 800a814:	e7eb      	b.n	800a7ee <_svfiprintf_r+0x1c2>
 800a816:	bf00      	nop
 800a818:	0800b7f8 	.word	0x0800b7f8
 800a81c:	0800b802 	.word	0x0800b802
 800a820:	00000000 	.word	0x00000000
 800a824:	0800a575 	.word	0x0800a575
 800a828:	0800b7fe 	.word	0x0800b7fe

0800a82c <__sfputc_r>:
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	b410      	push	{r4}
 800a834:	6093      	str	r3, [r2, #8]
 800a836:	da08      	bge.n	800a84a <__sfputc_r+0x1e>
 800a838:	6994      	ldr	r4, [r2, #24]
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	db01      	blt.n	800a842 <__sfputc_r+0x16>
 800a83e:	290a      	cmp	r1, #10
 800a840:	d103      	bne.n	800a84a <__sfputc_r+0x1e>
 800a842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a846:	f7ff bb0d 	b.w	8009e64 <__swbuf_r>
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	1c58      	adds	r0, r3, #1
 800a84e:	6010      	str	r0, [r2, #0]
 800a850:	7019      	strb	r1, [r3, #0]
 800a852:	4608      	mov	r0, r1
 800a854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <__sfputs_r>:
 800a85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	4614      	mov	r4, r2
 800a862:	18d5      	adds	r5, r2, r3
 800a864:	42ac      	cmp	r4, r5
 800a866:	d101      	bne.n	800a86c <__sfputs_r+0x12>
 800a868:	2000      	movs	r0, #0
 800a86a:	e007      	b.n	800a87c <__sfputs_r+0x22>
 800a86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a870:	463a      	mov	r2, r7
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ffda 	bl	800a82c <__sfputc_r>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d1f3      	bne.n	800a864 <__sfputs_r+0xa>
 800a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a880 <_vfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	460d      	mov	r5, r1
 800a886:	b09d      	sub	sp, #116	; 0x74
 800a888:	4614      	mov	r4, r2
 800a88a:	4698      	mov	r8, r3
 800a88c:	4606      	mov	r6, r0
 800a88e:	b118      	cbz	r0, 800a898 <_vfiprintf_r+0x18>
 800a890:	6983      	ldr	r3, [r0, #24]
 800a892:	b90b      	cbnz	r3, 800a898 <_vfiprintf_r+0x18>
 800a894:	f7ff fcc0 	bl	800a218 <__sinit>
 800a898:	4b89      	ldr	r3, [pc, #548]	; (800aac0 <_vfiprintf_r+0x240>)
 800a89a:	429d      	cmp	r5, r3
 800a89c:	d11b      	bne.n	800a8d6 <_vfiprintf_r+0x56>
 800a89e:	6875      	ldr	r5, [r6, #4]
 800a8a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a2:	07d9      	lsls	r1, r3, #31
 800a8a4:	d405      	bmi.n	800a8b2 <_vfiprintf_r+0x32>
 800a8a6:	89ab      	ldrh	r3, [r5, #12]
 800a8a8:	059a      	lsls	r2, r3, #22
 800a8aa:	d402      	bmi.n	800a8b2 <_vfiprintf_r+0x32>
 800a8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ae:	f7ff fd51 	bl	800a354 <__retarget_lock_acquire_recursive>
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	071b      	lsls	r3, r3, #28
 800a8b6:	d501      	bpl.n	800a8bc <_vfiprintf_r+0x3c>
 800a8b8:	692b      	ldr	r3, [r5, #16]
 800a8ba:	b9eb      	cbnz	r3, 800a8f8 <_vfiprintf_r+0x78>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7ff fb22 	bl	8009f08 <__swsetup_r>
 800a8c4:	b1c0      	cbz	r0, 800a8f8 <_vfiprintf_r+0x78>
 800a8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c8:	07dc      	lsls	r4, r3, #31
 800a8ca:	d50e      	bpl.n	800a8ea <_vfiprintf_r+0x6a>
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	b01d      	add	sp, #116	; 0x74
 800a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d6:	4b7b      	ldr	r3, [pc, #492]	; (800aac4 <_vfiprintf_r+0x244>)
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	d101      	bne.n	800a8e0 <_vfiprintf_r+0x60>
 800a8dc:	68b5      	ldr	r5, [r6, #8]
 800a8de:	e7df      	b.n	800a8a0 <_vfiprintf_r+0x20>
 800a8e0:	4b79      	ldr	r3, [pc, #484]	; (800aac8 <_vfiprintf_r+0x248>)
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	bf08      	it	eq
 800a8e6:	68f5      	ldreq	r5, [r6, #12]
 800a8e8:	e7da      	b.n	800a8a0 <_vfiprintf_r+0x20>
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	0598      	lsls	r0, r3, #22
 800a8ee:	d4ed      	bmi.n	800a8cc <_vfiprintf_r+0x4c>
 800a8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8f2:	f7ff fd30 	bl	800a356 <__retarget_lock_release_recursive>
 800a8f6:	e7e9      	b.n	800a8cc <_vfiprintf_r+0x4c>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fc:	2320      	movs	r3, #32
 800a8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a902:	f8cd 800c 	str.w	r8, [sp, #12]
 800a906:	2330      	movs	r3, #48	; 0x30
 800a908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aacc <_vfiprintf_r+0x24c>
 800a90c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a910:	f04f 0901 	mov.w	r9, #1
 800a914:	4623      	mov	r3, r4
 800a916:	469a      	mov	sl, r3
 800a918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a91c:	b10a      	cbz	r2, 800a922 <_vfiprintf_r+0xa2>
 800a91e:	2a25      	cmp	r2, #37	; 0x25
 800a920:	d1f9      	bne.n	800a916 <_vfiprintf_r+0x96>
 800a922:	ebba 0b04 	subs.w	fp, sl, r4
 800a926:	d00b      	beq.n	800a940 <_vfiprintf_r+0xc0>
 800a928:	465b      	mov	r3, fp
 800a92a:	4622      	mov	r2, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff ff93 	bl	800a85a <__sfputs_r>
 800a934:	3001      	adds	r0, #1
 800a936:	f000 80aa 	beq.w	800aa8e <_vfiprintf_r+0x20e>
 800a93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a93c:	445a      	add	r2, fp
 800a93e:	9209      	str	r2, [sp, #36]	; 0x24
 800a940:	f89a 3000 	ldrb.w	r3, [sl]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 80a2 	beq.w	800aa8e <_vfiprintf_r+0x20e>
 800a94a:	2300      	movs	r3, #0
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295
 800a950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a954:	f10a 0a01 	add.w	sl, sl, #1
 800a958:	9304      	str	r3, [sp, #16]
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a960:	931a      	str	r3, [sp, #104]	; 0x68
 800a962:	4654      	mov	r4, sl
 800a964:	2205      	movs	r2, #5
 800a966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96a:	4858      	ldr	r0, [pc, #352]	; (800aacc <_vfiprintf_r+0x24c>)
 800a96c:	f7f5 fc70 	bl	8000250 <memchr>
 800a970:	9a04      	ldr	r2, [sp, #16]
 800a972:	b9d8      	cbnz	r0, 800a9ac <_vfiprintf_r+0x12c>
 800a974:	06d1      	lsls	r1, r2, #27
 800a976:	bf44      	itt	mi
 800a978:	2320      	movmi	r3, #32
 800a97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97e:	0713      	lsls	r3, r2, #28
 800a980:	bf44      	itt	mi
 800a982:	232b      	movmi	r3, #43	; 0x2b
 800a984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a988:	f89a 3000 	ldrb.w	r3, [sl]
 800a98c:	2b2a      	cmp	r3, #42	; 0x2a
 800a98e:	d015      	beq.n	800a9bc <_vfiprintf_r+0x13c>
 800a990:	9a07      	ldr	r2, [sp, #28]
 800a992:	4654      	mov	r4, sl
 800a994:	2000      	movs	r0, #0
 800a996:	f04f 0c0a 	mov.w	ip, #10
 800a99a:	4621      	mov	r1, r4
 800a99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a0:	3b30      	subs	r3, #48	; 0x30
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d94e      	bls.n	800aa44 <_vfiprintf_r+0x1c4>
 800a9a6:	b1b0      	cbz	r0, 800a9d6 <_vfiprintf_r+0x156>
 800a9a8:	9207      	str	r2, [sp, #28]
 800a9aa:	e014      	b.n	800a9d6 <_vfiprintf_r+0x156>
 800a9ac:	eba0 0308 	sub.w	r3, r0, r8
 800a9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	9304      	str	r3, [sp, #16]
 800a9b8:	46a2      	mov	sl, r4
 800a9ba:	e7d2      	b.n	800a962 <_vfiprintf_r+0xe2>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	1d19      	adds	r1, r3, #4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	9103      	str	r1, [sp, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	bfbb      	ittet	lt
 800a9c8:	425b      	neglt	r3, r3
 800a9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ce:	9307      	strge	r3, [sp, #28]
 800a9d0:	9307      	strlt	r3, [sp, #28]
 800a9d2:	bfb8      	it	lt
 800a9d4:	9204      	strlt	r2, [sp, #16]
 800a9d6:	7823      	ldrb	r3, [r4, #0]
 800a9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a9da:	d10c      	bne.n	800a9f6 <_vfiprintf_r+0x176>
 800a9dc:	7863      	ldrb	r3, [r4, #1]
 800a9de:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e0:	d135      	bne.n	800aa4e <_vfiprintf_r+0x1ce>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	1d1a      	adds	r2, r3, #4
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	9203      	str	r2, [sp, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	bfb8      	it	lt
 800a9ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9f2:	3402      	adds	r4, #2
 800a9f4:	9305      	str	r3, [sp, #20]
 800a9f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aadc <_vfiprintf_r+0x25c>
 800a9fa:	7821      	ldrb	r1, [r4, #0]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f7f5 fc26 	bl	8000250 <memchr>
 800aa04:	b140      	cbz	r0, 800aa18 <_vfiprintf_r+0x198>
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	eba0 000a 	sub.w	r0, r0, sl
 800aa0c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa10:	9b04      	ldr	r3, [sp, #16]
 800aa12:	4303      	orrs	r3, r0
 800aa14:	3401      	adds	r4, #1
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1c:	482c      	ldr	r0, [pc, #176]	; (800aad0 <_vfiprintf_r+0x250>)
 800aa1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa22:	2206      	movs	r2, #6
 800aa24:	f7f5 fc14 	bl	8000250 <memchr>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d03f      	beq.n	800aaac <_vfiprintf_r+0x22c>
 800aa2c:	4b29      	ldr	r3, [pc, #164]	; (800aad4 <_vfiprintf_r+0x254>)
 800aa2e:	bb1b      	cbnz	r3, 800aa78 <_vfiprintf_r+0x1f8>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	3307      	adds	r3, #7
 800aa34:	f023 0307 	bic.w	r3, r3, #7
 800aa38:	3308      	adds	r3, #8
 800aa3a:	9303      	str	r3, [sp, #12]
 800aa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3e:	443b      	add	r3, r7
 800aa40:	9309      	str	r3, [sp, #36]	; 0x24
 800aa42:	e767      	b.n	800a914 <_vfiprintf_r+0x94>
 800aa44:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa48:	460c      	mov	r4, r1
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	e7a5      	b.n	800a99a <_vfiprintf_r+0x11a>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	3401      	adds	r4, #1
 800aa52:	9305      	str	r3, [sp, #20]
 800aa54:	4619      	mov	r1, r3
 800aa56:	f04f 0c0a 	mov.w	ip, #10
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa60:	3a30      	subs	r2, #48	; 0x30
 800aa62:	2a09      	cmp	r2, #9
 800aa64:	d903      	bls.n	800aa6e <_vfiprintf_r+0x1ee>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0c5      	beq.n	800a9f6 <_vfiprintf_r+0x176>
 800aa6a:	9105      	str	r1, [sp, #20]
 800aa6c:	e7c3      	b.n	800a9f6 <_vfiprintf_r+0x176>
 800aa6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa72:	4604      	mov	r4, r0
 800aa74:	2301      	movs	r3, #1
 800aa76:	e7f0      	b.n	800aa5a <_vfiprintf_r+0x1da>
 800aa78:	ab03      	add	r3, sp, #12
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	4b16      	ldr	r3, [pc, #88]	; (800aad8 <_vfiprintf_r+0x258>)
 800aa80:	a904      	add	r1, sp, #16
 800aa82:	4630      	mov	r0, r6
 800aa84:	f3af 8000 	nop.w
 800aa88:	4607      	mov	r7, r0
 800aa8a:	1c78      	adds	r0, r7, #1
 800aa8c:	d1d6      	bne.n	800aa3c <_vfiprintf_r+0x1bc>
 800aa8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa90:	07d9      	lsls	r1, r3, #31
 800aa92:	d405      	bmi.n	800aaa0 <_vfiprintf_r+0x220>
 800aa94:	89ab      	ldrh	r3, [r5, #12]
 800aa96:	059a      	lsls	r2, r3, #22
 800aa98:	d402      	bmi.n	800aaa0 <_vfiprintf_r+0x220>
 800aa9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa9c:	f7ff fc5b 	bl	800a356 <__retarget_lock_release_recursive>
 800aaa0:	89ab      	ldrh	r3, [r5, #12]
 800aaa2:	065b      	lsls	r3, r3, #25
 800aaa4:	f53f af12 	bmi.w	800a8cc <_vfiprintf_r+0x4c>
 800aaa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaaa:	e711      	b.n	800a8d0 <_vfiprintf_r+0x50>
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <_vfiprintf_r+0x258>)
 800aab4:	a904      	add	r1, sp, #16
 800aab6:	4630      	mov	r0, r6
 800aab8:	f000 f880 	bl	800abbc <_printf_i>
 800aabc:	e7e4      	b.n	800aa88 <_vfiprintf_r+0x208>
 800aabe:	bf00      	nop
 800aac0:	0800b7b8 	.word	0x0800b7b8
 800aac4:	0800b7d8 	.word	0x0800b7d8
 800aac8:	0800b798 	.word	0x0800b798
 800aacc:	0800b7f8 	.word	0x0800b7f8
 800aad0:	0800b802 	.word	0x0800b802
 800aad4:	00000000 	.word	0x00000000
 800aad8:	0800a85b 	.word	0x0800a85b
 800aadc:	0800b7fe 	.word	0x0800b7fe

0800aae0 <_printf_common>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	4616      	mov	r6, r2
 800aae6:	4699      	mov	r9, r3
 800aae8:	688a      	ldr	r2, [r1, #8]
 800aaea:	690b      	ldr	r3, [r1, #16]
 800aaec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	bfb8      	it	lt
 800aaf4:	4613      	movlt	r3, r2
 800aaf6:	6033      	str	r3, [r6, #0]
 800aaf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aafc:	4607      	mov	r7, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b10a      	cbz	r2, 800ab06 <_printf_common+0x26>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	0699      	lsls	r1, r3, #26
 800ab0a:	bf42      	ittt	mi
 800ab0c:	6833      	ldrmi	r3, [r6, #0]
 800ab0e:	3302      	addmi	r3, #2
 800ab10:	6033      	strmi	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	f015 0506 	ands.w	r5, r5, #6
 800ab18:	d106      	bne.n	800ab28 <_printf_common+0x48>
 800ab1a:	f104 0a19 	add.w	sl, r4, #25
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	6832      	ldr	r2, [r6, #0]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dc26      	bgt.n	800ab76 <_printf_common+0x96>
 800ab28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab2c:	1e13      	subs	r3, r2, #0
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	0692      	lsls	r2, r2, #26
 800ab36:	d42b      	bmi.n	800ab90 <_printf_common+0xb0>
 800ab38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d01e      	beq.n	800ab84 <_printf_common+0xa4>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	68e5      	ldr	r5, [r4, #12]
 800ab4a:	6832      	ldr	r2, [r6, #0]
 800ab4c:	f003 0306 	and.w	r3, r3, #6
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	bf08      	it	eq
 800ab54:	1aad      	subeq	r5, r5, r2
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	bf0c      	ite	eq
 800ab5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab60:	2500      	movne	r5, #0
 800ab62:	4293      	cmp	r3, r2
 800ab64:	bfc4      	itt	gt
 800ab66:	1a9b      	subgt	r3, r3, r2
 800ab68:	18ed      	addgt	r5, r5, r3
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	341a      	adds	r4, #26
 800ab6e:	42b5      	cmp	r5, r6
 800ab70:	d11a      	bne.n	800aba8 <_printf_common+0xc8>
 800ab72:	2000      	movs	r0, #0
 800ab74:	e008      	b.n	800ab88 <_printf_common+0xa8>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	47c0      	blx	r8
 800ab80:	3001      	adds	r0, #1
 800ab82:	d103      	bne.n	800ab8c <_printf_common+0xac>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	e7c6      	b.n	800ab1e <_printf_common+0x3e>
 800ab90:	18e1      	adds	r1, r4, r3
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	2030      	movs	r0, #48	; 0x30
 800ab96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9a:	4422      	add	r2, r4
 800ab9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba4:	3302      	adds	r3, #2
 800aba6:	e7c7      	b.n	800ab38 <_printf_common+0x58>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4622      	mov	r2, r4
 800abac:	4649      	mov	r1, r9
 800abae:	4638      	mov	r0, r7
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d0e6      	beq.n	800ab84 <_printf_common+0xa4>
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7d9      	b.n	800ab6e <_printf_common+0x8e>
	...

0800abbc <_printf_i>:
 800abbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	4691      	mov	r9, r2
 800abc4:	7e27      	ldrb	r7, [r4, #24]
 800abc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abc8:	2f78      	cmp	r7, #120	; 0x78
 800abca:	4680      	mov	r8, r0
 800abcc:	469a      	mov	sl, r3
 800abce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abd2:	d807      	bhi.n	800abe4 <_printf_i+0x28>
 800abd4:	2f62      	cmp	r7, #98	; 0x62
 800abd6:	d80a      	bhi.n	800abee <_printf_i+0x32>
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f000 80d8 	beq.w	800ad8e <_printf_i+0x1d2>
 800abde:	2f58      	cmp	r7, #88	; 0x58
 800abe0:	f000 80a3 	beq.w	800ad2a <_printf_i+0x16e>
 800abe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abec:	e03a      	b.n	800ac64 <_printf_i+0xa8>
 800abee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf2:	2b15      	cmp	r3, #21
 800abf4:	d8f6      	bhi.n	800abe4 <_printf_i+0x28>
 800abf6:	a001      	add	r0, pc, #4	; (adr r0, 800abfc <_printf_i+0x40>)
 800abf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abfc:	0800ac55 	.word	0x0800ac55
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800abe5 	.word	0x0800abe5
 800ac08:	0800abe5 	.word	0x0800abe5
 800ac0c:	0800abe5 	.word	0x0800abe5
 800ac10:	0800abe5 	.word	0x0800abe5
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800abe5 	.word	0x0800abe5
 800ac1c:	0800abe5 	.word	0x0800abe5
 800ac20:	0800abe5 	.word	0x0800abe5
 800ac24:	0800abe5 	.word	0x0800abe5
 800ac28:	0800ad75 	.word	0x0800ad75
 800ac2c:	0800ac99 	.word	0x0800ac99
 800ac30:	0800ad57 	.word	0x0800ad57
 800ac34:	0800abe5 	.word	0x0800abe5
 800ac38:	0800abe5 	.word	0x0800abe5
 800ac3c:	0800ad97 	.word	0x0800ad97
 800ac40:	0800abe5 	.word	0x0800abe5
 800ac44:	0800ac99 	.word	0x0800ac99
 800ac48:	0800abe5 	.word	0x0800abe5
 800ac4c:	0800abe5 	.word	0x0800abe5
 800ac50:	0800ad5f 	.word	0x0800ad5f
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	600a      	str	r2, [r1, #0]
 800ac5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0a3      	b.n	800adb0 <_printf_i+0x1f4>
 800ac68:	6825      	ldr	r5, [r4, #0]
 800ac6a:	6808      	ldr	r0, [r1, #0]
 800ac6c:	062e      	lsls	r6, r5, #24
 800ac6e:	f100 0304 	add.w	r3, r0, #4
 800ac72:	d50a      	bpl.n	800ac8a <_printf_i+0xce>
 800ac74:	6805      	ldr	r5, [r0, #0]
 800ac76:	600b      	str	r3, [r1, #0]
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	da03      	bge.n	800ac84 <_printf_i+0xc8>
 800ac7c:	232d      	movs	r3, #45	; 0x2d
 800ac7e:	426d      	negs	r5, r5
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	485e      	ldr	r0, [pc, #376]	; (800ae00 <_printf_i+0x244>)
 800ac86:	230a      	movs	r3, #10
 800ac88:	e019      	b.n	800acbe <_printf_i+0x102>
 800ac8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac8e:	6805      	ldr	r5, [r0, #0]
 800ac90:	600b      	str	r3, [r1, #0]
 800ac92:	bf18      	it	ne
 800ac94:	b22d      	sxthne	r5, r5
 800ac96:	e7ef      	b.n	800ac78 <_printf_i+0xbc>
 800ac98:	680b      	ldr	r3, [r1, #0]
 800ac9a:	6825      	ldr	r5, [r4, #0]
 800ac9c:	1d18      	adds	r0, r3, #4
 800ac9e:	6008      	str	r0, [r1, #0]
 800aca0:	0628      	lsls	r0, r5, #24
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0xec>
 800aca4:	681d      	ldr	r5, [r3, #0]
 800aca6:	e002      	b.n	800acae <_printf_i+0xf2>
 800aca8:	0669      	lsls	r1, r5, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0xe8>
 800acac:	881d      	ldrh	r5, [r3, #0]
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_printf_i+0x244>)
 800acb0:	2f6f      	cmp	r7, #111	; 0x6f
 800acb2:	bf0c      	ite	eq
 800acb4:	2308      	moveq	r3, #8
 800acb6:	230a      	movne	r3, #10
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acbe:	6866      	ldr	r6, [r4, #4]
 800acc0:	60a6      	str	r6, [r4, #8]
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90d      	cbnz	r5, 800acd4 <_printf_i+0x118>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	d04d      	beq.n	800ad70 <_printf_i+0x1b4>
 800acd4:	4616      	mov	r6, r2
 800acd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800acda:	fb03 5711 	mls	r7, r3, r1, r5
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ace4:	462f      	mov	r7, r5
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460d      	mov	r5, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x11a>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x14c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07df      	lsls	r7, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x14c>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	; 0x30
 800ad00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad08:	1b92      	subs	r2, r2, r6
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee2 	bl	800aae0 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14c      	bne.n	800adba <_printf_i+0x1fe>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	4835      	ldr	r0, [pc, #212]	; (800ae00 <_printf_i+0x244>)
 800ad2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	680e      	ldr	r6, [r1, #0]
 800ad34:	061f      	lsls	r7, r3, #24
 800ad36:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad3a:	600e      	str	r6, [r1, #0]
 800ad3c:	d514      	bpl.n	800ad68 <_printf_i+0x1ac>
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	bf44      	itt	mi
 800ad42:	f043 0320 	orrmi.w	r3, r3, #32
 800ad46:	6023      	strmi	r3, [r4, #0]
 800ad48:	b91d      	cbnz	r5, 800ad52 <_printf_i+0x196>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f023 0320 	bic.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2310      	movs	r3, #16
 800ad54:	e7b0      	b.n	800acb8 <_printf_i+0xfc>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2378      	movs	r3, #120	; 0x78
 800ad60:	4828      	ldr	r0, [pc, #160]	; (800ae04 <_printf_i+0x248>)
 800ad62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad66:	e7e3      	b.n	800ad30 <_printf_i+0x174>
 800ad68:	065e      	lsls	r6, r3, #25
 800ad6a:	bf48      	it	mi
 800ad6c:	b2ad      	uxthmi	r5, r5
 800ad6e:	e7e6      	b.n	800ad3e <_printf_i+0x182>
 800ad70:	4616      	mov	r6, r2
 800ad72:	e7bb      	b.n	800acec <_printf_i+0x130>
 800ad74:	680b      	ldr	r3, [r1, #0]
 800ad76:	6826      	ldr	r6, [r4, #0]
 800ad78:	6960      	ldr	r0, [r4, #20]
 800ad7a:	1d1d      	adds	r5, r3, #4
 800ad7c:	600d      	str	r5, [r1, #0]
 800ad7e:	0635      	lsls	r5, r6, #24
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	d501      	bpl.n	800ad88 <_printf_i+0x1cc>
 800ad84:	6018      	str	r0, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <_printf_i+0x1d2>
 800ad88:	0671      	lsls	r1, r6, #25
 800ad8a:	d5fb      	bpl.n	800ad84 <_printf_i+0x1c8>
 800ad8c:	8018      	strh	r0, [r3, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	4616      	mov	r6, r2
 800ad94:	e7ba      	b.n	800ad0c <_printf_i+0x150>
 800ad96:	680b      	ldr	r3, [r1, #0]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	600a      	str	r2, [r1, #0]
 800ad9c:	681e      	ldr	r6, [r3, #0]
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7f5 fa54 	bl	8000250 <memchr>
 800ada8:	b108      	cbz	r0, 800adae <_printf_i+0x1f2>
 800adaa:	1b80      	subs	r0, r0, r6
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	2300      	movs	r3, #0
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	e7a8      	b.n	800ad0c <_printf_i+0x150>
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	4632      	mov	r2, r6
 800adbe:	4649      	mov	r1, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	47d0      	blx	sl
 800adc4:	3001      	adds	r0, #1
 800adc6:	d0ab      	beq.n	800ad20 <_printf_i+0x164>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	079b      	lsls	r3, r3, #30
 800adcc:	d413      	bmi.n	800adf6 <_printf_i+0x23a>
 800adce:	68e0      	ldr	r0, [r4, #12]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	4298      	cmp	r0, r3
 800add4:	bfb8      	it	lt
 800add6:	4618      	movlt	r0, r3
 800add8:	e7a4      	b.n	800ad24 <_printf_i+0x168>
 800adda:	2301      	movs	r3, #1
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d09b      	beq.n	800ad20 <_printf_i+0x164>
 800ade8:	3501      	adds	r5, #1
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	9903      	ldr	r1, [sp, #12]
 800adee:	1a5b      	subs	r3, r3, r1
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dcf2      	bgt.n	800adda <_printf_i+0x21e>
 800adf4:	e7eb      	b.n	800adce <_printf_i+0x212>
 800adf6:	2500      	movs	r5, #0
 800adf8:	f104 0619 	add.w	r6, r4, #25
 800adfc:	e7f5      	b.n	800adea <_printf_i+0x22e>
 800adfe:	bf00      	nop
 800ae00:	0800b809 	.word	0x0800b809
 800ae04:	0800b81a 	.word	0x0800b81a

0800ae08 <_sbrk_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d06      	ldr	r5, [pc, #24]	; (800ae24 <_sbrk_r+0x1c>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	f7f6 fbfe 	bl	8001614 <_sbrk>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_sbrk_r+0x1a>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_sbrk_r+0x1a>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20001934 	.word	0x20001934

0800ae28 <__sread>:
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae30:	f000 f8e0 	bl	800aff4 <_read_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	bfab      	itete	ge
 800ae38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae3c:	181b      	addge	r3, r3, r0
 800ae3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae42:	bfac      	ite	ge
 800ae44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae46:	81a3      	strhlt	r3, [r4, #12]
 800ae48:	bd10      	pop	{r4, pc}

0800ae4a <__swrite>:
 800ae4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4e:	461f      	mov	r7, r3
 800ae50:	898b      	ldrh	r3, [r1, #12]
 800ae52:	05db      	lsls	r3, r3, #23
 800ae54:	4605      	mov	r5, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	4616      	mov	r6, r2
 800ae5a:	d505      	bpl.n	800ae68 <__swrite+0x1e>
 800ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae60:	2302      	movs	r3, #2
 800ae62:	2200      	movs	r2, #0
 800ae64:	f000 f868 	bl	800af38 <_lseek_r>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	4632      	mov	r2, r6
 800ae76:	463b      	mov	r3, r7
 800ae78:	4628      	mov	r0, r5
 800ae7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	f000 b817 	b.w	800aeb0 <_write_r>

0800ae82 <__sseek>:
 800ae82:	b510      	push	{r4, lr}
 800ae84:	460c      	mov	r4, r1
 800ae86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8a:	f000 f855 	bl	800af38 <_lseek_r>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	bf15      	itete	ne
 800ae94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae9e:	81a3      	strheq	r3, [r4, #12]
 800aea0:	bf18      	it	ne
 800aea2:	81a3      	strhne	r3, [r4, #12]
 800aea4:	bd10      	pop	{r4, pc}

0800aea6 <__sclose>:
 800aea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeaa:	f000 b813 	b.w	800aed4 <_close_r>
	...

0800aeb0 <_write_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	; (800aed0 <_write_r+0x20>)
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4608      	mov	r0, r1
 800aeb8:	4611      	mov	r1, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	602a      	str	r2, [r5, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7f6 ff98 	bl	8001df4 <_write>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_write_r+0x1e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_write_r+0x1e>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20001934 	.word	0x20001934

0800aed4 <_close_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d06      	ldr	r5, [pc, #24]	; (800aef0 <_close_r+0x1c>)
 800aed8:	2300      	movs	r3, #0
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f6 fb63 	bl	80015aa <_close>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_close_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_close_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	20001934 	.word	0x20001934

0800aef4 <_fstat_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_fstat_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f6 fb5e 	bl	80015c2 <_fstat>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_fstat_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_fstat_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	20001934 	.word	0x20001934

0800af18 <_isatty_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d06      	ldr	r5, [pc, #24]	; (800af34 <_isatty_r+0x1c>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7f6 fb5d 	bl	80015e2 <_isatty>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_isatty_r+0x1a>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_isatty_r+0x1a>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20001934 	.word	0x20001934

0800af38 <_lseek_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <_lseek_r+0x20>)
 800af3c:	4604      	mov	r4, r0
 800af3e:	4608      	mov	r0, r1
 800af40:	4611      	mov	r1, r2
 800af42:	2200      	movs	r2, #0
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f7f6 fb56 	bl	80015f8 <_lseek>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_lseek_r+0x1e>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_lseek_r+0x1e>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20001934 	.word	0x20001934

0800af5c <memmove>:
 800af5c:	4288      	cmp	r0, r1
 800af5e:	b510      	push	{r4, lr}
 800af60:	eb01 0402 	add.w	r4, r1, r2
 800af64:	d902      	bls.n	800af6c <memmove+0x10>
 800af66:	4284      	cmp	r4, r0
 800af68:	4623      	mov	r3, r4
 800af6a:	d807      	bhi.n	800af7c <memmove+0x20>
 800af6c:	1e43      	subs	r3, r0, #1
 800af6e:	42a1      	cmp	r1, r4
 800af70:	d008      	beq.n	800af84 <memmove+0x28>
 800af72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af7a:	e7f8      	b.n	800af6e <memmove+0x12>
 800af7c:	4402      	add	r2, r0
 800af7e:	4601      	mov	r1, r0
 800af80:	428a      	cmp	r2, r1
 800af82:	d100      	bne.n	800af86 <memmove+0x2a>
 800af84:	bd10      	pop	{r4, pc}
 800af86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af8e:	e7f7      	b.n	800af80 <memmove+0x24>

0800af90 <__malloc_lock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_lock+0x8>)
 800af92:	f7ff b9df 	b.w	800a354 <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	2000192c 	.word	0x2000192c

0800af9c <__malloc_unlock>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__malloc_unlock+0x8>)
 800af9e:	f7ff b9da 	b.w	800a356 <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	2000192c 	.word	0x2000192c

0800afa8 <_realloc_r>:
 800afa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afaa:	4607      	mov	r7, r0
 800afac:	4614      	mov	r4, r2
 800afae:	460e      	mov	r6, r1
 800afb0:	b921      	cbnz	r1, 800afbc <_realloc_r+0x14>
 800afb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afb6:	4611      	mov	r1, r2
 800afb8:	f7ff ba82 	b.w	800a4c0 <_malloc_r>
 800afbc:	b922      	cbnz	r2, 800afc8 <_realloc_r+0x20>
 800afbe:	f7ff fa2f 	bl	800a420 <_free_r>
 800afc2:	4625      	mov	r5, r4
 800afc4:	4628      	mov	r0, r5
 800afc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc8:	f000 f826 	bl	800b018 <_malloc_usable_size_r>
 800afcc:	42a0      	cmp	r0, r4
 800afce:	d20f      	bcs.n	800aff0 <_realloc_r+0x48>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4638      	mov	r0, r7
 800afd4:	f7ff fa74 	bl	800a4c0 <_malloc_r>
 800afd8:	4605      	mov	r5, r0
 800afda:	2800      	cmp	r0, #0
 800afdc:	d0f2      	beq.n	800afc4 <_realloc_r+0x1c>
 800afde:	4631      	mov	r1, r6
 800afe0:	4622      	mov	r2, r4
 800afe2:	f7fe fe7b 	bl	8009cdc <memcpy>
 800afe6:	4631      	mov	r1, r6
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff fa19 	bl	800a420 <_free_r>
 800afee:	e7e9      	b.n	800afc4 <_realloc_r+0x1c>
 800aff0:	4635      	mov	r5, r6
 800aff2:	e7e7      	b.n	800afc4 <_realloc_r+0x1c>

0800aff4 <_read_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	; (800b014 <_read_r+0x20>)
 800aff8:	4604      	mov	r4, r0
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	2200      	movs	r2, #0
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f7f6 fab4 	bl	8001570 <_read>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_read_r+0x1e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_read_r+0x1e>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20001934 	.word	0x20001934

0800b018 <_malloc_usable_size_r>:
 800b018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b01c:	1f18      	subs	r0, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfbc      	itt	lt
 800b022:	580b      	ldrlt	r3, [r1, r0]
 800b024:	18c0      	addlt	r0, r0, r3
 800b026:	4770      	bx	lr

0800b028 <_init>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	bf00      	nop
 800b02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02e:	bc08      	pop	{r3}
 800b030:	469e      	mov	lr, r3
 800b032:	4770      	bx	lr

0800b034 <_fini>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr
